#!/usr/bin/env ruby

require "logger"
require "sequel"
require "director"
require "optparse"

config_file = nil

opts = OptionParser.new do |opts|
  opts.on("-c", "--config FILE", "configuration file") do |opt|
    config_file = opt
  end
end

opts.parse!(ARGV.dup)

if config_file.nil?
  puts opts
  exit 1
end

config = Psych.load_file(config_file)
unless config["db"] && config["db"]["database"]
  abort ("Director database config missing from config file")
end

db = Bosh::Director::Config.configure_db(config["db"])

def migrate(database, schema_table, dir, target = nil)
  options = {}
  options[:table] = schema_table if schema_table
  options[:target] = target.to_i if target

  Sequel.extension :migration
  Sequel::TimestampMigrator.new(database, dir, options).run
end

migrations_dir = File.expand_path("../../db/migrations/director", __FILE__)

migrate(db, nil, migrations_dir)

if config["dns"] && config["dns"]["db"]
  dns_migrations_dir = File.expand_path("../../db/migrations/dns", __FILE__)
  dns_db = Bosh::Director::Config.configure_db(config["dns"]["db"])
  migrate(dns_db, "dns_schema",
          dns_migrations_dir)
end

cpi = config["cloud"]["plugin"]
require_path = File.join("cloud", cpi)
cpi_path = $LOAD_PATH.find { |p| File.exist?(File.join(p, require_path)) }
migrations = File.expand_path("../db/migrations", cpi_path)

if File.directory?(migrations)
  migrate(db, "#{cpi}_cpi_schema", migrations)
end

