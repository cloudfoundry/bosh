require "rake"
require "tempfile"

ENV["BUNDLE_GEMFILE"] ||= File.expand_path("../../Gemfile", __FILE__)
require "rubygems"
require "bundler"
Bundler.setup(:default, :test)

require "rspec/core/rake_task"
require "ci/reporter/rake/rspec"

coverage_dir   = File.expand_path(File.join(File.dirname(__FILE__), "..", "spec_coverage"))
reports_dir    = File.expand_path(File.join(File.dirname(__FILE__), "..", "spec_reports"))
dump_file      = File.join(Dir.tmpdir, "bosh-agent.rcov")

ENV["CI_REPORTS"] = reports_dir

task :spec => [ "spec:all" ]

namespace "spec" do
  gemfile   = "../Gemfile"
  spec_opts = ["--format", "documentation", "--colour"]

  desc "Run unit tests"
  task "unit" => [ "run_unit" ]

  task "all" => [ "run_all" ]

  desc "Run specs for rcov"
  task "rcov" => [ "run_rcov" ]

  desc "Run specs for ci"
  task "ci" => [ "ci:setup:rspec", "spec:rcov", "convert_rcov_to_clover" ]

  RSpec::Core::RakeTask.new("run_all") do |t|
    t.gemfile    = gemfile
    t.rspec_opts = spec_opts
    t.pattern    = "**/*_spec.rb"    
  end

  RSpec::Core::RakeTask.new("run_unit") do |t|
    t.gemfile    = gemfile
    t.rspec_opts = spec_opts
    t.pattern    = "unit/*_spec.rb"
  end

  RSpec::Core::RakeTask.new("run_functional") do |t|
    t.gemfile    = gemfile
    t.rspec_opts = spec_opts
    t.pattern    = "functional/*_spec.rb"
  end

  if RUBY_VERSION < "1.9"
    desc "Run spec with coverage"
    RSpec::Core::RakeTask.new("run_rcov") do |t|
      FileUtils.rm_rf(dump_file)
      t.gemfile    = gemfile
      t.pattern    = "**/*_spec.rb"
      t.rspec_opts = ["--format", "progress", "--colour"]
      t.rcov       = true
      t.rcov_opts  = %W{--aggregate #{dump_file} --exclude osx\/objc,gems\/,spec\/,unit\/,features\/ -o "#{coverage_dir}"}
    end

  else
    desc "Run spec with coverage"
    task :run_rcov => :cleanup_coverage do
      require "simplecov"

      SimpleCov.start do
        require "rspec/core"
        spec_dir = File.expand_path("..", __FILE__)
        RSpec::Core::Runner.disable_autorun!
        RSpec::Core::Runner.run([spec_dir], STDERR, STDOUT)
      end
    end
  end 
    
  task "cleanup_coverage" do
    rm_rf "coverage"
  end 

  task "convert_rcov_to_clover" do |t|
    ignore_pattern = "spec,[.]bundle,[/]gems[/]"
    clover_output  = File.join(coverage_dir, "clover.xml")

    sh("bundle exec rcov_analyzer #{dump_file} #{ignore_pattern} > #{clover_output}")
    FileUtils.rm_rf(dump_file)
  end
end


