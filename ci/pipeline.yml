---
groups:
  - name: bosh
    jobs:
      - gate
      - bump-deps
      - bump-packages
      - unit
      - unit-mysql
      - unit-postgres
      - run-bundle-audit
      - integration-db-tls-postgres
      - integration-db-tls-postgres-hotswap
      - integration-db-tls-mysql
      - candidate-release
      - compile-bosh-dev-release-jammy
      - bats-ubuntu-jammy
      - brats-ubuntu-jammy
      - brats-performance
      - bats-ubuntu-xenial
      - bosh-disaster-recovery-acceptance-tests
      - upgrade
      - delivery

  - name: cut-release
    jobs:
      - automatically-release-new-patch
      - bump-major
      - bump-minor
      - bump-patch
      - finalize-release
      - export-final-release
      - clear-release-notes

  - name: docker
    jobs:
    - build-main-postgres-10
    - build-main-postgres-13
    - build-main-postgres-15
    - build-main-mysql-5-7
    - build-integration
    - build-docker-cpi
    - build-warden-cpi

jobs:
  - name: gate
    serial_groups:
      - integration-db-tls-mysql
      - integration-db-tls-postgres
      - integration-db-tls-postgres-hotswap
      - unit
      - unit-mysql
      - unit-postgres
      - run-bundle-audit
    plan:
    - get: bosh-src
      trigger: true

  - name: unit
    public: true
    serial: true
    serial_groups: [unit]
    build_logs_to_retain: 250
    plan:
      - get: bosh-src
        trigger: true
        passed: [gate]
      - get: integration-image
      - task: test
        timeout: 2h
        file: bosh-src/ci/tasks/test-unit.yml
        image: integration-image
        params:
          DB: sqlite

  - name: unit-mysql
    public: true
    serial: true
    serial_groups: [unit-mysql]
    build_logs_to_retain: 250
    plan:
      - in_parallel:
        - get: bosh-src
          passed: [gate]
          trigger: true
        - get: integration-mysql-5-7-image
      - task: test-mysql-5.7
        timeout: 2h
        privileged: true
        file: bosh-src/ci/tasks/test-unit.yml
        image: integration-mysql-5-7-image
        params:
          DB: mysql

  - name: unit-postgres
    public: true
    serial_groups: [unit-postgres]
    serial: true
    build_logs_to_retain: 250
    plan:
      - in_parallel:
        - get: bosh-src
          passed: [gate]
          trigger: true
        - get: integration-postgres-10-image
        - get: integration-postgres-13-image
        - get: integration-postgres-15-image
      - in_parallel:
        - task: test-postgres-10
          timeout: 2h
          privileged: true
          file: bosh-src/ci/tasks/test-unit.yml
          image: integration-postgres-10-image
          params:
            DB: postgresql
            DB_VERSION: 10
        - task: test-postgres-13
          timeout: 2h
          privileged: true
          file: bosh-src/ci/tasks/test-unit.yml
          image: integration-postgres-13-image
          params:
            DB: postgresql
            DB_VERSION: 13
        - task: test-postgres-15
          timeout: 2h
          privileged: true
          file: bosh-src/ci/tasks/test-unit.yml
          image: integration-postgres-15-image
          params:
            DB: postgresql
            DB_VERSION: 15

  - name: run-bundle-audit
    public: true
    serial: true
    serial_groups: [run-bundle-audit]
    build_logs_to_retain: 250
    plan:
      - get: bosh-src
        trigger: true
        passed: [gate]
      - task: test-bundle-audit
        config:
          inputs:
            - name: bosh-src
          platform: linux
          image_resource:
            type: docker-image
            source:
              tag: ((branch_name))
              repository: bosh/integration
          run:
            path: /bin/sh
            args:
              - -exc
              - |
                set -eux;
                cd bosh-src/src;
                gem install bundler:"$(grep -A 1 'BUNDLED WITH' Gemfile.lock | tail -n 1 | awk '{$1=$1};1')";
                bundle install;
                bundle exec bundle-audit update;
                bundle exec bundle-audit check --ignore 'CVE-2019-17383';

  - name: integration-db-tls-postgres
    public: true
    serial: true
    serial_groups: [integration-db-tls-postgres]
    build_logs_to_retain: 250
    plan:
      - in_parallel:
        - get: bosh-src
          trigger: true
          passed: [gate]
        - get: bosh-cli
          trigger: true
        - get: bosh-agent
        - get: integration-tests-parallel-runtime
        - get: integration-postgres-15-image
      - task: tests
        privileged: true
        file: bosh-src/ci/tasks/test-integration.yml
        image: integration-postgres-15-image
        params:
          DB:           postgresql
          DB_TLS:       true
          DB_VERSION: 15
      - put: integration-tests-parallel-runtime
        params:
          file: parallel-runtime-log/parallel_runtime_rspec.log
          acl: public-read

  - name: integration-db-tls-postgres-hotswap
    public: true
    serial: true
    serial_groups: [integration-db-tls-postgres-hotswap]
    build_logs_to_retain: 250
    plan:
      - in_parallel:
        - get: bosh-src
          trigger: true
          passed: [gate]
        - get: bosh-cli
          trigger: true
        - get: bosh-agent
        - get: integration-tests-parallel-runtime
        - get: integration-postgres-15-image
      - task: tests
        privileged: true
        file: bosh-src/ci/tasks/test-integration.yml
        image: integration-postgres-15-image
        params:
          DB:           postgresql
          DEFAULT_UPDATE_VM_STRATEGY: create-swap-delete
          DB_TLS:       true
          DB_VERSION: 15

      - put: integration-tests-parallel-runtime
        params:
          file: parallel-runtime-log/parallel_runtime_rspec.log
          acl: public-read

  - name: integration-db-tls-mysql
    public: true
    serial: true
    serial_groups: [integration-db-tls-mysql]
    build_logs_to_retain: 250
    plan:
      - in_parallel:
        - get: bosh-src
          passed: [gate]
          trigger: true
        - get: bosh-cli
          trigger: true
        - get: bosh-agent
        - get: integration-tests-parallel-runtime
        - get: integration-mysql-5-7-image
      - task: tests
        privileged: true
        file: bosh-src/ci/tasks/test-integration.yml
        image: integration-mysql-5-7-image
        params:
          DB:           mysql
          DB_TLS:       true
      - put: integration-tests-parallel-runtime
        params:
          file: parallel-runtime-log/parallel_runtime_rspec.log
          acl: public-read

  - name: candidate-release
    plan:
    - get: bosh-src
      trigger: true
      passed:
      - unit
      - unit-mysql
      - unit-postgres
      - integration-db-tls-mysql
      - integration-db-tls-postgres
      - integration-db-tls-postgres-hotswap
      - run-bundle-audit
    - get: bosh-cli
    - get: integration-image
    - task: make
      file: bosh-src/ci/tasks/make-candidate.yml
      image: integration-image
    - put: bosh-candidate-release-tarballs
      params:
        file: "release/bosh-dev-release.tgz"


  - name: compile-bosh-dev-release-jammy
    plan:
    - in_parallel:
      - get: bosh-src
        passed: [candidate-release]
      - get: release
        resource: bosh-candidate-release-tarballs
        passed: [candidate-release]
        trigger: true
      - get: stemcell
        resource: warden-ubuntu-jammy
        trigger: true
      - get: docker-cpi-image
    - task: export-release
      image: docker-cpi-image
      file: bosh-src/ci/tasks/export-release.yml
      privileged: true
    - put: bosh-compiled-candidate-jammy
      params:
        file: "compiled-release/*.tgz"

  - name: bats-ubuntu-jammy
    serial: true
    plan:
    - do:
      - in_parallel:
        - get: bosh-candidate-release-tarballs
          passed: [compile-bosh-dev-release-jammy]
        - get: bosh-release
          resource: bosh-compiled-candidate-jammy
          trigger: true
          passed: [compile-bosh-dev-release-jammy]
        - get: cpi-release
        - get: stemcell
          resource: google-kvm-ubuntu-jammy
        - get: bosh-cli
        - get: bats
        - get: bosh-deployment
        - get: bosh-src
          passed: [compile-bosh-dev-release-jammy]
        - get: integration-image
      - do:
        - task: deploy-director
          file: bosh-src/ci/bats/tasks/gcp/deploy-director.yml
          params:
            GCP_PROJECT_ID: ((gcp_project_id))
            GCP_ZONE: europe-west2-a
            GCP_PREEMPTIBLE: true
            GCP_NETWORK_NAME: bosh-concourse
            GCP_SUBNET_NAME: bosh-integration-director-1 # TODO: create director subnet under the bosh-concourse vpc
            GCP_JSON_KEY: ((gcp_json_key))
            INTERNAL_IP: 10.101.1.66
            INTERNAL_CIDR: 10.101.1.0/24
            INTERNAL_GW: 10.101.1.1
            RESERVED_RANGE: '10.101.1.2 - 10.101.1.63, 10.101.1.126 - 10.101.1.254'
            TAG: test-stemcells-bats
        - task: prepare-bats
          file: bosh-src/ci/bats/tasks/bats/iaas/gcp/prepare-bats-config.yml
          params:
            VARS_STEMCELL_NAME: bosh-google-kvm-ubuntu-(@= stemcell.os @)-go_agent
            VARS_NETWORK_DEFAULT: bosh-concourse
            VARS_AVAILABILITY_ZONE: europe-west2-a
            VARS_ZONE: europe-west2-a
            VARS_PREEMPTIBLE: true
            VARS_SUBNETWORK_DEFAULT: bosh-integration-director-1
            VARS_CIDR_DEFAULT: "10.101.1.0/24"
            VARS_RESERVED_DEFAULT: '10.101.1.2 - 10.101.1.129, 10.101.1.190 - 10.101.1.254'
            VARS_STATIC_DEFAULT: '10.101.1.130 - 10.101.1.155'
            VARS_STATIC_IP_DEFAULT: 10.101.1.130
            VARS_STATIC_IP_DEFAULT-2: 10.101.1.132
            VARS_GATEWAY_DEFAULT: 10.101.1.1
            VARS_TAG: test-stemcells-bats
        - task: run-bats
          file: bats/ci/tasks/run-bats.yml
          image: integration-image
      ensure:
        do:
        - task: teardown
          file: bosh-src/ci/bats/tasks/destroy-director.yml
          image: integration-image
          attempts: 3

  - name: brats-ubuntu-jammy
    serial: true
    plan:
    - in_parallel:
      - get: bosh-src
        passed: [compile-bosh-dev-release-jammy]
      - get: bosh-dns-release
      - get: stemcell
        resource: warden-ubuntu-jammy
      - get: bosh-candidate-release-tarballs
        passed: [compile-bosh-dev-release-jammy]
      - get: bosh-release
        resource: bosh-compiled-candidate-jammy
        trigger: true
        passed: [compile-bosh-dev-release-jammy]
      - get: bosh-deployment
      - get: docker-cpi-image
      - get: integration-image
    - do:
      - put: brats-terraform
        attempts: 2
        params:
          env_name: brats-ubuntu-jammy-((branch_name))
          terraform_source: bosh-src/ci/brats
          vars: &brats-terraform-jammy-vars
          # TODO: why is this not generated by terraform?
          # seems that multiple scripts are using these vars and there for a more complex refactor is required.
            rds_mysql_username: ((brats-rds-mysql-external-db-user))
            rds_mysql_password: ((brats-rds-mysql-external-db-password))
            rds_mysql_databasename: ((brats-rds-mysql-external-db-name))
            rds_postgres_username: ((brats-rds-postgres-external-db-user))
            rds_postgres_password: ((brats-rds-postgres-external-db-password))
            rds_postgres_databasename: ((brats-rds-postgres-external-db-name))
            aws_access_key_id: ((bosh-ci-rds-terraform_assume_aws_access_key.username))
            aws_secret_access_key: ((bosh-ci-rds-terraform_assume_aws_access_key.password))
            aws_role_arn: ((bosh-ci-rds-terraform_assume_aws_access_key.role_arn))
            gcp_mysql_databasename: ((brats-gcp-mysql-external-db-name))
            gcp_postgres_databasename: ((brats-gcp-postgres-external-db-name))
            gcp_private_network_name: brats-ubuntu-jammy-((branch_name))
            concourse_authorized_network: ((concourse_egress_ip))
          env:
            GOOGLE_CREDENTIALS: ((cf-bosh-core_gcp-database-terraform_gcp_credentials_json))
      - put: brats-terraform
        params:
          action: refresh
          env_name: brats-ubuntu-jammy-((branch_name))
          terraform_source: bosh-src/ci/brats
          vars: *brats-terraform-jammy-vars
          env:
            GOOGLE_CREDENTIALS: ((cf-bosh-core_gcp-database-terraform_gcp_credentials_json))
      - task: create-brats-sql-users
        file: bosh-src/ci/tasks/create-brats-sql-users.yml
        params:
          GOOGLE_CREDENTIALS: ((cf-bosh-core_gcp-database-terraform_gcp_credentials_json))
          GCP_POSTGRES_USERNAME: ((brats-gcp-postgres-external-db-user))
          GCP_POSTGRES_PASSWORD: ((brats-gcp-postgres-external-db-password))
          GCP_MYSQL_USERNAME: ((brats-gcp-mysql-external-db-user))
          GCP_MYSQL_PASSWORD: ((brats-gcp-mysql-external-db-password))
        input_mapping:
          terraform-output: brats-terraform
      - task: create-ssl-certificates
        attempts: 2
        file: bosh-src/ci/tasks/create-brats-ssl-certificates.yml
        params:
          GOOGLE_CREDENTIALS: ((cf-bosh-core_gcp-database-terraform_gcp_credentials_json))
        input_mapping:
          terraform-output: brats-terraform
      - task: test-brats
        image: docker-cpi-image
        file: bosh-src/ci/tasks/test-brats.yml
        input_mapping:
          database-metadata: brats-terraform
        privileged: true
        params: &brats-dbs-params
          RDS_MYSQL_EXTERNAL_DB_USER: ((brats-rds-mysql-external-db-user))
          RDS_MYSQL_EXTERNAL_DB_PASSWORD: ((brats-rds-mysql-external-db-password))
          RDS_MYSQL_EXTERNAL_DB_NAME: ((brats-rds-mysql-external-db-name))
          RDS_POSTGRES_EXTERNAL_DB_USER: ((brats-rds-postgres-external-db-user))
          RDS_POSTGRES_EXTERNAL_DB_PASSWORD: ((brats-rds-postgres-external-db-password))
          RDS_POSTGRES_EXTERNAL_DB_NAME: ((brats-rds-postgres-external-db-name))
          GCP_MYSQL_EXTERNAL_DB_USER: ((brats-gcp-mysql-external-db-user))
          GCP_MYSQL_EXTERNAL_DB_PASSWORD: ((brats-gcp-mysql-external-db-password))
          GCP_MYSQL_EXTERNAL_DB_NAME: ((brats-gcp-mysql-external-db-name))
          GCP_POSTGRES_EXTERNAL_DB_USER: ((brats-gcp-postgres-external-db-user))
          GCP_POSTGRES_EXTERNAL_DB_PASSWORD: ((brats-gcp-postgres-external-db-password))
          GCP_POSTGRES_EXTERNAL_DB_NAME: ((brats-gcp-postgres-external-db-name))
          GCP_PRIVATE_NETWORK_NAME: brats-ubuntu-jammy-((branch_name))
          STEMCELL_OS: ubuntu-jammy
      ensure:
        do:
        - task: cleanup-external-dbs
          file: bosh-src/ci/tasks/test-brats-db-cleanup.yml
          image: integration-image
          input_mapping:
            database-metadata: brats-terraform
          params: *brats-dbs-params
        - task: destroy-brats-sql-users
          file: bosh-src/ci/tasks/destroy-brats-sql-users.yml
          params:
            GOOGLE_CREDENTIALS: ((cf-bosh-core_gcp-database-terraform_gcp_credentials_json))
            GCP_POSTGRES_USERNAME: ((brats-gcp-postgres-external-db-user))
            GCP_POSTGRES_PASSWORD: ((brats-gcp-postgres-external-db-password))
            GCP_MYSQL_USERNAME: ((brats-gcp-mysql-external-db-user))
            GCP_MYSQL_PASSWORD: ((brats-gcp-mysql-external-db-password))
          input_mapping:
            terraform-output: brats-terraform
        - put: brats-terraform
          attempts: 3
          get_params: { action: destroy }
          params:
            env_name: brats-ubuntu-jammy-((branch_name))
            terraform_source: bosh-src/ci/brats
            vars:
              rds_mysql_username: ((brats-rds-mysql-external-db-user))
              rds_mysql_password: ((brats-rds-mysql-external-db-password))
              rds_mysql_databasename: ((brats-rds-mysql-external-db-name))
              rds_postgres_username: ((brats-rds-postgres-external-db-user))
              rds_postgres_password: ((brats-rds-postgres-external-db-password))
              rds_postgres_databasename: ((brats-rds-postgres-external-db-name))
              aws_access_key_id: ((bosh-ci-rds-terraform_assume_aws_access_key.username))
              aws_secret_access_key: ((bosh-ci-rds-terraform_assume_aws_access_key.password))
              aws_role_arn: ((bosh-ci-rds-terraform_assume_aws_access_key.role_arn))
              gcp_mysql_databasename: ((brats-gcp-mysql-external-db-name))
              gcp_postgres_databasename: ((brats-gcp-postgres-external-db-name))
              gcp_private_network_name: brats-ubuntu-jammy-((branch_name))
              concourse_authorized_network: ((concourse_egress_ip))
            env:
              GOOGLE_CREDENTIALS: ((cf-bosh-core_gcp-database-terraform_gcp_credentials_json))
            action: destroy

  #The VMware Bosh Ecosystem team has a need to cross-check the behavior of
  #BATS on both the (VMware-"proprietary") Xenial ESM stemcell, as well as
  #the latest Open Source stemcell. If you are an Open Source user, and do
  #not have access to the Xenial ESM stemcell, do know that you can comment
  #out the `bats-ubuntu-xenial` job, and all resources that it references
  #and have no loss of pipeline functionality.
  # - name: bats-ubuntu-xenial
  #   serial: true
  #   plan:
  #   - do:
  #     - in_parallel:
  #       - get: bosh-candidate-release-tarballs
  #         passed: [compile-bosh-dev-release-jammy]
  #       - get: bosh-release
  #         resource: bosh-compiled-candidate-jammy
  #         trigger: true
  #         passed: [compile-bosh-dev-release-jammy]
  #       - get: cpi-release
  #       - get: stemcell
  #         resource: vsphere-esxi-ubuntu-xenial
  #         params:
  #            globs: ["*vsphere*"]
  #       - get: bosh-cli
  #       - get: bats
  #       - get: bosh-deployment
  #       - get: bosh-src
  #         passed: [compile-bosh-dev-release-jammy]
  #       - get: integration-image
  #     - put: environment
  #       resource: nimbus-environment
  #       params:
  #         acquire: true
  #     - do:
  #       - task: deploy-director
  #         tags: [nimbus]
  #         file: bosh-src/ci/bats/tasks/deploy-director.yml
  #         image: integration-image
  #         params:
  #           BAT_INFRASTRUCTURE: vsphere
  #           BOSH_CLIENT: ((stemcell-test-director-username))
  #           BOSH_CLIENT_SECRET: ((stemcell-test-director-password))
  #           BOSH_VAR_vcenter_ip: "((nimbus_bosh-main_ip))"
  #           BOSH_VAR_vcenter_user: "((nimbus_bosh-main_user.username))"
  #           BOSH_VAR_vcenter_password: "((nimbus_bosh-main_user.password))"
  #           BOSH_VAR_vcenter_cluster: "((nimbus_bosh-main_cluster))"
  #           BOSH_VAR_vcenter_dc: "((nimbus_bosh-main_dc))"
  #           BOSH_VAR_vcenter_ds: "((nimbus_bosh-main_ds))"
  #           BOSH_VAR_vcenter_rp: "((nimbus_bosh-main_rp))"
  #           DEPLOY_ARGS: |
  #             -o bosh-deployment/vsphere/resource-pool.yml
  #             -o bosh-deployment/misc/source-releases/bosh.yml
  #             --vars-env=BOSH_VAR
  #       - task: prepare-bats
  #         tags: [nimbus]
  #         file: bosh-src/ci/bats/iaas/vsphere/prepare-bats-config.yml
  #         image: integration-image
  #         params:
  #           STEMCELL_NAME: bosh-vsphere-esxi-ubuntu-xenial-go_agent
  #       - task: run-bats
  #         tags: [nimbus]
  #         file: bats/ci/tasks/run-bats.yml
  #         image: integration-image
  #     ensure:
  #       do:
  #       - task: teardown
  #         tags: [nimbus]
  #         file: bosh-src/ci/bats/tasks/destroy-director.yml
  #         image: integration-image
  #         attempts: 3
  #       - put: environment
  #         resource: nimbus-environment
  #         params:
  #          release: environment
  #         attempts: 3

  - name: brats-performance
    serial: true
    plan:
    - in_parallel:
      - get: bosh-src
        passed: [compile-bosh-dev-release-jammy]
      - get: bosh-release
        resource: bosh-compiled-candidate-jammy
        trigger: true
      - get: cf-deployment
      - get: docker-cpi-image
      - get: stemcell
        resource: warden-ubuntu-jammy
        passed: [compile-bosh-dev-release-jammy]
    - do:
      - task: test-brats-performance
        image: docker-cpi-image
        file: bosh-src/ci/tasks/test-brats-performance.yml
        privileged: true

  - name: bosh-disaster-recovery-acceptance-tests
    plan:
    - in_parallel:
      - get: bosh-src
        passed: [compile-bosh-dev-release-jammy]
      - get: stemcell
        resource: warden-ubuntu-jammy
      - get: bosh-candidate-release-tarballs
        passed: [compile-bosh-dev-release-jammy]
      - get: bosh-release
        resource: bosh-compiled-candidate-jammy
        trigger: true
        passed: [compile-bosh-dev-release-jammy]
      - get: bosh-disaster-recovery-acceptance-tests
      - get: bosh-deployment
      - get: bbr-cli-binary
        params:
          globs: ["bbr*-linux-amd64"]
      - get: warden-cpi-docker-image
    - do:
      - task: test-bdrats
        image: warden-cpi-docker-image
        file: bosh-src/ci/tasks/test-bdrats.yml
        privileged: true

  - name: upgrade # TODO: should we convert this to gcp?
    serial: true
    plan:
    - do:
      - in_parallel:
        - get: bosh-src
          passed: [compile-bosh-dev-release-jammy]
        - get: stemcell
          resource: aws-xen-hvm-ubuntu-jammy
        - get: bosh-deployment
        - get: bosh-cli
        - get: bosh-release
          resource: bosh-compiled-candidate-jammy
          trigger: true
          passed: [compile-bosh-dev-release-jammy]
        - get: last-released-bosh-release
        - get: zookeeper-release
        - get: integration-image
      - put: terraform
        params:
          terraform_source: bosh-src/ci/bats/iaas/aws/terraform
          delete_on_failure: true
          env_name: upgrade-ubuntu-jammy-aws-((branch_name))
    - do:
      - task: deploy-previous-version
        image: integration-image
        file: bosh-src/ci/bats/tasks/deploy-director.yml
        input_mapping:
          environment: terraform
          bosh-release: last-released-bosh-release
        params:
          BAT_INFRASTRUCTURE: aws
          AWS_ACCESS_KEY_ID:     ((bats_dev_aws_access_key.username))
          AWS_SECRET_ACCESS_KEY: ((bats_dev_aws_access_key.password))
          AWS_ROLE_ARN: ((bats_dev_aws_access_key.role_arn))
          AWS_DEFAULT_REGION:    us-east-1
          AWS_SSH_PRIVATE_KEY:   ((terraform_aws_keypair.private_key))
          DEPLOY_ARGS: |
            -o bosh-deployment/external-ip-not-recommended.yml
            -o bosh-deployment/aws/cpi-assume-role-credentials.yml
      - task: deploy-zookeeper
        image: integration-image
        file: bosh-src/ci/tasks/deploy-zookeeper.yml
      - task: upgrade-to-current-version
        image: integration-image
        file: bosh-src/ci/bats/tasks/deploy-director.yml
        input_mapping:
          environment: terraform
        params:
          BAT_INFRASTRUCTURE: aws
          AWS_ACCESS_KEY_ID:     ((bats_dev_aws_access_key.username))
          AWS_SECRET_ACCESS_KEY: ((bats_dev_aws_access_key.password))
          AWS_ROLE_ARN: ((bats_dev_aws_access_key.role_arn))
          AWS_DEFAULT_REGION:    us-east-1
          AWS_SSH_PRIVATE_KEY:   ((terraform_aws_keypair.private_key))
          DEPLOY_ARGS: |
            -o bosh-deployment/external-ip-not-recommended.yml
            -o bosh-deployment/aws/cpi-assume-role-credentials.yml
      - task: sleep-180-seconds
        image: integration-image
        config:
          platform: linux
          run:
            path: /bin/sh
            args:
              - -exc
              - |
                sleep 180
      - task: recreate-zookeeper
        image: integration-image
        file: bosh-src/ci/tasks/deploy-zookeeper.yml
      ensure:
        do:
        - task: teardown
          image: integration-image
          file: bosh-src/ci/bats/tasks/destroy-director.yml
          attempts: 3
        ensure:
          do:
          - task: ensure-terminated
            image: integration-image
            file: bosh-src/ci/bats/iaas/aws/ensure-terminated.yml
            input_mapping:
              environment: terraform
            params:
              AWS_ACCESS_KEY_ID:     ((bats_dev_aws_access_key.username))
              AWS_SECRET_ACCESS_KEY: ((bats_dev_aws_access_key.password))
              AWS_ROLE_ARN:          ((bats_dev_aws_access_key.role_arn))
              AWS_DEFAULT_REGION:    us-east-1
          - put: terraform
            attempts: 3
            params:
              terraform_source: bosh-src/ci/bats/iaas/aws/terraform
              env_name: upgrade-ubuntu-jammy-aws-((branch_name))
              action: destroy
            get_params:
              action: destroy

  - name: delivery
    plan:
      - in_parallel:
        - get: bosh-src
          trigger: true
          passed:
          - bats-ubuntu-jammy
          - brats-ubuntu-jammy
          - bosh-disaster-recovery-acceptance-tests
          - upgrade

  - name: finalize-release
    serial: true
    plan:
      - in_parallel:
        - get: bosh-src
          passed: [delivery]
        - get: bosh-src-latest
          resource: bosh-src
        - get: bosh-cli
        - get: integration-image
        - get: version
          trigger: true
        - get: release-notes
      - task: prepare-release
        image: integration-image
        file: bosh-src/ci/tasks/prepare-release.yml
      - get: bosh-main
      - task: finalize-release
        image: integration-image
        file: bosh-src-latest-with-release-commit/ci/tasks/finalize-bosh-release.yml
        params:
          RELEASE_PRIVATE_YML: |
            blobstore:
              options:
                credentials_source: static
                json_key: '((bosh_release_blobs_gcp_credentials_json))'
      - put: bosh-src
        params:
          repository: bosh-src-latest-with-release-commit
          tag: bosh-main/tag-name
          annotate: bosh-main/annotate-msg
          merge: true
      - put: bosh-github-release
        params:
          name: bosh-main/tag-name
          tag: bosh-main/tag-name
          body: release-notes/release-notes.md
      - put: bosh-main
        params:
          repository: bosh-main
          rebase: true

  - name: export-final-release
    serial: true
    plan:
    - in_parallel:
      - get: bosh-main
      - get: version
        passed: [finalize-release]
        trigger: true
      - get: warden-ubuntu-jammy
        trigger: true
      - get: warden-cpi-docker-image
    - task: export-final-release
      image: warden-cpi-docker-image
      file: bosh-main/ci/tasks/export-final-release.yml
      privileged: true
      input_mapping:
        stemcell: warden-ubuntu-jammy
        bosh-src: bosh-main
    - task: push-bosh-compiled-releases
      file: bosh-main/ci/tasks/push-bosh-compiled-release.yml
      input_mapping:
        candidate-version: version
        bosh-src: bosh-main
      params:
        AWS_ACCESS_KEY_ID: ((bosh-compiled-releases_assume_aws_access_key.username))
        AWS_SECRET_ACCESS_KEY: ((bosh-compiled-releases_assume_aws_access_key.password))
        AWS_ROLE_ARN: ((bosh-compiled-releases_assume_aws_access_key.role_arn))
        git_private_key: ((github_deploy_key_bosh-compiled-releases-index.private_key))

  - name: clear-release-notes
    plan:
    - get: version
      passed:
      - finalize-release
      trigger: true
    - task: clear-release-notes
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: alpine
        outputs:
        - name: release-notes
        run:
          path: sh
          args:
          - -exc
          - touch release-notes/release-notes.md
    - put: release-notes
      params:
        file: release-notes/release-notes.md

  - name: automatically-release-new-patch
    serial_groups:
    - version
    plan:
    - in_parallel:
      - get: bosh-src
        trigger: true
        passed:
        - delivery
      - get: current-version
        resource: version
      - get: patched-version
        resource: version
        params:
          bump: patch
    - try:
        task: check-for-updated-blobs
        file: bosh-src/ci/tasks/check-for-updated-blobs.yml
        input_mapping:
          version: current-version
        params:
          BLOBS:
          - nats-server
          - postgresql-10
          - postgresql-13
          - postgresql-15
        on_success:
          do:
          - put: release-notes
            params:
              file: release-notes/release-notes.md
          - put: version
            params:
              file: patched-version/version

  - name: bump-major
    serial: true
    plan:
    - get: version
      params:
        bump: major
    - put: version
      params:
        file: version/version

  - name: bump-minor
    serial: true
    plan:
    - get: version
      params:
        bump: minor
    - put: version
      params:
        file: version/version

  - name: bump-patch
    serial: true
    plan:
    - get: version
      params:
        bump: patch
    - put: version
      params:
        file: version/version

  - name: build-integration
    public: true
    serial: true
    plan:
    - get: weekly
      trigger: true
    - get: golang-docker-image
      trigger: true
    - get: bosh-src-dockerfiles
      trigger: true
    - put: integration-image
      params:
        tag_as_latest: true
        build: "bosh-src-dockerfiles/ci/dockerfiles/integration"
        build_args:
          BRANCH: ((branch_name))
      get_params:
        skip_download: true

  - name: build-main-postgres-10
    public: true
    serial: true
    plan:
      - get: bosh-src-dockerfiles
      - get: integration-image
        trigger: true
        passed: [build-integration]
      - put: integration-postgres-10-image
        params:
          tag_as_latest: true
          build: "bosh-src-dockerfiles/ci/dockerfiles/main-postgres"
          build_args:
            DB_VERSION: "10"
            BRANCH: ((branch_name))
        get_params:
          skip_download: true

  - name: build-main-postgres-13
    public: true
    serial: true
    plan:
      - get: bosh-src-dockerfiles
      - get: integration-image
        trigger: true
        passed: [build-integration]
      - put: integration-postgres-13-image
        params:
          tag_as_latest: true
          build: "bosh-src-dockerfiles/ci/dockerfiles/main-postgres"
          build_args:
            DB_VERSION: "13"
            BRANCH: ((branch_name))
        get_params:
          skip_download: true

  - name: build-main-postgres-15
    public: true
    serial: true
    plan:
      - get: bosh-src-dockerfiles
      - get: integration-image
        trigger: true
        passed: [build-integration]
      - put: integration-postgres-15-image
        params:
          tag_as_latest: true
          build: "bosh-src-dockerfiles/ci/dockerfiles/main-postgres"
          build_args:
            DB_VERSION: "15"
            BRANCH: ((branch_name))
        get_params:
          skip_download: true

  - name: build-main-mysql-5-7
    public: true
    serial: true
    plan:
      - get: bosh-src-dockerfiles
      - get: integration-image
        trigger: true
        passed: [build-integration]
      - put: integration-mysql-5-7-image
        params:
          tag_as_latest: true
          build: "bosh-src-dockerfiles/ci/dockerfiles/main-mysql"
          build_args:
            BRANCH: ((branch_name))
        get_params:
          skip_download: true

  - name: build-docker-cpi
    public: true
    serial: true
    plan:
      - in_parallel:
          - get: bosh-src
          - get: integration-image
            trigger: true
            passed: [build-integration]
          - get: bosh-src-dockerfiles
          - get: bosh-cli
            trigger: true
          - get: bosh-deployment
            trigger: true
      - task: copy-dependencies
        file: bosh-src/ci/tasks/prepare-container-docker-cpi-build-context.yml
      - put: docker-cpi-image
        params:
          tag_as_latest: true
          build: docker-build-context
        get_params:
          skip_download: true

  - name: build-warden-cpi
    plan:
    - in_parallel:
      - get: bosh-src
      - get: integration-image
        trigger: true
        passed: [build-integration]
      - get: bosh-deployment
        trigger: true
      - get: ubuntu-docker-image
    - task: prepare-container-build-context
      file: bosh-src/ci/dockerfiles/warden-cpi/prepare-container-build-context.yml
      image: ubuntu-docker-image
    - put: warden-cpi-docker-image
      params:
        build: docker-build-context
        cache: true

  - name: bump-deps
    serial: true
    plan:
    - in_parallel:
      - get: bosh-src
      - get: ruby-release
      - get: weekly
        trigger: true
      - get: integration-image
    - task: bump-gems
      file: ruby-release/ci/tasks/shared/bump-gems.yml
      input_mapping:
        input-repo: bosh-src
      output_mapping:
        output-repo: bosh-src-out
      params:
        GEM_DIRS: src
        GIT_USER_NAME: CI Bot
        GIT_USER_EMAIL: cf-bosh-eng@pivotal.io
        PACKAGE: ruby-3.2
        VENDOR: true
        VENDOR_PATH: vendor/cache
    - task: test
      timeout: 2h
      file: bosh-src/ci/tasks/test-unit.yml
      image: integration-image
      input_mapping:
        bosh-src: bosh-src-out
      params:
        DB: sqlite
    - put: bosh-src
      params:
        repository: bosh-src-out
        rebase: true

  - name: bump-packages
    serial: true
    plan:
    - in_parallel:
      - get: bosh-src
      - get: nginx-release
        trigger: true
      - get: mariadb-connector-c-resource
        trigger: true
      - get: postgres-10-src
        trigger: true
      - get: postgres-13-src
        trigger: true
      - get: postgres-15-src
        trigger: true
      - get: ruby-release
        trigger: true
      - get: bosh-blobstore-dav
        trigger: true
      - get: bosh-blobstore-gcs
        trigger: true
      - get: bosh-blobstore-s3
        trigger: true
      - get: bosh-blobstore-azure-storage
        trigger: true
      - get: verify-multidigest-cli
        trigger: true
      - get: nats-server-github-release
        trigger: true
        params:
          globs: [ nats-server-v*-linux-amd64.tar.gz ]
    - task: bump-nginx-packages
      file: nginx-release/ci/shared/bump-nginx-package.yml
      input_mapping:
        input_repo: bosh-src
      output_mapping:
        output_repo: bosh-src-out
      params:
        PACKAGES: [nginx]
        PRIVATE_YML: |
          blobstore:
            options:
              credentials_source: static
              json_key: '((bosh_release_blobs_gcp_credentials_json))'
    - task: bump-mariadb-connector
      file: bosh-src/ci/tasks/bump-mariadb-connector.yml
      input_mapping:
        bosh-src: bosh-src-out
      output_mapping:
        bosh-src: bosh-src-out
      params:
        GIT_USER_NAME: CI Bot
        GIT_USER_EMAIL: cf-bosh-eng@pivotal.io
        PRIVATE_YML: |
          blobstore:
            options:
              credentials_source: static
              json_key: '((bosh_release_blobs_gcp_credentials_json))'
    - task: bump-postgres-10-package
      file: bosh-src/ci/tasks/bump-postgres-packages.yml
      input_mapping:
        bosh-src: bosh-src-out
        postgres-src: postgres-10-src
      output_mapping:
        bosh-src: bosh-src-out
      params:
        MAJOR_VERSION: 10
        PRIVATE_YML: |
          blobstore:
            options:
              credentials_source: static
              json_key: '((bosh_release_blobs_gcp_credentials_json))'
    - task: bump-postgres-13-package
      file: bosh-src/ci/tasks/bump-postgres-packages.yml
      input_mapping:
        bosh-src: bosh-src-out
        postgres-src: postgres-13-src
      output_mapping:
        bosh-src: bosh-src-out
      params:
        MAJOR_VERSION: 13
        PRIVATE_YML: |
          blobstore:
            options:
              credentials_source: static
              json_key: '((bosh_release_blobs_gcp_credentials_json))'
    - task: bump-postgres-15-package
      file: bosh-src/ci/tasks/bump-postgres-packages.yml
      input_mapping:
        bosh-src: bosh-src-out
        postgres-src: postgres-15-src
      output_mapping:
        bosh-src: bosh-src-out
      params:
        MAJOR_VERSION: 15
        PRIVATE_YML: |
          blobstore:
            options:
              credentials_source: static
              json_key: '((bosh_release_blobs_gcp_credentials_json))'
    - task: bump-ruby-package
      file: ruby-release/ci/tasks/shared/bump-ruby-package.yml
      input_mapping:
        bosh-release: bosh-src-out
      output_mapping:
        bosh-release: bosh-src-out
      params:
        GIT_USER_NAME: CI Bot
        GIT_USER_EMAIL: cf-bosh-eng@pivotal.io
        PACKAGE: ruby-3.2
        PACKAGE_PREFIX: "director"
        PRIVATE_YML: |
          blobstore:
            options:
              credentials_source: static
              json_key: '((bosh_release_blobs_gcp_credentials_json))'
    - task: bump-bosh-blobstore-dav
      file: bosh-src/ci/tasks/bump-blobstore-cli.yml
      input_mapping:
        bosh-src: bosh-src-out
        bosh-blobstore-cli: bosh-blobstore-dav
      output_mapping:
        bosh-src: bosh-src-out
      params:
        BLOBSTORE_TYPE: dav
        GIT_USER_NAME: CI Bot
        GIT_USER_EMAIL: cf-bosh-eng@pivotal.io
        PRIVATE_YML: |
          blobstore:
            options:
              credentials_source: static
              json_key: '((bosh_release_blobs_gcp_credentials_json))'
    - task: bump-bosh-blobstore-gcs
      file: bosh-src/ci/tasks/bump-blobstore-cli.yml
      input_mapping:
        bosh-src: bosh-src-out
        bosh-blobstore-cli: bosh-blobstore-gcs
      output_mapping:
        bosh-src: bosh-src-out
      params:
        BLOBSTORE_TYPE: gcs
        GIT_USER_NAME: CI Bot
        GIT_USER_EMAIL: cf-bosh-eng@pivotal.io
        PRIVATE_YML: |
          blobstore:
            options:
              credentials_source: static
              json_key: '((bosh_release_blobs_gcp_credentials_json))'
    - task: bump-bosh-blobstore-s3
      file: bosh-src/ci/tasks/bump-blobstore-cli.yml
      input_mapping:
        bosh-src: bosh-src-out
        bosh-blobstore-cli: bosh-blobstore-s3
      output_mapping:
        bosh-src: bosh-src-out
      params:
        BLOBSTORE_TYPE: s3
        GIT_USER_NAME: CI Bot
        GIT_USER_EMAIL: cf-bosh-eng@pivotal.io
        PRIVATE_YML: |
          blobstore:
            options:
              credentials_source: static
              json_key: '((bosh_release_blobs_gcp_credentials_json))'
    - task: bump-bosh-blobstore-azure-storage
      file: bosh-src/ci/tasks/bump-blobstore-cli.yml
      input_mapping:
        bosh-src: bosh-src-out
        bosh-blobstore-cli: bosh-blobstore-azure-storage
      output_mapping:
        bosh-src: bosh-src-out
      params:
        BLOBSTORE_TYPE: azure-storage
        GIT_USER_NAME: CI Bot
        GIT_USER_EMAIL: cf-bosh-eng@pivotal.io
        PRIVATE_YML: |
          blobstore:
            options:
              credentials_source: static
              json_key: '((bosh_release_blobs_gcp_credentials_json))'
    - task: bump-verify-multidigest-cli
      file: bosh-src/ci/tasks/bump-verify-multidigest-cli.yml
      input_mapping:
        bosh-src: bosh-src-out
      output_mapping:
        bosh-src: bosh-src-out
      params:
        GIT_USER_NAME: CI Bot
        GIT_USER_EMAIL: cf-bosh-eng@pivotal.io
        PRIVATE_YML: |
          blobstore:
            options:
              credentials_source: static
              json_key: '((bosh_release_blobs_gcp_credentials_json))'
    - task: bump-nats-server
      file: bosh-src/ci/tasks/bump-nats-server.yml
      input_mapping:
        bosh-src: bosh-src-out
      output_mapping:
        bosh-src: bosh-src-out
      params:
        GIT_USER_NAME: CI Bot
        GIT_USER_EMAIL: cf-bosh-eng@pivotal.io
        PRIVATE_YML: |
          blobstore:
            options:
              credentials_source: static
              json_key: '((bosh_release_blobs_gcp_credentials_json))'
    - put: bosh-src
      params:
        repository: bosh-src-out
        rebase: true

resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource

- name: gcs-resource
  type: docker-image
  source:
    repository: frodenas/gcs-resource

- name: pivnet
  type: docker-image
  check_every: 168h
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final
    username: ((docker.username))
    password: ((docker.password))

- name: http-resource
  type: docker-image
  source:
    repository: aequitas/http-resource

- name: semver
  type: docker-image
  source:
    repository: concourse/semver-resource
    tag: "1.6"


resources:
  - name: mariadb-connector-c-resource
    type: http-resource
    source:
      index: "https://mariadb.org/connector-c/all-releases/"
      regex: 'href="https://mariadb\.org/download/\?tab=connector&#038;prod=connector-c&#038;rel=(?P<version>\d+\.\d+.\d)[^"]*">\d+\.\d+\.\d+</a></td><td>\d{4}-\d{2}-\d{2}</td><td>Stable'
      uri: "https://ftp.osuosl.org/pub/mariadb/connector-c-{version}/mariadb-connector-c-{version}-src.tar.gz"

  - name: postgres-10-src
    type: http-resource
    source:
      index: "https://ftp.postgresql.org/pub/source/"
      regex: 'href="v(?P<version>10\.[0-9.]+)/"'
      uri: "https://ftp.postgresql.org/pub/source/v{version}/postgresql-{version}.tar.gz"

  - name: postgres-13-src
    type: http-resource
    source:
      index: "https://ftp.postgresql.org/pub/source/"
      regex: 'href="v(?P<version>13\.[0-9.]+)/"'
      uri: "https://ftp.postgresql.org/pub/source/v{version}/postgresql-{version}.tar.gz"

  - name: postgres-15-src
    type: http-resource
    source:
      index: "https://ftp.postgresql.org/pub/source/"
      regex: 'href="v(?P<version>15\.[0-9.]+)/"'
      uri: "https://ftp.postgresql.org/pub/source/v{version}/postgresql-{version}.tar.gz"


  - name: bosh-blobstore-dav
    type: s3
    source:
      regexp: davcli-(.*)-linux-amd64
      bucket: bosh-davcli-artifacts

  - name: bosh-blobstore-gcs
    type: s3
    source:
      regexp: bosh-gcscli-(.*)-linux-amd64
      bucket: bosh-gcscli-artifacts

  - name: bosh-blobstore-s3
    type: s3
    source:
      regexp: s3cli-(.*)-linux-amd64
      bucket: bosh-s3cli-artifacts

  - name: bosh-blobstore-azure-storage
    type: s3
    source:
      regexp: azure-storage-cli-(.*)-linux-amd64
      bucket: bosh-azure-storage-cli-artifacts

  - name: verify-multidigest-cli
    type: s3
    source:
      regexp: verify-multidigest-(.*)-linux-amd64
      bucket: verify-multidigest
      region_name: us-east-1
      access_key_id: ((bosh-verify-multidigest-upload_assume_aws_access_key.username))
      secret_access_key: ((bosh-verify-multidigest-upload_assume_aws_access_key.password))
      aws_role_arn: ((bosh-verify-multidigest-upload_assume_aws_access_key.role_arn))

  - name: nats-server-github-release
    type: github-release
    source:
      owner: nats-io
      repository: nats-server
      access_token: ((github_public_repo_token))

  - name: weekly
    type: time
    source:
      start: 3:00 -0700
      stop: 4:30 -0700
      days: [ Saturday ]

  - name: bosh-src
    type: git
    source:
      uri: git@github.com:cloudfoundry/bosh.git
      branch: ((branch_name))
      private_key: ((github_deploy_key_bosh.private_key))

  - name: bosh-src-dockerfiles
    type: git
    source:
      uri: https://github.com/cloudfoundry/bosh.git
      paths:
        - "ci/dockerfiles"

  - name: bosh-github-release
    type: github-release
    source:
      owner: cloudfoundry
      repository: bosh
      access_token: ((github_public_repo_token))

  - name: version
    type: semver
    source:
      bucket: bosh-candidate-release-tarballs
      key: version
      access_key_id: ((bosh_candidate_release_tarballs_assume_aws_access_key.username))
      secret_access_key: ((bosh_candidate_release_tarballs_assume_aws_access_key.password))
      assume_role_arn: ((bosh_candidate_release_tarballs_assume_aws_access_key.role_arn))

  - name: bosh-candidate-release-tarballs
    type: s3
    source:
      bucket: bosh-candidate-release-tarballs
      access_key_id: ((bosh_candidate_release_tarballs_assume_aws_access_key.username))
      secret_access_key: ((bosh_candidate_release_tarballs_assume_aws_access_key.password))
      aws_role_arn: ((bosh_candidate_release_tarballs_assume_aws_access_key.role_arn))
      versioned_file: "bosh-dev-release.tgz"

  - name: bosh-compiled-candidate-jammy
    type: s3
    source:
      bucket: "bosh-compiled-candidate-tarballs"
      access_key_id: ((bosh-compiled-releases_assume_aws_access_key.username))
      secret_access_key: ((bosh-compiled-releases_assume_aws_access_key.password))
      aws_role_arn: ((bosh-compiled-releases_assume_aws_access_key.role_arn))
      regexp: "bosh-.*dev\\.(\\d+).*jammy.*.tgz"

  - name: bosh-disaster-recovery-acceptance-tests
    type: git
    source:
      uri: https://github.com/cloudfoundry-incubator/bosh-disaster-recovery-acceptance-tests.git
      branch: master

  - name: bbr-cli-binary
    type: github-release
    source:
      owner: cloudfoundry-incubator
      repository: bosh-backup-and-restore
      access_token: ((github_public_repo_token))

  - name: integration-tests-parallel-runtime
    type: s3
    source:
      bucket: integration-tests-parallel-runtime-logs
      access_key_id: ((bosh_integration_tests_parallel_assume_aws_access_key.username))
      secret_access_key: ((bosh_integration_tests_parallel_assume_aws_access_key.password))
      aws_role_arn: ((bosh_integration_tests_parallel_assume_aws_access_key.role_arn))
      versioned_file: "parallel_runtime_rspec.log"

  - name: brats-terraform
    type: terraform
    source:
      backend_type: s3
      backend_config:
        bucket: bosh-ci-terraform
        key: brats-ci/terraform.tfstate
        region: us-west-1
        access_key: ((bosh-ci-terraform_assume_aws_access_key.username))
        secret_key: ((bosh-ci-terraform_assume_aws_access_key.password))
        role_arn: ((bosh-ci-terraform_assume_aws_access_key.role_arn))

  - name: zookeeper-release
    type: git
    source:
      uri: https://github.com/cppforlife/zookeeper-release
      branch: master

  - name: bosh-main
    type: git
    source:
      uri: git@github.com:cloudfoundry/bosh.git
      branch: main
      private_key: ((github_deploy_key_bosh.private_key))

  - name: bosh-cli
    type: s3
    source:
      regexp: alpha-bosh-cli-(.*)-linux-amd64
      bucket: bosh-cli-alpha-artifacts
      region_name: us-east-1

  - name: bosh-dns-release
    type: bosh-io-release
    source:
      repository: cloudfoundry/bosh-dns-release

  #
  # BATS
  #

  - name: bats
    type: git
    source:
      uri: https://github.com/cloudfoundry/bosh-acceptance-tests.git
      branch: master

  - name: bosh-deployment
    type: git
    source:
      uri: https://github.com/cloudfoundry/bosh-deployment
      branch: master

  - name: cf-deployment
    type: git
    source:
      uri: https://github.com/cloudfoundry/cf-deployment

  - name: nimbus-environment
    source:
      branch: master
      pool: nimbus
      private_key: ((github_deploy_key_bats-concourse-pool.private_key))
      uri: git@github.com:pivotal-cf-experimental/bats-concourse-pool.git
    type: pool

  - name: vsphere-esxi-ubuntu-jammy
    type: bosh-io-stemcell
    source:
      name: bosh-vsphere-esxi-ubuntu-jammy-go_agent

  - name: google-kvm-ubuntu-jammy
    type: bosh-io-stemcell
    source:
      name: bosh-google-kvm-ubuntu-jammy-go_agent

  - name: vsphere-esxi-ubuntu-xenial
    type: pivnet
    source:
      api_token: ((pivnet_linux_stemcell_api_token))
      product_slug: stemcells-ubuntu-xenial

  - name: aws-xen-hvm-ubuntu-jammy
    type: bosh-io-stemcell
    source:
      name: bosh-aws-xen-hvm-ubuntu-jammy-go_agent

  - name: warden-ubuntu-jammy
    type: bosh-io-stemcell
    source:
      name: bosh-warden-boshlite-ubuntu-jammy-go_agent

  - name: cpi-release
    type: bosh-io-release
    source:
      repository: cloudfoundry/bosh-vsphere-cpi-release

  - name: bosh-agent
    type: git
    source:
      uri: https://github.com/cloudfoundry/bosh-agent
      branch: main

  - name: nginx-release
    type: git
    source:
      branch: main
      uri: https://github.com/cloudfoundry/bosh-package-nginx-release.git

  - name: ruby-release
    type: git
    source:
      uri: https://github.com/cloudfoundry/bosh-package-ruby-release.git
      branch: main

  - name: integration-image
    type: docker-image
    source:
      repository: bosh/integration
      tag: ((branch_name))
      username: ((docker.username))
      password: ((docker.password))

  - name: integration-mysql-5-7-image
    type: docker-image
    source:
      repository: bosh/main-mysql-5.7
      tag: ((branch_name))
      username: ((docker.username))
      password: ((docker.password))

  - name: integration-postgres-10-image
    type: docker-image
    source:
      repository: bosh/main-postgres-10
      tag: ((branch_name))
      username: ((docker.username))
      password: ((docker.password))

  - name: integration-postgres-13-image
    type: docker-image
    source:
      repository: bosh/main-postgres-13
      tag: ((branch_name))
      username: ((docker.username))
      password: ((docker.password))

  - name: integration-postgres-15-image
    type: docker-image
    source:
      repository: bosh/main-postgres-15
      tag: ((branch_name))
      username: ((docker.username))
      password: ((docker.password))

  - name: docker-cpi-image
    type: docker-image
    source:
      repository: bosh/docker-cpi
      tag: ((branch_name))
      username: ((docker.username))
      password: ((docker.password))

  - name: ubuntu-docker-image
    type: registry-image
    source:
      repository: ubuntu
      tag: latest
      username: ((docker.username))
      password: ((docker.password))

  - name: golang-docker-image
    type: registry-image
    source:
      repository: golang
      tag: latest
      username: ((docker.username))
      password: ((docker.password))

  - name: warden-cpi-docker-image
    type: docker-image
    source:
      repository: bosh/warden-cpi
      username: ((docker.username))
      password: ((docker.password))

  - name: terraform
    type: terraform
    source:
      backend_type: s3
      backend_config:
        access_key: ((bats_dev_aws_access_key.username))
        secret_key: ((bats_dev_aws_access_key.password))
        role_arn:   ((bats_dev_aws_access_key.role_arn))
        bucket:     bosh-bats-terraform
        key:        terraform-state
        region:     us-west-1
      vars:
        access_key: ((bats_dev_aws_access_key.username))
        secret_key: ((bats_dev_aws_access_key.password))
        role_arn:   ((bats_dev_aws_access_key.role_arn))
        region:     us-east-1
        ssh_public_key: ((terraform_aws_keypair.public_key))

  - name: last-released-bosh-release
    type: bosh-io-release
    source:
      repository: cloudfoundry/bosh
      tarball: true

  - name: release-notes
    type: gcs-resource
    source:
      bucket: bosh-ci-release-notes
      json_key: ((gcp_credentials_json))
      versioned_file: bosh-director/release-notes.md
      initial_content_text: ""
