---
groups:
  - name: bosh
    jobs:
      - gate
      - bump-deps
      - bump-golang-deps
      - bump-packages
      - unit-common
      - unit-dev
      - unit-monitor
      - unit-nats-sync
      - unit-template
      - unit-release
      - unit-director-sqlite
      - unit-director-mysql-8
      - unit-director-postgres-10
      - unit-director-postgres-13
      - unit-director-postgres-15
      - run-bundle-audit
      - integration-postgres
      - integration-postgres-hotswap
      - integration-mysql
      - candidate-release
      - compile-bosh-dev-release-jammy
      - bats-ubuntu-jammy
      - bats-ubuntu-jammy-fips
      - brats-ubuntu-jammy
      - brats-performance
      - bosh-disaster-recovery-acceptance-tests
      - upgrade
      - delivery

  - name: cut-release
    jobs:
      - automatically-release-new-patch
      - bump-major
      - bump-minor
      - bump-patch
      - finalize-release
      - clear-release-notes

  - name: docker
    jobs:
    - build-main-postgres-10
    - build-main-postgres-13
    - build-main-postgres-15
    - build-main-mysql-8-0
    - build-integration
    - build-docker-cpi
    - build-warden-cpi

jobs:
  - name: gate
    serial_groups:
      - integration-mysql
      - integration-postgres
      - integration-postgres-hotswap
      - unit-common
      - unit-dev
      - unit-monitor
      - unit-nats-sync
      - unit-template
      - unit-release
      - unit-director-sqlite
      - unit-director-mysql-8
      - unit-director-postgres-10
      - unit-director-postgres-13
      - unit-director-postgres-15
      - run-bundle-audit
    plan:
    - get: bosh-src
      trigger: true

  - name: unit-common
    public: true
    serial: true
    serial_groups: [unit-common]
    build_logs_to_retain: 250
    plan:
    - get: bosh-src
      trigger: true
      passed: [gate]
    - get: integration-image
    - task: test-rake-task
      timeout: 2h
      file: bosh-src/ci/tasks/test-rake-task.yml
      image: integration-image
      params:
        RAKE_TASK: spec:unit:common

  - name: unit-dev
    public: true
    serial: true
    serial_groups: [unit-dev]
    build_logs_to_retain: 250
    plan:
    - get: bosh-src
      trigger: true
      passed: [gate]
    - get: integration-image
    - task: test-rake-task
      timeout: 2h
      file: bosh-src/ci/tasks/test-rake-task.yml
      image: integration-image
      params:
        RAKE_TASK: spec:unit:dev

  - name: unit-monitor
    public: true
    serial: true
    serial_groups: [unit-monitor]
    build_logs_to_retain: 250
    plan:
    - get: bosh-src
      trigger: true
      passed: [gate]
    - get: integration-image
    - task: test-rake-task
      timeout: 2h
      file: bosh-src/ci/tasks/test-rake-task.yml
      image: integration-image
      params:
        RAKE_TASK: spec:unit:monitor

  - name: unit-nats-sync
    public: true
    serial: true
    serial_groups: [unit-nats-sync]
    build_logs_to_retain: 250
    plan:
    - get: bosh-src
      trigger: true
      passed: [gate]
    - get: integration-image
    - task: test-rake-task
      timeout: 2h
      file: bosh-src/ci/tasks/test-rake-task.yml
      image: integration-image
      params:
        RAKE_TASK: spec:unit:nats-sync

  - name: unit-template
    public: true
    serial: true
    serial_groups: [unit-template]
    build_logs_to_retain: 250
    plan:
    - get: bosh-src
      trigger: true
      passed: [gate]
    - get: integration-image
    - task: test-rake-task
      timeout: 2h
      file: bosh-src/ci/tasks/test-rake-task.yml
      image: integration-image
      params:
        RAKE_TASK: spec:unit:template

  - name: unit-release
    public: true
    serial: true
    serial_groups: [unit-release]
    build_logs_to_retain: 250
    plan:
    - get: bosh-src
      trigger: true
      passed: [gate]
    - get: integration-image
    - task: test-rake-task
      timeout: 2h
      file: bosh-src/ci/tasks/test-rake-task.yml
      image: integration-image
      params:
        RAKE_TASK: spec:unit:release

  - name: unit-director-sqlite
    public: true
    serial: true
    serial_groups: [unit-director-sqlite]
    build_logs_to_retain: 250
    plan:
    - get: bosh-src
      trigger: true
      passed: [gate]
    - get: integration-image
    - task: test-rake-task
      timeout: 2h
      file: bosh-src/ci/tasks/test-rake-task.yml
      image: integration-image
      params:
        RAKE_TASK: spec:unit:director

  - name: unit-director-mysql-8
    public: true
    serial: true
    serial_groups: [unit-director-mysql-8]
    build_logs_to_retain: 250
    plan:
    - in_parallel:
      - get: bosh-src
        passed: [gate]
        trigger: true
      - get: integration-mysql-8-0-image
    - task: test-rake-task
      timeout: 2h
      privileged: true
      file: bosh-src/ci/tasks/test-rake-task.yml
      image: integration-mysql-8-0-image
      params:
        DB: mysql
        RAKE_TASK: spec:unit:director

  - name: unit-director-postgres-10
    public: true
    serial: true
    serial_groups: [unit-director-postgres-10]
    build_logs_to_retain: 250
    plan:
    - in_parallel:
      - get: bosh-src
        passed: [gate]
        trigger: true
      - get: integration-postgres-10-image
    - task: test-rake-task
      timeout: 2h
      privileged: true
      file: bosh-src/ci/tasks/test-rake-task.yml
      image: integration-postgres-10-image
      params:
        DB: postgresql
        RAKE_TASK: spec:unit:director

  - name: unit-director-postgres-13
    public: true
    serial: true
    serial_groups: [unit-director-postgres-13]
    build_logs_to_retain: 250
    plan:
    - in_parallel:
      - get: bosh-src
        passed: [gate]
        trigger: true
      - get: integration-postgres-13-image
    - task: test-rake-task
      timeout: 2h
      privileged: true
      file: bosh-src/ci/tasks/test-rake-task.yml
      image: integration-postgres-13-image
      params:
        DB: postgresql
        RAKE_TASK: spec:unit:director

  - name: unit-director-postgres-15
    public: true
    serial: true
    serial_groups: [unit-director-postgres-15]
    build_logs_to_retain: 250
    plan:
    - in_parallel:
      - get: bosh-src
        passed: [gate]
        trigger: true
      - get: integration-postgres-15-image
    - task: test-rake-task
      timeout: 2h
      privileged: true
      file: bosh-src/ci/tasks/test-rake-task.yml
      image: integration-postgres-15-image
      params:
        DB: postgresql
        RAKE_TASK: spec:unit:director

  - name: run-bundle-audit
    public: true
    serial: true
    serial_groups: [run-bundle-audit]
    build_logs_to_retain: 250
    plan:
      - get: bosh-src
        trigger: true
        passed: [gate]
      - task: test-bundle-audit
        config:
          inputs:
            - name: bosh-src
          platform: linux
          image_resource:
            type: docker-image
            source:
              tag: ((branch_name))
              repository: bosh/integration
          run:
            path: /bin/sh
            args:
              - -exc
              - |
                set -eux;
                cd bosh-src/src;
                gem install bundler:"$(grep -A 1 'BUNDLED WITH' Gemfile.lock | tail -n 1 | awk '{$1=$1};1')";
                bundle install;
                bundle exec bundle-audit update;
                bundle exec bundle-audit check --ignore 'CVE-2019-17383';

  - name: integration-postgres
    public: true
    serial: true
    serial_groups: [integration-postgres]
    build_logs_to_retain: 250
    plan:
      - in_parallel:
        - get: bosh-src
          trigger: true
          passed: [gate]
        - get: bosh-cli
          trigger: true
          params:
            globs:
              - "bosh-cli-*-linux-amd64"
        - get: bosh-agent
        - get: integration-postgres-15-image
      - task: tests
        privileged: true
        file: bosh-src/ci/tasks/test-integration.yml
        image: integration-postgres-15-image
        params:
          DB: postgresql
          DB_VERSION: 15

  - name: integration-postgres-hotswap
    public: true
    serial: true
    serial_groups: [integration-postgres-hotswap]
    build_logs_to_retain: 250
    plan:
      - in_parallel:
        - get: bosh-src
          trigger: true
          passed: [gate]
        - get: bosh-cli
          trigger: true
          params:
            globs:
              - "bosh-cli-*-linux-amd64"
        - get: bosh-agent
        - get: integration-postgres-15-image
      - task: tests
        privileged: true
        file: bosh-src/ci/tasks/test-integration.yml
        image: integration-postgres-15-image
        params:
          DB: postgresql
          DB_VERSION: 15
          DEFAULT_UPDATE_VM_STRATEGY: create-swap-delete

  - name: integration-mysql
    public: true
    serial: true
    serial_groups: [integration-mysql]
    build_logs_to_retain: 250
    plan:
      - in_parallel:
        - get: bosh-src
          passed: [gate]
          trigger: true
        - get: bosh-cli
          trigger: true
          params:
            globs:
              - "bosh-cli-*-linux-amd64"
        - get: bosh-agent
        - get: integration-mysql-8-0-image
      - task: tests
        privileged: true
        file: bosh-src/ci/tasks/test-integration.yml
        image: integration-mysql-8-0-image
        params:
          DB: mysql

  - name: candidate-release
    plan:
    - get: bosh-src
      trigger: true
      passed:
      - unit-common
      - unit-dev
      - unit-monitor
      - unit-nats-sync
      - unit-template
      - unit-release
      - unit-director-sqlite
      - unit-director-mysql-8
      - unit-director-postgres-10
      - unit-director-postgres-13
      - unit-director-postgres-15
      - integration-mysql
      - integration-postgres
      - integration-postgres-hotswap
      - run-bundle-audit
    - get: bosh-cli
      params:
        globs:
          - "bosh-cli-*-linux-amd64"
    - get: integration-image
    - task: make
      file: bosh-src/ci/tasks/make-candidate.yml
      image: integration-image
    - put: bosh-candidate-release-tarballs
      params:
        file: "release/bosh-dev-release.tgz"


  - name: compile-bosh-dev-release-jammy
    plan:
    - in_parallel:
      - get: bosh-src
        passed: [candidate-release]
      - get: release
        resource: bosh-candidate-release-tarballs
        passed: [candidate-release]
        trigger: true
      - get: stemcell
        resource: warden-ubuntu-jammy
        trigger: true
      - get: docker-cpi-image
    - task: export-release
      image: docker-cpi-image
      file: bosh-src/ci/tasks/export-release.yml
      privileged: true
    - put: bosh-compiled-candidate-jammy
      params:
        file: "compiled-release/*.tgz"

  - name: bats-ubuntu-jammy
    serial: true
    plan:
    - do:
      - in_parallel:
        - get: bosh-candidate-release-tarballs
          passed: [compile-bosh-dev-release-jammy]
        - get: bosh-release
          resource: bosh-compiled-candidate-jammy
          trigger: true
          passed: [compile-bosh-dev-release-jammy]
        - get: stemcell
          resource: gcp-ubuntu-jammy
        - get: bosh-cli
          params:
            globs:
              - "bosh-cli-*-linux-amd64"
        - get: bats
        - get: bosh-deployment
        - get: bosh-src
          passed: [compile-bosh-dev-release-jammy]
        - get: integration-image
      - put: terraform
        resource: gcp-terraform
        params:
          env_name: bats-ubuntu-jammy
          terraform_source: bosh-src/ci/bats/iaas/gcp/terraform
          vars:
            name: bats-ubuntu-jammy
      - do:
        - task: deploy-director
          file: bosh-src/ci/bats/tasks/deploy-director.yml
          image: integration-image
          input_mapping:
            environment: terraform
          params:
            BAT_INFRASTRUCTURE: gcp
            GCP_JSON_KEY: ((gcp_json_key))
            DEPLOY_ARGS: |-
              -o bosh-deployment/external-ip-not-recommended.yml
        - task: prepare-bats-config
          file: bosh-src/ci/bats/iaas/gcp/prepare-bats-config.yml
          image: integration-image
          params:
            STEMCELL_NAME: bosh-google-kvm-ubuntu-jammy-go_agent
        - task: run-bats
          file: bats/ci/tasks/run-bats.yml
          image: integration-image
      ensure:
        do:
        - task: teardown
          file: bosh-src/ci/bats/tasks/destroy-director.yml
          image: integration-image
        - put: terraform
          resource: gcp-terraform
          no_get: true
          params:
            action: destroy
            env_name: bats-ubuntu-jammy
            terraform_source: bosh-src/ci/bats/iaas/gcp/terraform
            vars:
              name: bats-ubuntu-jammy

  - name: bats-ubuntu-jammy-fips
    serial: true
    plan:
    - do:
      - in_parallel:
        - get: bosh-candidate-release-tarballs
          passed: [compile-bosh-dev-release-jammy]
        - get: bosh-release
          resource: bosh-compiled-candidate-jammy
          trigger: true
          passed: [compile-bosh-dev-release-jammy]
        - get: stemcell
          resource: gcp-ubuntu-jammy-fips
        - get: bosh-cli
          params:
            globs:
              - "bosh-cli-*-linux-amd64"
        - get: bats
        - get: bosh-deployment
        - get: bosh-src
          passed: [compile-bosh-dev-release-jammy]
        - get: integration-image
      - put: terraform
        resource: gcp-terraform
        params:
          env_name: bats-ubuntu-jammy-fips
          terraform_source: bosh-src/ci/bats/iaas/gcp/terraform
          vars:
            name: bats-ubuntu-jammy-fips
      - do:
        - task: deploy-director
          file: bosh-src/ci/bats/tasks/deploy-director.yml
          image: integration-image
          input_mapping:
            environment: terraform
          params:
            BAT_INFRASTRUCTURE: gcp
            GCP_JSON_KEY: ((gcp_json_key))
            DEPLOY_ARGS: |-
              -o bosh-deployment/external-ip-not-recommended.yml
              -o bosh-src/ci/bats/ops/use-custom-stemcell.yml
        - task: prepare-bats-config
          file: bosh-src/ci/bats/iaas/gcp/prepare-bats-config.yml
          image: integration-image
          params:
            STEMCELL_NAME: bosh-google-kvm-ubuntu-jammy-fips-go_agent
        - task: run-bats
          file: bats/ci/tasks/run-bats.yml
          image: integration-image
      ensure:
        do:
        - task: teardown
          file: bosh-src/ci/bats/tasks/destroy-director.yml
          image: integration-image
        - put: terraform
          resource: gcp-terraform
          no_get: true
          params:
            action: destroy
            env_name: bats-ubuntu-jammy-fips
            terraform_source: bosh-src/ci/bats/iaas/gcp/terraform
            vars:
              name: bats-ubuntu-jammy-fips

  - name: brats-ubuntu-jammy
    serial: true
    plan:
    - in_parallel:
      - get: bosh-src
        passed: [compile-bosh-dev-release-jammy]
      - get: bosh-dns-release
      - get: stemcell
        resource: warden-ubuntu-jammy
      - get: bosh-candidate-release-tarballs
        passed: [compile-bosh-dev-release-jammy]
      - get: bosh-release
        resource: bosh-compiled-candidate-jammy
        trigger: true
        passed: [compile-bosh-dev-release-jammy]
      - get: bosh-deployment
      - get: docker-cpi-image
      - get: integration-image
    - do:
      - put: brats-terraform
        params:
          env_name: brats-ubuntu-jammy-((branch_name))
          terraform_source: bosh-src/ci/brats
          vars: &brats-terraform-jammy-vars
            aws_access_key_id: ((brats_rds_terraform_aws_access_key.username))
            aws_secret_access_key: ((brats_rds_terraform_aws_access_key.password))
            database_name: brats
            database_username: ((brats_database_user.username))
            database_password: ((brats_database_user.password))
      - task: test-brats
        image: docker-cpi-image
        file: bosh-src/ci/tasks/test-brats.yml
        input_mapping:
          database-metadata: brats-terraform
        privileged: true
        params:
          RDS_MYSQL_EXTERNAL_DB_USER: ((brats_database_user.username))
          RDS_MYSQL_EXTERNAL_DB_PASSWORD: ((brats_database_user.password))
          RDS_MYSQL_EXTERNAL_DB_NAME: brats
          RDS_POSTGRES_EXTERNAL_DB_USER: ((brats_database_user.username))
          RDS_POSTGRES_EXTERNAL_DB_PASSWORD: ((brats_database_user.password))
          RDS_POSTGRES_EXTERNAL_DB_NAME: brats
          GCP_MYSQL_EXTERNAL_DB_USER: ((brats_database_user.username))
          GCP_MYSQL_EXTERNAL_DB_PASSWORD: ((brats_database_user.password))
          GCP_MYSQL_EXTERNAL_DB_NAME: brats
          GCP_POSTGRES_EXTERNAL_DB_USER: ((brats_database_user.username))
          GCP_POSTGRES_EXTERNAL_DB_PASSWORD: ((brats_database_user.password))
          GCP_POSTGRES_EXTERNAL_DB_NAME: brats
          STEMCELL_OS: ubuntu-jammy
      ensure:
        put: brats-terraform
        no_get: true
        params:
          env_name: brats-ubuntu-jammy-((branch_name))
          terraform_source: bosh-src/ci/brats
          vars: *brats-terraform-jammy-vars
          action: destroy

  - name: brats-performance
    serial: true
    plan:
    - in_parallel:
      - get: bosh-src
        passed: [compile-bosh-dev-release-jammy]
      - get: bosh-release
        resource: bosh-compiled-candidate-jammy
        trigger: true
      - get: cf-deployment
      - get: docker-cpi-image
      - get: stemcell
        resource: warden-ubuntu-jammy
        passed: [compile-bosh-dev-release-jammy]
    - do:
      - task: test-brats-performance
        image: docker-cpi-image
        file: bosh-src/ci/tasks/test-brats-performance.yml
        privileged: true

  - name: bosh-disaster-recovery-acceptance-tests
    plan:
    - in_parallel:
      - get: bosh-src
        passed: [compile-bosh-dev-release-jammy]
      - get: stemcell
        resource: warden-ubuntu-jammy
      - get: bosh-candidate-release-tarballs
        passed: [compile-bosh-dev-release-jammy]
      - get: bosh-release
        resource: bosh-compiled-candidate-jammy
        trigger: true
        passed: [compile-bosh-dev-release-jammy]
      - get: bosh-disaster-recovery-acceptance-tests
      - get: bosh-deployment
      - get: bbr-cli-binary
        params:
          globs: ["bbr*-linux-amd64"]
      - get: warden-cpi-docker-image
    - do:
      - task: test-bdrats
        image: warden-cpi-docker-image
        file: bosh-src/ci/tasks/test-bdrats.yml
        privileged: true

  - name: upgrade
    serial: true
    plan:
    - do:
      - in_parallel:
        - get: bosh-src
          passed: [compile-bosh-dev-release-jammy]
        - get: stemcell
          resource: gcp-ubuntu-jammy
        - get: bosh-deployment
        - get: bosh-cli
          params:
            globs:
              - "bosh-cli-*-linux-amd64"
        - get: bosh-release
          resource: bosh-compiled-candidate-jammy
          trigger: true
          passed: [compile-bosh-dev-release-jammy]
        - get: last-released-bosh-release
        - get: zookeeper-release
        - get: integration-image
      - put: terraform
        resource: gcp-terraform
        params:
          env_name: upgrade-ubuntu-jammy
          terraform_source: bosh-src/ci/bats/iaas/gcp/terraform
          vars:
            name: upgrade-ubuntu-jammy
    - do:
      - task: deploy-previous-version
        image: integration-image
        file: bosh-src/ci/bats/tasks/deploy-director.yml
        input_mapping:
          environment: terraform
          bosh-release: last-released-bosh-release
        params:
          BAT_INFRASTRUCTURE: gcp
          GCP_JSON_KEY: ((gcp_json_key))
          DEPLOY_ARGS: |-
            -o bosh-deployment/external-ip-not-recommended.yml
      - task: deploy-zookeeper
        image: integration-image
        file: bosh-src/ci/tasks/deploy-zookeeper.yml
        params:
          CPI: gcp
      - task: upgrade-to-current-version
        image: integration-image
        file: bosh-src/ci/bats/tasks/deploy-director.yml
        input_mapping:
          environment: terraform
        params:
          BAT_INFRASTRUCTURE: gcp
          GCP_JSON_KEY: ((gcp_json_key))
          DEPLOY_ARGS: |-
            -o bosh-deployment/external-ip-not-recommended.yml
      - task: sleep-180-seconds
        image: integration-image
        config:
          platform: linux
          run:
            path: /bin/sh
            args:
              - -exc
              - |
                sleep 180
      - task: recreate-zookeeper
        image: integration-image
        file: bosh-src/ci/tasks/deploy-zookeeper.yml
        params:
          CPI: gcp
      ensure:
        do:
        - task: teardown
          image: integration-image
          file: bosh-src/ci/bats/tasks/destroy-director.yml
        - put: terraform
          resource: gcp-terraform
          no_get: true
          params:
            action: destroy
            env_name: upgrade-ubuntu-jammy
            terraform_source: bosh-src/ci/bats/iaas/gcp/terraform
            vars:
              name: upgrade-ubuntu-jammy

  - name: delivery
    plan:
      - in_parallel:
        - get: bosh-src
          trigger: true
          passed:
          - bats-ubuntu-jammy
          - brats-ubuntu-jammy
          - bosh-disaster-recovery-acceptance-tests
          - upgrade

  - name: finalize-release
    serial: true
    plan:
      - in_parallel:
        - get: bosh-src
          passed: [delivery]
        - get: bosh-cli
          params:
            globs:
              - "bosh-cli-*-linux-amd64"
        - get: integration-image
        - get: version
          trigger: true
        - get: release-notes
      - task: prepare-release
        image: integration-image
        file: bosh-src/ci/tasks/prepare-release.yml
      - task: finalize-release
        image: integration-image
        file: bosh-src/ci/tasks/finalize-bosh-release.yml
        params:
          RELEASE_PRIVATE_YML: |
            blobstore:
              options:
                credentials_source: static
                json_key: '((bosh_release_blobs_gcp_credentials_json))'
      - put: bosh-src
        params:
          repository: bosh-src
          tag: release-metadata/tag-name
          annotate: release-metadata/annotate-msg
          merge: true
      - put: bosh-github-release
        params:
          name: release-metadata/tag-name
          tag: release-metadata/tag-name
          body: release-notes/release-notes.md
          commitish: bosh-src/.git/ref
          generate_release_notes: true

  - name: clear-release-notes
    plan:
    - get: version
      passed:
      - finalize-release
      trigger: true
    - task: clear-release-notes
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: alpine
        outputs:
        - name: release-notes
        run:
          path: sh
          args:
          - -exc
          - touch release-notes/release-notes.md
    - put: release-notes
      params:
        file: release-notes/release-notes.md

  - name: automatically-release-new-patch
    serial_groups:
    - version
    plan:
    - in_parallel:
      - get: bosh-src
        trigger: true
        passed:
        - delivery
      - get: current-version
        resource: version
      - get: patched-version
        resource: version
        params:
          bump: patch
    - try:
        task: check-for-updated-blobs
        file: bosh-src/ci/tasks/check-for-updated-blobs.yml
        input_mapping:
          version: current-version
        params:
          BLOBS:
          - nats-server
          - postgresql-10
          - postgresql-13
          - postgresql-15
        on_success:
          do:
          - put: release-notes
            params:
              file: release-notes/release-notes.md
          - put: version
            params:
              file: patched-version/version

  - name: bump-major
    serial: true
    plan:
    - get: version
      params:
        bump: major
    - put: version
      params:
        file: version/version

  - name: bump-minor
    serial: true
    plan:
    - get: version
      params:
        bump: minor
    - put: version
      params:
        file: version/version

  - name: bump-patch
    serial: true
    plan:
    - get: version
      params:
        bump: patch
    - put: version
      params:
        file: version/version

  - name: build-integration
    public: true
    serial: true
    plan:
    - get: weekly
      trigger: true
    - get: golang-docker-image
      trigger: true
    - get: ubuntu-docker-image
      trigger: true
    - get: bosh-src-dockerfiles
      trigger: true
    - get: bosh-src
    - get: bosh-deployment
      params:
        depth: 1
    - task: build-docker-args
      file: bosh-src-dockerfiles/ci/dockerfiles/integration/build-docker-args.yml
      params:
        GITHUB_ACCESS_TOKEN: ((github_public_repo_token))
    - put: integration-image
      inputs:
      - bosh-src-dockerfiles
      - docker-build-args
      params:
        build: .
        build_args_file: docker-build-args/docker-build-args.json
        dockerfile: bosh-src-dockerfiles/ci/dockerfiles/integration/Dockerfile
        tag_as_latest: true
      get_params:
        skip_download: true

  - name: build-main-postgres-10
    public: true
    serial: true
    plan:
      - get: bosh-src-dockerfiles
      - get: integration-image
        trigger: true
        passed: [build-integration]
      - put: integration-postgres-10-image
        params:
          tag_as_latest: true
          build: "bosh-src-dockerfiles/ci/dockerfiles/main-postgres"
          build_args:
            DB_VERSION: "10"
            BRANCH: ((branch_name))
        get_params:
          skip_download: true

  - name: build-main-postgres-13
    public: true
    serial: true
    plan:
      - get: bosh-src-dockerfiles
      - get: integration-image
        trigger: true
        passed: [build-integration]
      - put: integration-postgres-13-image
        params:
          tag_as_latest: true
          build: "bosh-src-dockerfiles/ci/dockerfiles/main-postgres"
          build_args:
            DB_VERSION: "13"
            BRANCH: ((branch_name))
        get_params:
          skip_download: true

  - name: build-main-postgres-15
    public: true
    serial: true
    plan:
      - get: bosh-src-dockerfiles
      - get: integration-image
        trigger: true
        passed: [build-integration]
      - put: integration-postgres-15-image
        params:
          tag_as_latest: true
          build: "bosh-src-dockerfiles/ci/dockerfiles/main-postgres"
          build_args:
            DB_VERSION: "15"
            BRANCH: ((branch_name))
        get_params:
          skip_download: true

  - name: build-main-mysql-8-0
    public: true
    serial: true
    plan:
      - get: bosh-src-dockerfiles
      - get: integration-image
        trigger: true
        passed: [build-integration]
      - put: integration-mysql-8-0-image
        params:
          tag_as_latest: true
          build: "bosh-src-dockerfiles/ci/dockerfiles/main-mysql"
          build_args:
            BRANCH: ((branch_name))
        get_params:
          skip_download: true

  - name: build-docker-cpi
    public: true
    serial: true
    plan:
      - in_parallel:
          - get: bosh-src
          - get: integration-image
            trigger: true
            passed: [build-integration]
          - get: bosh-src-dockerfiles
          - get: bosh-cli
            params:
              globs:
                - "bosh-cli-*-linux-amd64"
            trigger: true
          - get: bosh-deployment
            trigger: true
      - task: copy-dependencies
        file: bosh-src/ci/tasks/prepare-container-docker-cpi-build-context.yml
      - put: docker-cpi-image
        params:
          tag_as_latest: true
          build: docker-build-context
        get_params:
          skip_download: true

  - name: build-warden-cpi
    plan:
    - in_parallel:
      - get: bosh-src
      - get: integration-image
        trigger: true
        passed: [build-integration]
      - get: bosh-deployment
        trigger: true
      - get: ubuntu-docker-image
    - task: prepare-container-build-context
      file: bosh-src/ci/dockerfiles/warden-cpi/prepare-container-build-context.yml
      image: ubuntu-docker-image
    - put: warden-cpi-docker-image
      params:
        build: docker-build-context
        cache: true

  - name: bump-deps
    serial: true
    plan:
    - in_parallel:
      - get: bosh-src
      - get: ruby-release
      - get: weekly
        trigger: true
      - get: integration-image
    - task: bump-gems
      file: ruby-release/ci/tasks/shared/bump-gems.yml
      input_mapping:
        input-repo: bosh-src
      output_mapping:
        output-repo: bosh-src-out
      params:
        GEM_DIRS: src
        GIT_USER_NAME: CI Bot
        GIT_USER_EMAIL: cf-bosh-eng@pivotal.io
        PACKAGE: ruby-3.3
        VENDOR: true
        VENDOR_PATH: vendor/cache
    - task: test
      timeout: 2h
      file: bosh-src/ci/tasks/test-rake-task.yml
      image: integration-image
      input_mapping:
        bosh-src: bosh-src-out
      params:
        RAKE_TASK: spec:unit:parallel
    - put: bosh-src
      params:
        repository: bosh-src-out
        rebase: true

  - name: bump-golang-deps
    public: true
    plan:
    - get: weekly
      trigger: true
    - get: bosh-src
    - get: golang-release
    - get: integration-image
    - task: bump-deps
      file: golang-release/ci/tasks/shared/bump-deps.yml
      input_mapping:
        input_repo: bosh-src
      output_mapping:
        output_repo: bosh-src-out
      params:
        SOURCE_PATH: src/brats/
    - task: lint-brats
      input_mapping:
        bosh-src: bosh-src-out
      file: bosh-src/ci/tasks/lint-brats.yml
    - put: bosh-src
      params:
        repository: bosh-src-out

  - name: bump-packages
    serial: true
    plan:
    - in_parallel:
      - get: bosh-src
      - get: nginx-release
        trigger: true
      - get: mariadb-connector-c-resource
        trigger: true
      - get: postgres-10-src
        trigger: true
      - get: postgres-13-src
        trigger: true
      - get: postgres-15-src
        trigger: true
      - get: ruby-release
        trigger: true
      - get: bosh-blobstore-dav
        trigger: true
      - get: bosh-blobstore-gcs
        trigger: true
      - get: bosh-blobstore-s3
        trigger: true
      - get: bosh-blobstore-azure-storage
        trigger: true
      - get: verify-multidigest-cli
        trigger: true
      - get: nats-server-github-release
        trigger: true
        params:
          globs: [ nats-server-v*-linux-amd64.tar.gz ]
    - task: bump-nginx-packages
      file: nginx-release/ci/shared/bump-nginx-package.yml
      input_mapping:
        input_repo: bosh-src
      output_mapping:
        output_repo: bosh-src-out
      params:
        PACKAGES: [nginx]
        PRIVATE_YML: |
          blobstore:
            options:
              credentials_source: static
              json_key: '((bosh_release_blobs_gcp_credentials_json))'
    - task: bump-mariadb-connector
      file: bosh-src/ci/tasks/bump-mariadb-connector.yml
      input_mapping:
        bosh-src: bosh-src-out
      output_mapping:
        bosh-src: bosh-src-out
      params:
        GIT_USER_NAME: CI Bot
        GIT_USER_EMAIL: cf-bosh-eng@pivotal.io
        PRIVATE_YML: |
          blobstore:
            options:
              credentials_source: static
              json_key: '((bosh_release_blobs_gcp_credentials_json))'
    - task: bump-postgres-10-package
      file: bosh-src/ci/tasks/bump-postgres-packages.yml
      input_mapping:
        bosh-src: bosh-src-out
        postgres-src: postgres-10-src
      output_mapping:
        bosh-src: bosh-src-out
      params:
        MAJOR_VERSION: 10
        PRIVATE_YML: |
          blobstore:
            options:
              credentials_source: static
              json_key: '((bosh_release_blobs_gcp_credentials_json))'
    - task: bump-postgres-13-package
      file: bosh-src/ci/tasks/bump-postgres-packages.yml
      input_mapping:
        bosh-src: bosh-src-out
        postgres-src: postgres-13-src
      output_mapping:
        bosh-src: bosh-src-out
      params:
        MAJOR_VERSION: 13
        PRIVATE_YML: |
          blobstore:
            options:
              credentials_source: static
              json_key: '((bosh_release_blobs_gcp_credentials_json))'
    - task: bump-postgres-15-package
      file: bosh-src/ci/tasks/bump-postgres-packages.yml
      input_mapping:
        bosh-src: bosh-src-out
        postgres-src: postgres-15-src
      output_mapping:
        bosh-src: bosh-src-out
      params:
        MAJOR_VERSION: 15
        PRIVATE_YML: |
          blobstore:
            options:
              credentials_source: static
              json_key: '((bosh_release_blobs_gcp_credentials_json))'
    - task: bump-ruby-package
      file: ruby-release/ci/tasks/shared/bump-ruby-package.yml
      input_mapping:
        bosh-release: bosh-src-out
      output_mapping:
        bosh-release: bosh-src-out
      params:
        GIT_USER_NAME: CI Bot
        GIT_USER_EMAIL: cf-bosh-eng@pivotal.io
        PACKAGE: ruby-3.3
        PACKAGE_PREFIX: "director"
        PRIVATE_YML: |
          blobstore:
            options:
              credentials_source: static
              json_key: '((bosh_release_blobs_gcp_credentials_json))'
        RUBY_VERSION_PATH: src/.ruby-version
    - task: bump-bosh-blobstore-dav
      file: bosh-src/ci/tasks/bump-blobstore-cli.yml
      input_mapping:
        bosh-src: bosh-src-out
        bosh-blobstore-cli: bosh-blobstore-dav
      output_mapping:
        bosh-src: bosh-src-out
      params:
        BLOBSTORE_TYPE: dav
        GIT_USER_NAME: CI Bot
        GIT_USER_EMAIL: cf-bosh-eng@pivotal.io
        PRIVATE_YML: |
          blobstore:
            options:
              credentials_source: static
              json_key: '((bosh_release_blobs_gcp_credentials_json))'
    - task: bump-bosh-blobstore-gcs
      file: bosh-src/ci/tasks/bump-blobstore-cli.yml
      input_mapping:
        bosh-src: bosh-src-out
        bosh-blobstore-cli: bosh-blobstore-gcs
      output_mapping:
        bosh-src: bosh-src-out
      params:
        BLOBSTORE_TYPE: gcs
        GIT_USER_NAME: CI Bot
        GIT_USER_EMAIL: cf-bosh-eng@pivotal.io
        PRIVATE_YML: |
          blobstore:
            options:
              credentials_source: static
              json_key: '((bosh_release_blobs_gcp_credentials_json))'
    - task: bump-bosh-blobstore-s3
      file: bosh-src/ci/tasks/bump-blobstore-cli.yml
      input_mapping:
        bosh-src: bosh-src-out
        bosh-blobstore-cli: bosh-blobstore-s3
      output_mapping:
        bosh-src: bosh-src-out
      params:
        BLOBSTORE_TYPE: s3
        GIT_USER_NAME: CI Bot
        GIT_USER_EMAIL: cf-bosh-eng@pivotal.io
        PRIVATE_YML: |
          blobstore:
            options:
              credentials_source: static
              json_key: '((bosh_release_blobs_gcp_credentials_json))'
    - task: bump-bosh-blobstore-azure-storage
      file: bosh-src/ci/tasks/bump-blobstore-cli.yml
      input_mapping:
        bosh-src: bosh-src-out
        bosh-blobstore-cli: bosh-blobstore-azure-storage
      output_mapping:
        bosh-src: bosh-src-out
      params:
        BLOBSTORE_TYPE: azure-storage
        GIT_USER_NAME: CI Bot
        GIT_USER_EMAIL: cf-bosh-eng@pivotal.io
        PRIVATE_YML: |
          blobstore:
            options:
              credentials_source: static
              json_key: '((bosh_release_blobs_gcp_credentials_json))'
    - task: bump-verify-multidigest-cli
      file: bosh-src/ci/tasks/bump-verify-multidigest-cli.yml
      input_mapping:
        bosh-src: bosh-src-out
      output_mapping:
        bosh-src: bosh-src-out
      params:
        GIT_USER_NAME: CI Bot
        GIT_USER_EMAIL: cf-bosh-eng@pivotal.io
        PRIVATE_YML: |
          blobstore:
            options:
              credentials_source: static
              json_key: '((bosh_release_blobs_gcp_credentials_json))'
    - task: bump-nats-server
      file: bosh-src/ci/tasks/bump-nats-server.yml
      input_mapping:
        bosh-src: bosh-src-out
      output_mapping:
        bosh-src: bosh-src-out
      params:
        GIT_USER_NAME: CI Bot
        GIT_USER_EMAIL: cf-bosh-eng@pivotal.io
        PRIVATE_YML: |
          blobstore:
            options:
              credentials_source: static
              json_key: '((bosh_release_blobs_gcp_credentials_json))'
    - put: bosh-src
      params:
        repository: bosh-src-out
        rebase: true

resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource

- name: gcs-resource
  type: docker-image
  source:
    repository: frodenas/gcs-resource

- name: pivnet
  type: docker-image
  check_every: 168h
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final
    username: ((dockerhub_username))
    password: ((dockerhub_password))

- name: http-resource
  type: docker-image
  source:
    repository: aequitas/http-resource

- name: semver
  type: docker-image
  source:
    repository: concourse/semver-resource
    tag: "1.6"

- name: bosh-io-stemcell
  source:
    repository: foundationalinfrastructure/bosh-io-stemcell-resource
    tag: v1.2.1
  type: docker-image

resources:
  - name: mariadb-connector-c-resource
    type: http-resource
    source:
      index: "https://mariadb.org/connector-c/all-releases/"
      regex: '>(?P<version>3\.3.\d+)</a></td><td>\d{4}-\d{2}-\d{2}</td><td>Stable'
      uri: "https://ftp.osuosl.org/pub/mariadb/connector-c-{version}/mariadb-connector-c-{version}-src.tar.gz"

  - name: postgres-10-src
    type: http-resource
    source:
      index: "https://ftp.postgresql.org/pub/source/"
      regex: 'href="v(?P<version>10\.[0-9.]+)/"'
      uri: "https://ftp.postgresql.org/pub/source/v{version}/postgresql-{version}.tar.gz"

  - name: postgres-13-src
    type: http-resource
    source:
      index: "https://ftp.postgresql.org/pub/source/"
      regex: 'href="v(?P<version>13\.[0-9.]+)/"'
      uri: "https://ftp.postgresql.org/pub/source/v{version}/postgresql-{version}.tar.gz"

  - name: postgres-15-src
    type: http-resource
    source:
      index: "https://ftp.postgresql.org/pub/source/"
      regex: 'href="v(?P<version>15\.[0-9.]+)/"'
      uri: "https://ftp.postgresql.org/pub/source/v{version}/postgresql-{version}.tar.gz"


  - name: bosh-blobstore-dav
    type: s3
    source:
      regexp: davcli-(.*)-linux-amd64
      bucket: bosh-davcli-artifacts

  - name: bosh-blobstore-gcs
    type: s3
    source:
      regexp: bosh-gcscli-(.*)-linux-amd64
      bucket: bosh-gcscli-artifacts

  - name: bosh-blobstore-s3
    type: s3
    source:
      regexp: s3cli-(.*)-linux-amd64
      bucket: bosh-s3cli-artifacts

  - name: bosh-blobstore-azure-storage
    type: s3
    source:
      regexp: azure-storage-cli-(.*)-linux-amd64
      bucket: bosh-azure-storage-cli-artifacts

  - name: verify-multidigest-cli
    type: s3
    source:
      regexp: verify-multidigest-(.*)-linux-amd64
      bucket: verify-multidigest
      region_name: us-east-1
      access_key_id: ((bosh-verify-multidigest-upload_assume_aws_access_key.username))
      secret_access_key: ((bosh-verify-multidigest-upload_assume_aws_access_key.password))
      aws_role_arn: ((bosh-verify-multidigest-upload_assume_aws_access_key.role_arn))

  - name: nats-server-github-release
    type: github-release
    source:
      owner: nats-io
      repository: nats-server
      access_token: ((github_public_repo_token))

  - name: weekly
    type: time
    source:
      start: 3:00 -0700
      stop: 4:30 -0700
      days: [ Saturday ]

  - name: bosh-src
    type: git
    source:
      uri: git@github.com:cloudfoundry/bosh.git
      branch: ((branch_name))
      private_key: ((github_deploy_key_bosh.private_key))

  - name: bosh-src-dockerfiles
    type: git
    source:
      uri: https://github.com/cloudfoundry/bosh.git
      paths:
        - "ci/dockerfiles"

  - name: bosh-github-release
    type: github-release
    source:
      owner: cloudfoundry
      repository: bosh
      access_token: ((github_public_repo_token))

  - name: version
    type: semver
    source:
      bucket: bosh-director-oss-ci-candidate-release-tarballs
      json_key: ((bosh_director_oss_ci_service_account_json))
      driver: gcs
      key: version

  - name: bosh-candidate-release-tarballs
    type: gcs-resource
    source:
      bucket: bosh-director-oss-ci-candidate-release-tarballs
      json_key: ((bosh_director_oss_ci_service_account_json))
      versioned_file: "bosh-dev-release.tgz"

  - name: bosh-compiled-candidate-jammy
    type: gcs-resource
    source:
      bucket: bosh-director-oss-ci-compiled-candidate-jammy
      json_key: ((bosh_director_oss_ci_service_account_json))
      regexp: "bosh-.*dev\\.(\\d+).*jammy.*.tgz"

  - name: bosh-disaster-recovery-acceptance-tests
    type: git
    source:
      uri: https://github.com/cloudfoundry-incubator/bosh-disaster-recovery-acceptance-tests.git
      branch: master

  - name: bbr-cli-binary
    type: github-release
    source:
      owner: cloudfoundry-incubator
      repository: bosh-backup-and-restore
      access_token: ((github_public_repo_token))

  - name: gcp-terraform
    type: terraform
    source:
      backend_type: gcs
      backend_config:
        bucket: bosh-director-pipeline
        prefix: bats-terraform
        credentials: ((gcp_json_key))
      delete_on_failure: true
      vars:
        project_id: ((gcp_project_id))
        gcp_credentials_json: ((gcp_json_key))

  - name: brats-terraform
    type: terraform
    source:
      backend_type: gcs
      backend_config:
        bucket: bosh-director-pipeline
        prefix: brats-terraform
        credentials: ((gcp_json_key))
      delete_on_failure: true
      vars:
        project_id: ((gcp_project_id))
        gcp_credentials_json: ((gcp_json_key))

  - name: zookeeper-release
    type: git
    source:
      uri: https://github.com/cppforlife/zookeeper-release
      branch: master

  - name: bosh-cli
    type: github-release
    source:
      owner: cloudfoundry
      repository: bosh-cli
      access_token: ((github_public_repo_token))

  - name: bosh-dns-release
    type: bosh-io-release
    source:
      repository: cloudfoundry/bosh-dns-release

  #
  # BATS
  #

  - name: bats
    type: git
    source:
      uri: https://github.com/cloudfoundry/bosh-acceptance-tests.git
      branch: master

  - name: bosh-deployment
    type: git
    source:
      uri: https://github.com/cloudfoundry/bosh-deployment
      branch: master

  - name: cf-deployment
    type: git
    source:
      uri: https://github.com/cloudfoundry/cf-deployment

  - name: gcp-ubuntu-jammy
    type: bosh-io-stemcell
    source:
      name: bosh-google-kvm-ubuntu-jammy-go_agent

  - name: gcp-ubuntu-jammy-fips
    type: bosh-io-stemcell
    source:
      name: bosh-google-kvm-ubuntu-jammy-fips-go_agent
      auth:
        access_key: ((hmac_accesskey))
        secret_key: ((hmac_secret))

  - name: warden-ubuntu-jammy
    type: bosh-io-stemcell
    source:
      name: bosh-warden-boshlite-ubuntu-jammy-go_agent

  - name: bosh-agent
    type: git
    source:
      uri: https://github.com/cloudfoundry/bosh-agent
      branch: main

  - name: nginx-release
    type: git
    source:
      branch: main
      uri: https://github.com/cloudfoundry/bosh-package-nginx-release.git

  - name: golang-release
    type: git
    source:
      uri: https://github.com/cloudfoundry/bosh-package-golang-release.git
      branch: main

  - name: ruby-release
    type: git
    source:
      uri: https://github.com/cloudfoundry/bosh-package-ruby-release.git
      branch: main

  - name: integration-image
    type: docker-image
    source:
      repository: bosh/integration
      tag: ((branch_name))
      username: ((dockerhub_username))
      password: ((dockerhub_password))

  - name: integration-mysql-8-0-image
    type: docker-image
    source:
      repository: bosh/main-mysql-8.0
      tag: ((branch_name))
      username: ((dockerhub_username))
      password: ((dockerhub_password))

  - name: integration-postgres-10-image
    type: docker-image
    source:
      repository: bosh/main-postgres-10
      tag: ((branch_name))
      username: ((dockerhub_username))
      password: ((dockerhub_password))

  - name: integration-postgres-13-image
    type: docker-image
    source:
      repository: bosh/main-postgres-13
      tag: ((branch_name))
      username: ((dockerhub_username))
      password: ((dockerhub_password))

  - name: integration-postgres-15-image
    type: docker-image
    source:
      repository: bosh/main-postgres-15
      tag: ((branch_name))
      username: ((dockerhub_username))
      password: ((dockerhub_password))

  - name: docker-cpi-image
    type: docker-image
    source:
      repository: bosh/docker-cpi
      tag: ((branch_name))
      username: ((dockerhub_username))
      password: ((dockerhub_password))

  - name: ubuntu-docker-image
    type: registry-image
    source:
      repository: ubuntu
      tag: latest
      username: ((dockerhub_username))
      password: ((dockerhub_password))

  - name: golang-docker-image
    type: registry-image
    source:
      repository: golang
      tag: latest
      username: ((dockerhub_username))
      password: ((dockerhub_password))

  - name: warden-cpi-docker-image
    type: docker-image
    source:
      repository: bosh/warden-cpi
      username: ((dockerhub_username))
      password: ((dockerhub_password))

  - name: last-released-bosh-release
    type: bosh-io-release
    source:
      repository: cloudfoundry/bosh
      tarball: true

  - name: release-notes
    type: gcs-resource
    source:
      bucket: bosh-director-pipeline
      json_key: ((gcp_json_key))
      versioned_file: bosh-director/release-notes.md
      initial_version: "0"
      initial_content_text: ""
