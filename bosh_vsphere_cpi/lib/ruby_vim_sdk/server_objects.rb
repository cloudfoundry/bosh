# ******* WARNING - AUTO GENERATED CODE - DO NOT EDIT *******

module VimSdk
  module VmomiSupport

    add_version("vim.version.version1", "vim2", "2.0", true, "vim25")
    add_version("vim.version.version2", "vim25", "2.5", false, "vim25")
    add_version("vim.version.version3", "vim25", "2.5u2", true, "vim25")
    add_version("vim.version.version4", "vim25", "2.5u2server", false, "vim25")
    add_version("vim.version.version5", "vim25", "4.0", false, "vim25")
    add_version("vim.version.version6", "vim25", "4.1", false, "vim25")
    add_version("vim.version.version7", "vim25", "5.0", false, "vim25")
    add_version("vim.version.version8", "vim25", "5.1", false, "vim25")
    add_version("vim.version.version9", "vim25", "5.5", false, "vim25")
    add_version("vmodl.query.version.version1", "", "", false, "vim25")
    add_version("vmodl.query.version.version2", "", "", false, "vim25")
    add_version("vmodl.query.version.version3", "", "", false, "vim25")
    add_version("vmodl.query.version.version4", "", "", false, "vim25")
    add_version("vmodl.reflect.version.version1", "reflect", "1.0", false, "reflect")
    add_version("vmodl.version.version0", "", "", false, "vim25")
    add_version("vmodl.version.version1", "", "", false, "vim25")
    add_version("vmodl.version.version2", "", "", false, "vim25")
    add_version_parent("vim.version.version1", "vim.version.version1")
    add_version_parent("vim.version.version1", "vmodl.query.version.version1")
    add_version_parent("vim.version.version1", "vmodl.version.version0")
    add_version_parent("vim.version.version2", "vim.version.version1")
    add_version_parent("vim.version.version2", "vim.version.version2")
    add_version_parent("vim.version.version2", "vmodl.query.version.version1")
    add_version_parent("vim.version.version2", "vmodl.version.version0")
    add_version_parent("vim.version.version3", "vim.version.version1")
    add_version_parent("vim.version.version3", "vim.version.version2")
    add_version_parent("vim.version.version3", "vim.version.version3")
    add_version_parent("vim.version.version3", "vmodl.query.version.version1")
    add_version_parent("vim.version.version3", "vmodl.version.version0")
    add_version_parent("vim.version.version4", "vim.version.version1")
    add_version_parent("vim.version.version4", "vim.version.version2")
    add_version_parent("vim.version.version4", "vim.version.version3")
    add_version_parent("vim.version.version4", "vim.version.version4")
    add_version_parent("vim.version.version4", "vmodl.query.version.version1")
    add_version_parent("vim.version.version4", "vmodl.version.version0")
    add_version_parent("vim.version.version5", "vim.version.version1")
    add_version_parent("vim.version.version5", "vim.version.version2")
    add_version_parent("vim.version.version5", "vim.version.version3")
    add_version_parent("vim.version.version5", "vim.version.version4")
    add_version_parent("vim.version.version5", "vim.version.version5")
    add_version_parent("vim.version.version5", "vmodl.query.version.version1")
    add_version_parent("vim.version.version5", "vmodl.query.version.version2")
    add_version_parent("vim.version.version5", "vmodl.version.version0")
    add_version_parent("vim.version.version5", "vmodl.version.version1")
    add_version_parent("vim.version.version6", "vim.version.version1")
    add_version_parent("vim.version.version6", "vim.version.version2")
    add_version_parent("vim.version.version6", "vim.version.version3")
    add_version_parent("vim.version.version6", "vim.version.version4")
    add_version_parent("vim.version.version6", "vim.version.version5")
    add_version_parent("vim.version.version6", "vim.version.version6")
    add_version_parent("vim.version.version6", "vmodl.query.version.version1")
    add_version_parent("vim.version.version6", "vmodl.query.version.version2")
    add_version_parent("vim.version.version6", "vmodl.query.version.version3")
    add_version_parent("vim.version.version6", "vmodl.version.version0")
    add_version_parent("vim.version.version6", "vmodl.version.version1")
    add_version_parent("vim.version.version7", "vim.version.version1")
    add_version_parent("vim.version.version7", "vim.version.version2")
    add_version_parent("vim.version.version7", "vim.version.version3")
    add_version_parent("vim.version.version7", "vim.version.version4")
    add_version_parent("vim.version.version7", "vim.version.version5")
    add_version_parent("vim.version.version7", "vim.version.version6")
    add_version_parent("vim.version.version7", "vim.version.version7")
    add_version_parent("vim.version.version7", "vmodl.query.version.version1")
    add_version_parent("vim.version.version7", "vmodl.query.version.version2")
    add_version_parent("vim.version.version7", "vmodl.query.version.version3")
    add_version_parent("vim.version.version7", "vmodl.query.version.version4")
    add_version_parent("vim.version.version7", "vmodl.reflect.version.version1")
    add_version_parent("vim.version.version7", "vmodl.version.version0")
    add_version_parent("vim.version.version7", "vmodl.version.version1")
    add_version_parent("vim.version.version7", "vmodl.version.version2")
    add_version_parent("vim.version.version8", "vim.version.version1")
    add_version_parent("vim.version.version8", "vim.version.version2")
    add_version_parent("vim.version.version8", "vim.version.version3")
    add_version_parent("vim.version.version8", "vim.version.version4")
    add_version_parent("vim.version.version8", "vim.version.version5")
    add_version_parent("vim.version.version8", "vim.version.version6")
    add_version_parent("vim.version.version8", "vim.version.version7")
    add_version_parent("vim.version.version8", "vim.version.version8")
    add_version_parent("vim.version.version8", "vmodl.query.version.version1")
    add_version_parent("vim.version.version8", "vmodl.query.version.version2")
    add_version_parent("vim.version.version8", "vmodl.query.version.version3")
    add_version_parent("vim.version.version8", "vmodl.query.version.version4")
    add_version_parent("vim.version.version8", "vmodl.reflect.version.version1")
    add_version_parent("vim.version.version8", "vmodl.version.version0")
    add_version_parent("vim.version.version8", "vmodl.version.version1")
    add_version_parent("vim.version.version8", "vmodl.version.version2")
    add_version_parent("vim.version.version9", "vim.version.version1")
    add_version_parent("vim.version.version9", "vim.version.version2")
    add_version_parent("vim.version.version9", "vim.version.version3")
    add_version_parent("vim.version.version9", "vim.version.version4")
    add_version_parent("vim.version.version9", "vim.version.version5")
    add_version_parent("vim.version.version9", "vim.version.version6")
    add_version_parent("vim.version.version9", "vim.version.version7")
    add_version_parent("vim.version.version9", "vim.version.version8")
    add_version_parent("vim.version.version9", "vim.version.version9")
    add_version_parent("vim.version.version9", "vmodl.query.version.version1")
    add_version_parent("vim.version.version9", "vmodl.query.version.version2")
    add_version_parent("vim.version.version9", "vmodl.query.version.version3")
    add_version_parent("vim.version.version9", "vmodl.query.version.version4")
    add_version_parent("vim.version.version9", "vmodl.reflect.version.version1")
    add_version_parent("vim.version.version9", "vmodl.version.version0")
    add_version_parent("vim.version.version9", "vmodl.version.version1")
    add_version_parent("vim.version.version9", "vmodl.version.version2")
    add_version_parent("vmodl.query.version.version1", "vmodl.query.version.version1")
    add_version_parent("vmodl.query.version.version1", "vmodl.version.version0")
    add_version_parent("vmodl.query.version.version2", "vmodl.query.version.version1")
    add_version_parent("vmodl.query.version.version2", "vmodl.query.version.version2")
    add_version_parent("vmodl.query.version.version2", "vmodl.version.version0")
    add_version_parent("vmodl.query.version.version2", "vmodl.version.version1")
    add_version_parent("vmodl.query.version.version3", "vmodl.query.version.version1")
    add_version_parent("vmodl.query.version.version3", "vmodl.query.version.version2")
    add_version_parent("vmodl.query.version.version3", "vmodl.query.version.version3")
    add_version_parent("vmodl.query.version.version3", "vmodl.version.version0")
    add_version_parent("vmodl.query.version.version3", "vmodl.version.version1")
    add_version_parent("vmodl.query.version.version4", "vmodl.query.version.version1")
    add_version_parent("vmodl.query.version.version4", "vmodl.query.version.version2")
    add_version_parent("vmodl.query.version.version4", "vmodl.query.version.version3")
    add_version_parent("vmodl.query.version.version4", "vmodl.query.version.version4")
    add_version_parent("vmodl.query.version.version4", "vmodl.version.version0")
    add_version_parent("vmodl.query.version.version4", "vmodl.version.version1")
    add_version_parent("vmodl.query.version.version4", "vmodl.version.version2")
    add_version_parent("vmodl.reflect.version.version1", "vmodl.reflect.version.version1")
    add_version_parent("vmodl.reflect.version.version1", "vmodl.version.version0")
    add_version_parent("vmodl.reflect.version.version1", "vmodl.version.version1")
    add_version_parent("vmodl.reflect.version.version1", "vmodl.version.version2")
    add_version_parent("vmodl.version.version0", "vmodl.version.version0")
    add_version_parent("vmodl.version.version1", "vmodl.version.version0")
    add_version_parent("vmodl.version.version1", "vmodl.version.version1")
    add_version_parent("vmodl.version.version2", "vmodl.version.version0")
    add_version_parent("vmodl.version.version2", "vmodl.version.version1")
    add_version_parent("vmodl.version.version2", "vmodl.version.version2")
    create_data_type("vim.AboutInfo", "AboutInfo", "vmodl.DynamicData", "vim.version.version1", [["name", "string", "vim.version.version1"], ["fullName", "string", "vim.version.version1"], ["vendor", "string", "vim.version.version1"], ["version", "string", "vim.version.version1"], ["build", "string", "vim.version.version1"], ["localeVersion", "string", "vim.version.version1", {:optional => true}], ["localeBuild", "string", "vim.version.version1", {:optional => true}], ["osType", "string", "vim.version.version1"], ["productLineId", "string", "vim.version.version1"], ["apiType", "string", "vim.version.version1"], ["apiVersion", "string", "vim.version.version1"], ["instanceUuid", "string", "vim.version.version5", {:optional => true}], ["licenseProductName", "string", "vim.version.version5", {:optional => true}], ["licenseProductVersion", "string", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.AuthorizationDescription", "AuthorizationDescription", "vmodl.DynamicData", "vim.version.version1", [["privilege", "vim.ElementDescription[]", "vim.version.version1"], ["privilegeGroup", "vim.ElementDescription[]", "vim.version.version1"]])
    create_data_type("vim.Capability", "Capability", "vmodl.DynamicData", "vim.version.version1", [["provisioningSupported", "boolean", "vim.version.version1"], ["multiHostSupported", "boolean", "vim.version.version1"], ["userShellAccessSupported", "boolean", "vim.version.version2"], ["supportedEVCMode", "vim.EVCMode[]", "vim.version.version5", {:optional => true}], ["networkBackupAndRestoreSupported", "boolean", "vim.version.version8", {:optional => true}]])
    create_enum_type("vim.ConfigSpecOperation", "ConfigSpecOperation", "vim.version.version5", ["add", "edit", "remove"])
    create_managed_type("vim.CustomFieldsManager", "CustomFieldsManager", "vmodl.ManagedObject", "vim.version.version1", [["field", "vim.CustomFieldsManager.FieldDef[]", "vim.version.version1", {:optional => true}, "System.View"]], [["addFieldDefinition", "AddCustomFieldDef", "vim.version.version1", [["name", "string", "vim.version.version1", {}, nil], ["moType", "vmodl.TypeName", "vim.version.version2", {:optional => true}, nil], ["fieldDefPolicy", "vim.PrivilegePolicyDef", "vim.version.version2", {:optional => true}, nil], ["fieldPolicy", "vim.PrivilegePolicyDef", "vim.version.version2", {:optional => true}, nil]], [{}, "vim.CustomFieldsManager.FieldDef", "vim.CustomFieldsManager.FieldDef"], "Global.ManageCustomFields", ["vim.fault.DuplicateName", "vim.fault.InvalidPrivilege"]], ["removeFieldDefinition", "RemoveCustomFieldDef", "vim.version.version1", [["key", "int", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Global.ManageCustomFields", nil], ["renameFieldDefinition", "RenameCustomFieldDef", "vim.version.version1", [["key", "int", "vim.version.version1", {}, nil], ["name", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Global.ManageCustomFields", ["vim.fault.DuplicateName"]], ["setField", "SetField", "vim.version.version1", [["entity", "vim.ManagedEntity", "vim.version.version1", {}, "Global.SetCustomField"], ["key", "int", "vim.version.version1", {}, nil], ["value", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], nil, nil]])
    create_data_type("vim.CustomFieldsManager.FieldDef", "CustomFieldDef", "vmodl.DynamicData", "vim.version.version1", [["key", "int", "vim.version.version1"], ["name", "string", "vim.version.version1"], ["type", "vmodl.TypeName", "vim.version.version1"], ["managedObjectType", "vmodl.TypeName", "vim.version.version2", {:optional => true}], ["fieldDefPrivileges", "vim.PrivilegePolicyDef", "vim.version.version2", {:optional => true}], ["fieldInstancePrivileges", "vim.PrivilegePolicyDef", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.CustomFieldsManager.Value", "CustomFieldValue", "vmodl.DynamicData", "vim.version.version1", [["key", "int", "vim.version.version1"]])
    create_data_type("vim.CustomFieldsManager.StringValue", "CustomFieldStringValue", "vim.CustomFieldsManager.Value", "vim.version.version1", [["value", "string", "vim.version.version1"]])
    create_managed_type("vim.CustomizationSpecManager", "CustomizationSpecManager", "vmodl.ManagedObject", "vim.version.version1", [["info", "vim.CustomizationSpecInfo[]", "vim.version.version1", {:optional => true}, "VirtualMachine.Provisioning.ReadCustSpecs"], ["encryptionKey", "byte[]", "vim.version.version1", {:optional => true}, "System.View"]], [["exists", "DoesCustomizationSpecExist", "vim.version.version1", [["name", "string", "vim.version.version1", {}, nil]], [{}, "boolean", "boolean"], "VirtualMachine.Provisioning.ReadCustSpecs", nil], ["get", "GetCustomizationSpec", "vim.version.version1", [["name", "string", "vim.version.version1", {}, nil]], [{}, "vim.CustomizationSpecItem", "vim.CustomizationSpecItem"], "VirtualMachine.Provisioning.ReadCustSpecs", ["vim.fault.NotFound"]], ["create", "CreateCustomizationSpec", "vim.version.version1", [["item", "vim.CustomizationSpecItem", "vim.version.version1", {}, nil]], [{}, "void", "void"], "VirtualMachine.Provisioning.ModifyCustSpecs", ["vim.fault.CustomizationFault", "vim.fault.AlreadyExists"]], ["overwrite", "OverwriteCustomizationSpec", "vim.version.version1", [["item", "vim.CustomizationSpecItem", "vim.version.version1", {}, nil]], [{}, "void", "void"], "VirtualMachine.Provisioning.ModifyCustSpecs", ["vim.fault.CustomizationFault", "vim.fault.NotFound", "vim.fault.ConcurrentAccess"]], ["delete", "DeleteCustomizationSpec", "vim.version.version1", [["name", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], "VirtualMachine.Provisioning.ModifyCustSpecs", ["vim.fault.NotFound"]], ["duplicate", "DuplicateCustomizationSpec", "vim.version.version1", [["name", "string", "vim.version.version1", {}, nil], ["newName", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], "VirtualMachine.Provisioning.ModifyCustSpecs", ["vim.fault.NotFound", "vim.fault.AlreadyExists"]], ["rename", "RenameCustomizationSpec", "vim.version.version1", [["name", "string", "vim.version.version1", {}, nil], ["newName", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], "VirtualMachine.Provisioning.ModifyCustSpecs", ["vim.fault.NotFound", "vim.fault.AlreadyExists"]], ["specItemToXml", "CustomizationSpecItemToXml", "vim.version.version1", [["item", "vim.CustomizationSpecItem", "vim.version.version1", {}, nil]], [{}, "string", "string"], "System.View", nil], ["xmlToSpecItem", "XmlToCustomizationSpecItem", "vim.version.version1", [["specItemXml", "string", "vim.version.version1", {}, nil]], [{}, "vim.CustomizationSpecItem", "vim.CustomizationSpecItem"], "System.View", ["vim.fault.CustomizationFault"]], ["checkResources", "CheckCustomizationResources", "vim.version.version1", [["guestOs", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], "System.View", ["vim.fault.CustomizationFault"]]])
    create_data_type("vim.CustomizationSpecInfo", "CustomizationSpecInfo", "vmodl.DynamicData", "vim.version.version1", [["name", "string", "vim.version.version1"], ["description", "string", "vim.version.version1"], ["type", "string", "vim.version.version1"], ["changeVersion", "string", "vim.version.version1", {:optional => true}], ["lastUpdateTime", "vmodl.DateTime", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.CustomizationSpecItem", "CustomizationSpecItem", "vmodl.DynamicData", "vim.version.version1", [["info", "vim.CustomizationSpecInfo", "vim.version.version1"], ["spec", "vim.vm.customization.Specification", "vim.version.version1"]])
    create_managed_type("vim.DatastoreNamespaceManager", "DatastoreNamespaceManager", "vmodl.ManagedObject", "vim.version.version9", nil, [["CreateDirectory", "CreateDirectory", "vim.version.version9", [["datastore", "vim.Datastore", "vim.version.version9", {}, nil], ["displayName", "string", "vim.version.version9", {:optional => true}, nil], ["policy", "string", "vim.version.version9", {:optional => true}, nil]], [{}, "string", "string"], "Datastore.Config", ["vim.fault.CannotCreateFile", "vim.fault.FileAlreadyExists", "vim.fault.InvalidDatastore"]], ["DeleteDirectory", "DeleteDirectory", "vim.version.version9", [["datacenter", "vim.Datacenter", "vim.version.version9", {:optional => true}, "System.View"], ["datastorePath", "string", "vim.version.version9", {}, nil]], [{}, "void", "void"], "Datastore.Config", ["vim.fault.FileFault", "vim.fault.FileNotFound", "vim.fault.InvalidDatastore", "vim.fault.InvalidDatastorePath"]]])
    create_data_type("vim.Description", "Description", "vmodl.DynamicData", "vim.version.version1", [["label", "string", "vim.version.version1"], ["summary", "string", "vim.version.version1"]])
    create_managed_type("vim.DiagnosticManager", "DiagnosticManager", "vmodl.ManagedObject", "vim.version.version1", nil, [["queryDescriptions", "QueryDescriptions", "vim.version.version1", [["host", "vim.HostSystem", "vim.version.version1", {:optional => true}, nil]], [{:optional => true}, "vim.DiagnosticManager.LogDescriptor[]", "vim.DiagnosticManager.LogDescriptor[]"], "Global.Diagnostics", nil], ["browse", "BrowseDiagnosticLog", "vim.version.version1", [["host", "vim.HostSystem", "vim.version.version1", {:optional => true}, nil], ["key", "string", "vim.version.version1", {}, nil], ["start", "int", "vim.version.version1", {:optional => true}, nil], ["lines", "int", "vim.version.version1", {:optional => true}, nil]], [{}, "vim.DiagnosticManager.LogHeader", "vim.DiagnosticManager.LogHeader"], "Global.Diagnostics", ["vim.fault.CannotAccessFile"]], ["generateLogBundles", "GenerateLogBundles_Task", "vim.version.version1", [["includeDefault", "boolean", "vim.version.version1", {}, nil], ["host", "vim.HostSystem[]", "vim.version.version1", {:optional => true}, nil]], [{:optional => true}, "vim.Task", "vim.DiagnosticManager.BundleInfo[]"], "Global.Diagnostics", ["vim.fault.LogBundlingFailed", "vim.fault.TaskInProgress"]]])
    create_data_type("vim.DiagnosticManager.LogDescriptor", "DiagnosticManagerLogDescriptor", "vmodl.DynamicData", "vim.version.version1", [["key", "string", "vim.version.version1"], ["fileName", "string", "vim.version.version1"], ["creator", "string", "vim.version.version1"], ["format", "string", "vim.version.version1"], ["mimeType", "string", "vim.version.version1"], ["info", "vim.Description", "vim.version.version1"]])
    create_enum_type("vim.DiagnosticManager.LogDescriptor.Creator", "DiagnosticManagerLogCreator", "vim.version.version1", ["vpxd", "vpxa", "hostd", "serverd", "install", "vpxClient", "recordLog"])
    create_enum_type("vim.DiagnosticManager.LogDescriptor.Format", "DiagnosticManagerLogFormat", "vim.version.version1", ["plain"])
    create_data_type("vim.DiagnosticManager.LogHeader", "DiagnosticManagerLogHeader", "vmodl.DynamicData", "vim.version.version1", [["lineStart", "int", "vim.version.version1"], ["lineEnd", "int", "vim.version.version1"], ["lineText", "string[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.DiagnosticManager.BundleInfo", "DiagnosticManagerBundleInfo", "vmodl.DynamicData", "vim.version.version1", [["system", "vim.HostSystem", "vim.version.version1", {:optional => true}], ["url", "string", "vim.version.version1"]])
    create_enum_type("vim.DrsStatsManager.InjectorWorkload.CorrelationState", "DrsInjectorWorkloadCorrelationState", "vim.version.version8", ["Correlated", "Uncorrelated"])
    create_data_type("vim.ElementDescription", "ElementDescription", "vim.Description", "vim.version.version1", [["key", "string", "vim.version.version1"]])
    create_data_type("vim.EnumDescription", "EnumDescription", "vmodl.DynamicData", "vim.version.version5", [["key", "vmodl.TypeName", "vim.version.version5"], ["tags", "vim.ElementDescription[]", "vim.version.version5"]])
    create_managed_type("vim.EnvironmentBrowser", "EnvironmentBrowser", "vmodl.ManagedObject", "vim.version.version1", [["datastoreBrowser", "vim.host.DatastoreBrowser", "vim.version.version1", {:optional => true}, "System.View"]], [["queryConfigOptionDescriptor", "QueryConfigOptionDescriptor", "vim.version.version1", [], [{:optional => true}, "vim.vm.ConfigOptionDescriptor[]", "vim.vm.ConfigOptionDescriptor[]"], "System.View", nil], ["queryConfigOption", "QueryConfigOption", "vim.version.version1", [["key", "string", "vim.version.version1", {:optional => true}, nil], ["host", "vim.HostSystem", "vim.version.version1", {:optional => true}, nil]], [{:optional => true}, "vim.vm.ConfigOption", "vim.vm.ConfigOption"], "System.View", nil], ["queryConfigTarget", "QueryConfigTarget", "vim.version.version1", [["host", "vim.HostSystem", "vim.version.version1", {:optional => true}, nil]], [{:optional => true}, "vim.vm.ConfigTarget", "vim.vm.ConfigTarget"], "System.View", nil], ["queryTargetCapabilities", "QueryTargetCapabilities", "vim.version.version5", [["host", "vim.HostSystem", "vim.version.version5", {:optional => true}, nil]], [{:optional => true}, "vim.host.Capability", "vim.host.Capability"], "System.View", nil]])
    create_enum_type("vim.EsxAgentConfigManager.AgentVmState", "EsxAgentConfigManagerAgentVmState", "vim.version.version7", ["enabled", "disabled", "unavailable", "manuallyEnabled"])
    create_data_type("vim.ExtendedDescription", "ExtendedDescription", "vim.Description", "vim.version.version5", [["messageCatalogKeyPrefix", "string", "vim.version.version5"], ["messageArg", "vmodl.KeyAnyValue[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.ExtendedElementDescription", "ExtendedElementDescription", "vim.ElementDescription", "vim.version.version5", [["messageCatalogKeyPrefix", "string", "vim.version.version5"], ["messageArg", "vmodl.KeyAnyValue[]", "vim.version.version5", {:optional => true}]])
    create_managed_type("vim.ExtensibleManagedObject", "ExtensibleManagedObject", "vmodl.ManagedObject", "vim.version.version1", [["value", "vim.CustomFieldsManager.Value[]", "vim.version.version2", {:optional => true}, "System.View"], ["availableField", "vim.CustomFieldsManager.FieldDef[]", "vim.version.version2", {:optional => true}, "System.View"]], [["setCustomValue", "setCustomValue", "vim.version.version2", [["key", "string", "vim.version.version2", {}, nil], ["value", "string", "vim.version.version2", {}, nil]], [{}, "void", "void"], nil, nil]])
    create_data_type("vim.Extension", "Extension", "vmodl.DynamicData", "vim.version.version2", [["description", "vim.Description", "vim.version.version2"], ["key", "string", "vim.version.version2"], ["company", "string", "vim.version.version5", {:optional => true}], ["type", "string", "vim.version.version5", {:optional => true}], ["version", "string", "vim.version.version2"], ["subjectName", "string", "vim.version.version2", {:optional => true}], ["server", "vim.Extension.ServerInfo[]", "vim.version.version2", {:optional => true}], ["client", "vim.Extension.ClientInfo[]", "vim.version.version2", {:optional => true}], ["taskList", "vim.Extension.TaskTypeInfo[]", "vim.version.version2", {:optional => true}], ["eventList", "vim.Extension.EventTypeInfo[]", "vim.version.version2", {:optional => true}], ["faultList", "vim.Extension.FaultTypeInfo[]", "vim.version.version2", {:optional => true}], ["privilegeList", "vim.Extension.PrivilegeInfo[]", "vim.version.version2", {:optional => true}], ["resourceList", "vim.Extension.ResourceInfo[]", "vim.version.version2", {:optional => true}], ["lastHeartbeatTime", "vmodl.DateTime", "vim.version.version2"], ["healthInfo", "vim.Extension.HealthInfo", "vim.version.version5", {:optional => true}], ["ovfConsumerInfo", "vim.Extension.OvfConsumerInfo", "vim.version.version7", {:optional => true}], ["extendedProductInfo", "vim.ext.ExtendedProductInfo", "vim.version.version7", {:optional => true}], ["managedEntityInfo", "vim.ext.ManagedEntityInfo[]", "vim.version.version7", {:optional => true}], ["shownInSolutionManager", "boolean", "vim.version.version7", {:optional => true}], ["solutionManagerInfo", "vim.ext.SolutionManagerInfo", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.Extension.ServerInfo", "ExtensionServerInfo", "vmodl.DynamicData", "vim.version.version2", [["url", "string", "vim.version.version2"], ["description", "vim.Description", "vim.version.version2"], ["company", "string", "vim.version.version2"], ["type", "string", "vim.version.version2"], ["adminEmail", "string[]", "vim.version.version2"], ["serverThumbprint", "string", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.Extension.ClientInfo", "ExtensionClientInfo", "vmodl.DynamicData", "vim.version.version2", [["version", "string", "vim.version.version2"], ["description", "vim.Description", "vim.version.version2"], ["company", "string", "vim.version.version2"], ["type", "string", "vim.version.version2"], ["url", "string", "vim.version.version2"]])
    create_data_type("vim.Extension.TaskTypeInfo", "ExtensionTaskTypeInfo", "vmodl.DynamicData", "vim.version.version2", [["taskID", "string", "vim.version.version2"]])
    create_data_type("vim.Extension.EventTypeInfo", "ExtensionEventTypeInfo", "vmodl.DynamicData", "vim.version.version2", [["eventID", "string", "vim.version.version2"], ["eventTypeSchema", "string", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.Extension.FaultTypeInfo", "ExtensionFaultTypeInfo", "vmodl.DynamicData", "vim.version.version2", [["faultID", "string", "vim.version.version2"]])
    create_data_type("vim.Extension.PrivilegeInfo", "ExtensionPrivilegeInfo", "vmodl.DynamicData", "vim.version.version2", [["privID", "string", "vim.version.version2"], ["privGroupName", "string", "vim.version.version2"]])
    create_data_type("vim.Extension.ResourceInfo", "ExtensionResourceInfo", "vmodl.DynamicData", "vim.version.version2", [["locale", "string", "vim.version.version2"], ["module", "string", "vim.version.version2"], ["data", "vim.KeyValue[]", "vim.version.version2"]])
    create_data_type("vim.Extension.HealthInfo", "ExtensionHealthInfo", "vmodl.DynamicData", "vim.version.version5", [["url", "string", "vim.version.version5"]])
    create_data_type("vim.Extension.OvfConsumerInfo", "ExtensionOvfConsumerInfo", "vmodl.DynamicData", "vim.version.version7", [["callbackUrl", "string", "vim.version.version7"], ["sectionType", "string[]", "vim.version.version7"]])
    create_managed_type("vim.ExtensionManager", "ExtensionManager", "vmodl.ManagedObject", "vim.version.version2", [["extensionList", "vim.Extension[]", "vim.version.version2", {:optional => true}, "System.View"]], [["unregisterExtension", "UnregisterExtension", "vim.version.version2", [["extensionKey", "string", "vim.version.version2", {}, nil]], [{}, "void", "void"], "Extension.Unregister", ["vim.fault.NotFound"]], ["findExtension", "FindExtension", "vim.version.version2", [["extensionKey", "string", "vim.version.version2", {}, nil]], [{:optional => true}, "vim.Extension", "vim.Extension"], "System.View", nil], ["registerExtension", "RegisterExtension", "vim.version.version2", [["extension", "vim.Extension", "vim.version.version2", {}, nil]], [{}, "void", "void"], "Extension.Register", nil], ["updateExtension", "UpdateExtension", "vim.version.version2", [["extension", "vim.Extension", "vim.version.version2", {}, nil]], [{}, "void", "void"], "Extension.Update", ["vim.fault.NotFound"]], ["getPublicKey", "GetPublicKey", "vim.version.version2", [], [{}, "string", "string"], "System.View", nil], ["setPublicKey", "SetPublicKey", "vim.version.version2", [["extensionKey", "string", "vim.version.version2", {}, nil], ["publicKey", "string", "vim.version.version2", {}, nil]], [{}, "void", "void"], "Extension.Update", nil], ["setCertificate", "SetExtensionCertificate", "vim.version.version5", [["extensionKey", "string", "vim.version.version5", {}, nil], ["certificatePem", "string", "vim.version.version5", {:optional => true}, nil]], [{}, "void", "void"], "Extension.Update", ["vim.fault.NotFound", "vim.fault.NoClientCertificate"]], ["queryManagedBy", "QueryManagedBy", "vim.version.version7", [["extensionKey", "string", "vim.version.version7", {}, nil]], [{:optional => true}, "vim.ManagedEntity[]", "vim.ManagedEntity[]"], "System.View", nil], ["queryExtensionIpAllocationUsage", "QueryExtensionIpAllocationUsage", "vim.version.version8", [["extensionKeys", "string[]", "vim.version.version8", {:optional => true}, nil]], [{:optional => true}, "vim.ExtensionManager.IpAllocationUsage[]", "vim.ExtensionManager.IpAllocationUsage[]"], "System.View", nil]])
    create_data_type("vim.ExtensionManager.IpAllocationUsage", "ExtensionManagerIpAllocationUsage", "vmodl.DynamicData", "vim.version.version8", [["extensionKey", "string", "vim.version.version8"], ["numAddresses", "int", "vim.version.version8"]])
    create_managed_type("vim.FileManager", "FileManager", "vmodl.ManagedObject", "vim.version.version2", nil, [["moveFile", "MoveDatastoreFile_Task", "vim.version.version2", [["sourceName", "string", "vim.version.version2", {}, nil], ["sourceDatacenter", "vim.Datacenter", "vim.version.version2", {:optional => true}, "System.View"], ["destinationName", "string", "vim.version.version2", {}, nil], ["destinationDatacenter", "vim.Datacenter", "vim.version.version2", {:optional => true}, "System.View"], ["force", "boolean", "vim.version.version2", {:optional => true}, nil]], [{}, "vim.Task", "void"], nil, ["vim.fault.InvalidDatastore", "vim.fault.FileFault"]], ["copyFile", "CopyDatastoreFile_Task", "vim.version.version2", [["sourceName", "string", "vim.version.version2", {}, nil], ["sourceDatacenter", "vim.Datacenter", "vim.version.version2", {:optional => true}, "System.View"], ["destinationName", "string", "vim.version.version2", {}, nil], ["destinationDatacenter", "vim.Datacenter", "vim.version.version2", {:optional => true}, "System.View"], ["force", "boolean", "vim.version.version2", {:optional => true}, nil]], [{}, "vim.Task", "void"], nil, ["vim.fault.InvalidDatastore", "vim.fault.FileFault"]], ["deleteFile", "DeleteDatastoreFile_Task", "vim.version.version2", [["name", "string", "vim.version.version2", {}, nil], ["datacenter", "vim.Datacenter", "vim.version.version2", {:optional => true}, "System.View"]], [{}, "vim.Task", "void"], nil, ["vim.fault.InvalidDatastore", "vim.fault.FileFault"]], ["makeDirectory", "MakeDirectory", "vim.version.version2", [["name", "string", "vim.version.version2", {}, nil], ["datacenter", "vim.Datacenter", "vim.version.version2", {:optional => true}, "System.View"], ["createParentDirectories", "boolean", "vim.version.version2", {:optional => true}, nil]], [{}, "void", "void"], nil, ["vim.fault.InvalidDatastore", "vim.fault.FileFault"]], ["changeOwner", "ChangeOwner", "vim.version.version5", [["name", "string", "vim.version.version5", {}, nil], ["datacenter", "vim.Datacenter", "vim.version.version5", {:optional => true}, "System.View"], ["owner", "string", "vim.version.version5", {}, nil]], [{}, "void", "void"], nil, ["vim.fault.InvalidDatastore", "vim.fault.FileFault", "vim.fault.UserNotFound"]]])
    create_enum_type("vim.FileManager.FileType", "FileManagerFileType", "vim.version.version2", ["File", "VirtualDisk"])
    create_data_type("vim.HbrManager.ReplicationVmInfo", "HbrManagerReplicationVmInfo", "vmodl.DynamicData", "vim.version.version7", [["state", "string", "vim.version.version7"], ["progressInfo", "vim.HbrManager.ReplicationVmInfo.ProgressInfo", "vim.version.version7", {:optional => true}], ["imageId", "string", "vim.version.version7", {:optional => true}], ["lastError", "vmodl.MethodFault", "vim.version.version7", {:optional => true}]])
    create_enum_type("vim.HbrManager.ReplicationVmInfo.State", "ReplicationVmState", "vim.version.version7", ["none", "paused", "syncing", "idle", "active", "error"])
    create_data_type("vim.HbrManager.ReplicationVmInfo.ProgressInfo", "ReplicationVmProgressInfo", "vmodl.DynamicData", "vim.version.version7", [["progress", "int", "vim.version.version7"], ["bytesTransferred", "long", "vim.version.version7"], ["bytesToTransfer", "long", "vim.version.version7"], ["checksumTotalBytes", "long", "vim.version.version7", {:optional => true}], ["checksumComparedBytes", "long", "vim.version.version7", {:optional => true}]])
    create_managed_type("vim.HistoryCollector", "HistoryCollector", "vmodl.ManagedObject", "vim.version.version1", [["filter", "anyType", "vim.version.version1", {}, nil]], [["setLatestPageSize", "SetCollectorPageSize", "vim.version.version1", [["maxCount", "int", "vim.version.version1", {}, nil]], [{}, "void", "void"], nil, nil], ["rewind", "RewindCollector", "vim.version.version1", [], [{}, "void", "void"], nil, nil], ["reset", "ResetCollector", "vim.version.version1", [], [{}, "void", "void"], nil, nil], ["remove", "DestroyCollector", "vim.version.version1", [], [{}, "void", "void"], nil, nil]])
    create_data_type("vim.HostServiceTicket", "HostServiceTicket", "vmodl.DynamicData", "vim.version.version1", [["host", "string", "vim.version.version1", {:optional => true}], ["port", "int", "vim.version.version1", {:optional => true}], ["sslThumbprint", "string", "vim.version.version2", {:optional => true}], ["service", "string", "vim.version.version1"], ["serviceVersion", "string", "vim.version.version1"], ["sessionId", "string", "vim.version.version1"]])
    create_managed_type("vim.HttpNfcLease", "HttpNfcLease", "vmodl.ManagedObject", "vim.version.version5", [["initializeProgress", "int", "vim.version.version5", {}, nil], ["info", "vim.HttpNfcLease.Info", "vim.version.version5", {:optional => true}, nil], ["state", "vim.HttpNfcLease.State", "vim.version.version5", {}, nil], ["error", "vmodl.MethodFault", "vim.version.version5", {:optional => true}, nil]], [["getManifest", "HttpNfcLeaseGetManifest", "vim.version.version6", [], [{:optional => true}, "vim.HttpNfcLease.ManifestEntry[]", "vim.HttpNfcLease.ManifestEntry[]"], nil, ["vim.fault.Timedout", "vim.fault.InvalidState"]], ["complete", "HttpNfcLeaseComplete", "vim.version.version5", [], [{}, "void", "void"], nil, ["vim.fault.Timedout", "vim.fault.InvalidState"]], ["abort", "HttpNfcLeaseAbort", "vim.version.version5", [["fault", "vmodl.MethodFault", "vim.version.version5", {:optional => true}, nil]], [{}, "void", "void"], nil, ["vim.fault.Timedout", "vim.fault.InvalidState"]], ["progress", "HttpNfcLeaseProgress", "vim.version.version5", [["percent", "int", "vim.version.version5", {}, nil]], [{}, "void", "void"], nil, ["vim.fault.Timedout"]]])
    create_enum_type("vim.HttpNfcLease.State", "HttpNfcLeaseState", "vim.version.version5", ["initializing", "ready", "done", "error"])
    create_data_type("vim.HttpNfcLease.DatastoreLeaseInfo", "HttpNfcLeaseDatastoreLeaseInfo", "vmodl.DynamicData", "vim.version.version6", [["datastoreKey", "string", "vim.version.version6"], ["hosts", "vim.HttpNfcLease.HostInfo[]", "vim.version.version6"]])
    create_data_type("vim.HttpNfcLease.HostInfo", "HttpNfcLeaseHostInfo", "vmodl.DynamicData", "vim.version.version6", [["url", "string", "vim.version.version6"], ["sslThumbprint", "string", "vim.version.version6"]])
    create_data_type("vim.HttpNfcLease.Info", "HttpNfcLeaseInfo", "vmodl.DynamicData", "vim.version.version5", [["lease", "vim.HttpNfcLease", "vim.version.version5"], ["entity", "vim.ManagedEntity", "vim.version.version5"], ["deviceUrl", "vim.HttpNfcLease.DeviceUrl[]", "vim.version.version5", {:optional => true}], ["totalDiskCapacityInKB", "long", "vim.version.version5"], ["leaseTimeout", "int", "vim.version.version5"], ["hostMap", "vim.HttpNfcLease.DatastoreLeaseInfo[]", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.HttpNfcLease.DeviceUrl", "HttpNfcLeaseDeviceUrl", "vmodl.DynamicData", "vim.version.version5", [["key", "string", "vim.version.version5"], ["importKey", "string", "vim.version.version5"], ["url", "string", "vim.version.version5"], ["sslThumbprint", "string", "vim.version.version5"], ["disk", "boolean", "vim.version.version6", {:optional => true}], ["targetId", "string", "vim.version.version6", {:optional => true}], ["datastoreKey", "string", "vim.version.version6", {:optional => true}], ["fileSize", "long", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.HttpNfcLease.ManifestEntry", "HttpNfcLeaseManifestEntry", "vmodl.DynamicData", "vim.version.version6", [["key", "string", "vim.version.version6"], ["sha1", "string", "vim.version.version6"], ["size", "long", "vim.version.version6"], ["disk", "boolean", "vim.version.version6"], ["capacity", "long", "vim.version.version6", {:optional => true}], ["populatedSize", "long", "vim.version.version6", {:optional => true}]])
    create_enum_type("vim.ImageLibraryManager.MediaType", "ImageLibraryManagerMediaType", "vim.version.version5", ["Ovf", "Vmdk", "Iso", "Flp", "Cust", "Generic"])
    create_data_type("vim.InheritablePolicy", "InheritablePolicy", "vmodl.DynamicData", "vim.version.version5", [["inherited", "boolean", "vim.version.version5"]])
    create_data_type("vim.IntPolicy", "IntPolicy", "vim.InheritablePolicy", "vim.version.version5", [["value", "int", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.InternalStatsCollector.StatsSet", "InternalStatsSet", "vim.version.version5", ["vmMemoryOverheadStats", "vmFaultToleranceStats"])
    create_managed_type("vim.IpPoolManager", "IpPoolManager", "vmodl.ManagedObject", "vim.version.version5", nil, [["queryIpPools", "QueryIpPools", "vim.version.version5", [["dc", "vim.Datacenter", "vim.version.version5", {}, "System.Read"]], [{:optional => true}, "vim.vApp.IpPool[]", "vim.vApp.IpPool[]"], nil, nil], ["createIpPool", "CreateIpPool", "vim.version.version5", [["dc", "vim.Datacenter", "vim.version.version5", {}, "Datacenter.IpPoolConfig"], ["pool", "vim.vApp.IpPool", "vim.version.version5", {}, nil]], [{}, "int", "int"], nil, nil], ["updateIpPool", "UpdateIpPool", "vim.version.version5", [["dc", "vim.Datacenter", "vim.version.version5", {}, "Datacenter.IpPoolConfig"], ["pool", "vim.vApp.IpPool", "vim.version.version5", {}, nil]], [{}, "void", "void"], nil, nil], ["destroyIpPool", "DestroyIpPool", "vim.version.version5", [["dc", "vim.Datacenter", "vim.version.version5", {}, "Datacenter.IpPoolConfig"], ["id", "int", "vim.version.version5", {}, nil], ["force", "boolean", "vim.version.version5", {}, nil]], [{}, "void", "void"], nil, ["vim.fault.InvalidState"]], ["allocateIpv4Address", "AllocateIpv4Address", "vim.version.version8", [["dc", "vim.Datacenter", "vim.version.version8", {}, nil], ["poolId", "int", "vim.version.version8", {}, nil], ["allocationId", "string", "vim.version.version8", {}, nil]], [{}, "string", "string"], nil, nil], ["allocateIpv6Address", "AllocateIpv6Address", "vim.version.version8", [["dc", "vim.Datacenter", "vim.version.version8", {}, nil], ["poolId", "int", "vim.version.version8", {}, nil], ["allocationId", "string", "vim.version.version8", {}, nil]], [{}, "string", "string"], nil, nil], ["releaseIpAllocation", "ReleaseIpAllocation", "vim.version.version8", [["dc", "vim.Datacenter", "vim.version.version8", {}, "Datacenter.IpPoolReleaseIp"], ["poolId", "int", "vim.version.version8", {}, nil], ["allocationId", "string", "vim.version.version8", {}, nil]], [{}, "void", "void"], nil, nil], ["queryIPAllocations", "QueryIPAllocations", "vim.version.version8", [["dc", "vim.Datacenter", "vim.version.version8", {}, "Datacenter.IpPoolQueryAllocations"], ["poolId", "int", "vim.version.version8", {}, nil], ["extensionKey", "string", "vim.version.version8", {}, nil]], [{}, "vim.IpPoolManager.IpAllocation[]", "vim.IpPoolManager.IpAllocation[]"], nil, nil]])
    create_data_type("vim.IpPoolManager.IpAllocation", "IpPoolManagerIpAllocation", "vmodl.DynamicData", "vim.version.version8", [["ipAddress", "string", "vim.version.version8"], ["allocationId", "string", "vim.version.version8"]])
    create_data_type("vim.KeyValue", "KeyValue", "vmodl.DynamicData", "vim.version.version2", [["key", "string", "vim.version.version2"], ["value", "string", "vim.version.version2"]])
    create_data_type("vim.LatencySensitivity", "LatencySensitivity", "vmodl.DynamicData", "vim.version.version8", [["level", "vim.LatencySensitivity.SensitivityLevel", "vim.version.version8"], ["sensitivity", "int", "vim.version.version8", {:optional => true}]])
    create_enum_type("vim.LatencySensitivity.SensitivityLevel", "LatencySensitivitySensitivityLevel", "vim.version.version8", ["low", "normal", "medium", "high", "custom"])
    create_managed_type("vim.LicenseManager", "LicenseManager", "vmodl.ManagedObject", "vim.version.version1", [["source", "vim.LicenseManager.LicenseSource", "vim.version.version1", {}, nil], ["sourceAvailable", "boolean", "vim.version.version1", {}, nil], ["diagnostics", "vim.LicenseManager.DiagnosticInfo", "vim.version.version2", {:optional => true}, nil], ["featureInfo", "vim.LicenseManager.FeatureInfo[]", "vim.version.version1", {:optional => true}, nil], ["licensedEdition", "string", "vim.version.version2", {}, nil], ["licenses", "vim.LicenseManager.LicenseInfo[]", "vim.version.version5", {}, nil], ["licenseAssignmentManager", "vim.LicenseAssignmentManager", "vim.version.version5", {:optional => true}, "System.View"], ["evaluation", "vim.LicenseManager.EvaluationInfo", "vim.version.version5", {}, "System.Read"]], [["querySupportedFeatures", "QuerySupportedFeatures", "vim.version.version2", [["host", "vim.HostSystem", "vim.version.version2", {:optional => true}, nil]], [{:optional => true}, "vim.LicenseManager.FeatureInfo[]", "vim.LicenseManager.FeatureInfo[]"], "Global.Licenses", nil], ["querySourceAvailability", "QueryLicenseSourceAvailability", "vim.version.version1", [["host", "vim.HostSystem", "vim.version.version1", {:optional => true}, nil]], [{:optional => true}, "vim.LicenseManager.AvailabilityInfo[]", "vim.LicenseManager.AvailabilityInfo[]"], "Global.Licenses", nil], ["queryUsage", "QueryLicenseUsage", "vim.version.version1", [["host", "vim.HostSystem", "vim.version.version1", {:optional => true}, nil]], [{}, "vim.LicenseManager.LicenseUsageInfo", "vim.LicenseManager.LicenseUsageInfo"], "System.Read", nil], ["setEdition", "SetLicenseEdition", "vim.version.version1", [["host", "vim.HostSystem", "vim.version.version1", {:optional => true}, nil], ["featureKey", "string", "vim.version.version1", {:optional => true}, nil]], [{}, "void", "void"], "Global.Licenses", ["vim.fault.InvalidState", "vim.fault.LicenseServerUnavailable"]], ["checkFeature", "CheckLicenseFeature", "vim.version.version1", [["host", "vim.HostSystem", "vim.version.version1", {:optional => true}, nil], ["featureKey", "string", "vim.version.version1", {}, nil]], [{}, "boolean", "boolean"], "System.Read", ["vim.fault.InvalidState"]], ["enable", "EnableFeature", "vim.version.version1", [["host", "vim.HostSystem", "vim.version.version1", {:optional => true}, nil], ["featureKey", "string", "vim.version.version1", {}, nil]], [{}, "boolean", "boolean"], "Global.Licenses", ["vim.fault.InvalidState", "vim.fault.LicenseServerUnavailable"]], ["disable", "DisableFeature", "vim.version.version1", [["host", "vim.HostSystem", "vim.version.version1", {:optional => true}, nil], ["featureKey", "string", "vim.version.version1", {}, nil]], [{}, "boolean", "boolean"], "Global.Licenses", ["vim.fault.InvalidState", "vim.fault.LicenseServerUnavailable"]], ["configureSource", "ConfigureLicenseSource", "vim.version.version1", [["host", "vim.HostSystem", "vim.version.version1", {:optional => true}, nil], ["licenseSource", "vim.LicenseManager.LicenseSource", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Global.Licenses", ["vim.fault.CannotAccessLocalSource", "vim.fault.InvalidLicense", "vim.fault.LicenseServerUnavailable"]], ["updateLicense", "UpdateLicense", "vim.version.version5", [["licenseKey", "string", "vim.version.version5", {}, nil], ["labels", "vim.KeyValue[]", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.LicenseManager.LicenseInfo", "vim.LicenseManager.LicenseInfo"], "Global.Licenses", nil], ["addLicense", "AddLicense", "vim.version.version5", [["licenseKey", "string", "vim.version.version5", {}, nil], ["labels", "vim.KeyValue[]", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.LicenseManager.LicenseInfo", "vim.LicenseManager.LicenseInfo"], "Global.Licenses", nil], ["removeLicense", "RemoveLicense", "vim.version.version5", [["licenseKey", "string", "vim.version.version5", {}, nil]], [{}, "void", "void"], "Global.Licenses", nil], ["decodeLicense", "DecodeLicense", "vim.version.version5", [["licenseKey", "string", "vim.version.version5", {}, nil]], [{}, "vim.LicenseManager.LicenseInfo", "vim.LicenseManager.LicenseInfo"], "Global.Licenses", nil], ["updateLabel", "UpdateLicenseLabel", "vim.version.version5", [["licenseKey", "string", "vim.version.version5", {}, nil], ["labelKey", "string", "vim.version.version5", {}, nil], ["labelValue", "string", "vim.version.version5", {}, nil]], [{}, "void", "void"], "Global.Licenses", nil], ["removeLabel", "RemoveLicenseLabel", "vim.version.version5", [["licenseKey", "string", "vim.version.version5", {}, nil], ["labelKey", "string", "vim.version.version5", {}, nil]], [{}, "void", "void"], "Global.Licenses", nil]])
    create_enum_type("vim.LicenseManager.LicenseState", "LicenseManagerState", "vim.version.version2", ["initializing", "normal", "marginal", "fault"])
    create_enum_type("vim.LicenseManager.LicenseKey", "LicenseManagerLicenseKey", "vim.version.version1", ["esxFull", "esxVmtn", "esxExpress", "san", "iscsi", "nas", "vsmp", "backup", "vc", "vcExpress", "esxHost", "gsxHost", "serverHost", "drsPower", "vmotion", "drs", "das"])
    create_data_type("vim.LicenseManager.LicenseSource", "LicenseSource", "vmodl.DynamicData", "vim.version.version1", nil)
    create_data_type("vim.LicenseManager.LicenseServer", "LicenseServerSource", "vim.LicenseManager.LicenseSource", "vim.version.version1", [["licenseServer", "string", "vim.version.version1"]])
    create_data_type("vim.LicenseManager.LocalLicense", "LocalLicenseSource", "vim.LicenseManager.LicenseSource", "vim.version.version1", [["licenseKeys", "string", "vim.version.version1"]])
    create_data_type("vim.LicenseManager.EvaluationLicense", "EvaluationLicenseSource", "vim.LicenseManager.LicenseSource", "vim.version.version2", [["remainingHours", "long", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.LicenseManager.FeatureInfo", "LicenseFeatureInfo", "vmodl.DynamicData", "vim.version.version1", [["key", "string", "vim.version.version1"], ["featureName", "string", "vim.version.version1"], ["featureDescription", "string", "vim.version.version2", {:optional => true}], ["state", "vim.LicenseManager.FeatureInfo.State", "vim.version.version1", {:optional => true}], ["costUnit", "string", "vim.version.version1"], ["sourceRestriction", "string", "vim.version.version2", {:optional => true}], ["dependentKey", "string[]", "vim.version.version2", {:optional => true}], ["edition", "boolean", "vim.version.version2", {:optional => true}], ["expiresOn", "vmodl.DateTime", "vim.version.version2", {:optional => true}]])
    create_enum_type("vim.LicenseManager.FeatureInfo.CostUnit", "LicenseFeatureInfoUnit", "vim.version.version1", ["host", "cpuCore", "cpuPackage", "server", "vm"])
    create_enum_type("vim.LicenseManager.FeatureInfo.State", "LicenseFeatureInfoState", "vim.version.version1", ["enabled", "disabled", "optional"])
    create_enum_type("vim.LicenseManager.FeatureInfo.SourceRestriction", "LicenseFeatureInfoSourceRestriction", "vim.version.version2", ["unrestricted", "served", "file"])
    create_data_type("vim.LicenseManager.ReservationInfo", "LicenseReservationInfo", "vmodl.DynamicData", "vim.version.version1", [["key", "string", "vim.version.version1"], ["state", "vim.LicenseManager.ReservationInfo.State", "vim.version.version1"], ["required", "int", "vim.version.version1"]])
    create_enum_type("vim.LicenseManager.ReservationInfo.State", "LicenseReservationInfoState", "vim.version.version1", ["notUsed", "noLicense", "unlicensedUse", "licensed"])
    create_data_type("vim.LicenseManager.AvailabilityInfo", "LicenseAvailabilityInfo", "vmodl.DynamicData", "vim.version.version1", [["feature", "vim.LicenseManager.FeatureInfo", "vim.version.version1"], ["total", "int", "vim.version.version1"], ["available", "int", "vim.version.version1"]])
    create_data_type("vim.LicenseManager.DiagnosticInfo", "LicenseDiagnostics", "vmodl.DynamicData", "vim.version.version2", [["sourceLastChanged", "vmodl.DateTime", "vim.version.version2"], ["sourceLost", "string", "vim.version.version2"], ["sourceLatency", "float", "vim.version.version2"], ["licenseRequests", "string", "vim.version.version2"], ["licenseRequestFailures", "string", "vim.version.version2"], ["licenseFeatureUnknowns", "string", "vim.version.version2"], ["opState", "vim.LicenseManager.LicenseState", "vim.version.version2"], ["lastStatusUpdate", "vmodl.DateTime", "vim.version.version2"], ["opFailureMessage", "string", "vim.version.version2"]])
    create_data_type("vim.LicenseManager.LicenseUsageInfo", "LicenseUsageInfo", "vmodl.DynamicData", "vim.version.version1", [["source", "vim.LicenseManager.LicenseSource", "vim.version.version1"], ["sourceAvailable", "boolean", "vim.version.version1"], ["reservationInfo", "vim.LicenseManager.ReservationInfo[]", "vim.version.version1", {:optional => true}], ["featureInfo", "vim.LicenseManager.FeatureInfo[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.LicenseManager.EvaluationInfo", "LicenseManagerEvaluationInfo", "vmodl.DynamicData", "vim.version.version5", [["properties", "vmodl.KeyAnyValue[]", "vim.version.version5"]])
    create_data_type("vim.LicenseManager.LicensableResourceInfo", "HostLicensableResourceInfo", "vmodl.DynamicData", "vim.version.version7", [["resource", "vmodl.KeyAnyValue[]", "vim.version.version7"]])
    create_enum_type("vim.LicenseManager.LicensableResourceInfo.ResourceKey", "HostLicensableResourceKey", "vim.version.version7", ["numCpuPackages", "numCpuCores", "memorySize", "memoryForVms", "numVmsStarted", "numVmsStarting"])
    create_data_type("vim.LicenseManager.LicenseInfo", "LicenseManagerLicenseInfo", "vmodl.DynamicData", "vim.version.version5", [["licenseKey", "string", "vim.version.version5"], ["editionKey", "string", "vim.version.version5"], ["name", "string", "vim.version.version5"], ["total", "int", "vim.version.version5"], ["used", "int", "vim.version.version5", {:optional => true}], ["costUnit", "string", "vim.version.version5"], ["properties", "vmodl.KeyAnyValue[]", "vim.version.version5", {:optional => true}], ["labels", "vim.KeyValue[]", "vim.version.version5", {:optional => true}]])
    create_managed_type("vim.LocalizationManager", "LocalizationManager", "vmodl.ManagedObject", "vim.version.version5", [["catalog", "vim.LocalizationManager.MessageCatalog[]", "vim.version.version5", {:optional => true}, "System.View"]], nil)
    create_data_type("vim.LocalizationManager.MessageCatalog", "LocalizationManagerMessageCatalog", "vmodl.DynamicData", "vim.version.version5", [["moduleName", "string", "vim.version.version5"], ["catalogName", "string", "vim.version.version5"], ["locale", "string", "vim.version.version5"], ["catalogUri", "string", "vim.version.version5"], ["lastModified", "vmodl.DateTime", "vim.version.version5", {:optional => true}], ["md5sum", "string", "vim.version.version5", {:optional => true}], ["version", "string", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.LongPolicy", "LongPolicy", "vim.InheritablePolicy", "vim.version.version5", [["value", "long", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.MethodDescription", "MethodDescription", "vim.Description", "vim.version.version1", [["key", "vmodl.MethodName", "vim.version.version1"]])
    create_data_type("vim.NegatableExpression", "NegatableExpression", "vmodl.DynamicData", "vim.version.version9", [["negate", "boolean", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.NumericRange", "NumericRange", "vmodl.DynamicData", "vim.version.version5", [["start", "int", "vim.version.version5"], ["end", "int", "vim.version.version5"]])
    create_data_type("vim.OvfConsumer.OvfSection", "OvfConsumerOvfSection", "vmodl.DynamicData", "vim.version.version7", [["lineNumber", "int", "vim.version.version7"], ["xml", "string", "vim.version.version7"]])
    create_enum_type("vim.OvfConsumer.OstNodeType", "OvfConsumerOstNodeType", "vim.version.version7", ["envelope", "virtualSystem", "virtualSystemCollection"])
    create_data_type("vim.OvfConsumer.OstNode", "OvfConsumerOstNode", "vmodl.DynamicData", "vim.version.version7", [["id", "string", "vim.version.version7"], ["type", "string", "vim.version.version7"], ["section", "vim.OvfConsumer.OvfSection[]", "vim.version.version7", {:optional => true}], ["child", "vim.OvfConsumer.OstNode[]", "vim.version.version7", {:optional => true}], ["entity", "vim.ManagedEntity", "vim.version.version7", {:optional => true}]])
    create_managed_type("vim.OvfManager", "OvfManager", "vmodl.ManagedObject", "vim.version.version5", [["ovfImportOption", "vim.OvfManager.OvfOptionInfo[]", "vim.version.version8", {:optional => true}, "System.View"], ["ovfExportOption", "vim.OvfManager.OvfOptionInfo[]", "vim.version.version8", {:optional => true}, "System.View"]], [["validateHost", "ValidateHost", "vim.version.version5", [["ovfDescriptor", "string", "vim.version.version5", {}, nil], ["host", "vim.HostSystem", "vim.version.version5", {}, nil], ["vhp", "vim.OvfManager.ValidateHostParams", "vim.version.version5", {}, nil]], [{}, "vim.OvfManager.ValidateHostResult", "vim.OvfManager.ValidateHostResult"], "System.View", ["vim.fault.TaskInProgress", "vim.fault.ConcurrentAccess", "vim.fault.FileFault", "vim.fault.InvalidState"]], ["parseDescriptor", "ParseDescriptor", "vim.version.version5", [["ovfDescriptor", "string", "vim.version.version5", {}, nil], ["pdp", "vim.OvfManager.ParseDescriptorParams", "vim.version.version5", {}, nil]], [{}, "vim.OvfManager.ParseDescriptorResult", "vim.OvfManager.ParseDescriptorResult"], "System.View", ["vim.fault.TaskInProgress", "vim.fault.VmConfigFault", "vim.fault.ConcurrentAccess", "vim.fault.FileFault", "vim.fault.InvalidState"]], ["createImportSpec", "CreateImportSpec", "vim.version.version5", [["ovfDescriptor", "string", "vim.version.version5", {}, nil], ["resourcePool", "vim.ResourcePool", "vim.version.version5", {}, "VApp.Import"], ["datastore", "vim.Datastore", "vim.version.version5", {}, "Datastore.AllocateSpace"], ["cisp", "vim.OvfManager.CreateImportSpecParams", "vim.version.version5", {}, nil]], [{}, "vim.OvfManager.CreateImportSpecResult", "vim.OvfManager.CreateImportSpecResult"], "System.View", ["vim.fault.TaskInProgress", "vim.fault.VmConfigFault", "vim.fault.ConcurrentAccess", "vim.fault.FileFault", "vim.fault.InvalidState", "vim.fault.InvalidDatastore"]], ["createDescriptor", "CreateDescriptor", "vim.version.version5", [["obj", "vim.ManagedEntity", "vim.version.version5", {}, "VApp.Export"], ["cdp", "vim.OvfManager.CreateDescriptorParams", "vim.version.version5", {}, nil]], [{}, "vim.OvfManager.CreateDescriptorResult", "vim.OvfManager.CreateDescriptorResult"], "System.View", ["vim.fault.TaskInProgress", "vim.fault.VmConfigFault", "vim.fault.ConcurrentAccess", "vim.fault.FileFault", "vim.fault.InvalidState"]]])
    create_data_type("vim.OvfManager.OvfOptionInfo", "OvfOptionInfo", "vmodl.DynamicData", "vim.version.version8", [["option", "string", "vim.version.version8"], ["description", "vmodl.LocalizableMessage", "vim.version.version8"]])
    create_data_type("vim.OvfManager.DeploymentOption", "OvfDeploymentOption", "vmodl.DynamicData", "vim.version.version5", [["key", "string", "vim.version.version5"], ["label", "string", "vim.version.version5"], ["description", "string", "vim.version.version5"]])
    create_data_type("vim.OvfManager.CommonParams", "OvfManagerCommonParams", "vmodl.DynamicData", "vim.version.version5", [["locale", "string", "vim.version.version5"], ["deploymentOption", "string", "vim.version.version5"], ["msgBundle", "vim.KeyValue[]", "vim.version.version5", {:optional => true}], ["importOption", "string[]", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.OvfManager.ValidateHostParams", "OvfValidateHostParams", "vim.OvfManager.CommonParams", "vim.version.version5", nil)
    create_data_type("vim.OvfManager.ValidateHostResult", "OvfValidateHostResult", "vmodl.DynamicData", "vim.version.version5", [["downloadSize", "long", "vim.version.version5", {:optional => true}], ["flatDeploymentSize", "long", "vim.version.version5", {:optional => true}], ["sparseDeploymentSize", "long", "vim.version.version5", {:optional => true}], ["error", "vmodl.MethodFault[]", "vim.version.version5", {:optional => true}], ["warning", "vmodl.MethodFault[]", "vim.version.version5", {:optional => true}], ["supportedDiskProvisioning", "string[]", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.OvfManager.ParseDescriptorParams", "OvfParseDescriptorParams", "vim.OvfManager.CommonParams", "vim.version.version5", nil)
    create_data_type("vim.OvfManager.ParseDescriptorResult", "OvfParseDescriptorResult", "vmodl.DynamicData", "vim.version.version5", [["eula", "string[]", "vim.version.version5", {:optional => true}], ["network", "vim.OvfManager.NetworkInfo[]", "vim.version.version5", {:optional => true}], ["ipAllocationScheme", "string[]", "vim.version.version5", {:optional => true}], ["ipProtocols", "string[]", "vim.version.version5", {:optional => true}], ["property", "vim.vApp.PropertyInfo[]", "vim.version.version5", {:optional => true}], ["productInfo", "vim.vApp.ProductInfo", "vim.version.version5", {:optional => true}], ["annotation", "string", "vim.version.version5"], ["approximateDownloadSize", "long", "vim.version.version5", {:optional => true}], ["approximateFlatDeploymentSize", "long", "vim.version.version5", {:optional => true}], ["approximateSparseDeploymentSize", "long", "vim.version.version5", {:optional => true}], ["defaultEntityName", "string", "vim.version.version5"], ["virtualApp", "boolean", "vim.version.version5"], ["deploymentOption", "vim.OvfManager.DeploymentOption[]", "vim.version.version5", {:optional => true}], ["defaultDeploymentOption", "string", "vim.version.version5"], ["entityName", "vim.KeyValue[]", "vim.version.version6", {:optional => true}], ["annotatedOst", "vim.OvfConsumer.OstNode", "vim.version.version7", {:optional => true}], ["error", "vmodl.MethodFault[]", "vim.version.version5", {:optional => true}], ["warning", "vmodl.MethodFault[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.OvfManager.NetworkInfo", "OvfNetworkInfo", "vmodl.DynamicData", "vim.version.version5", [["name", "string", "vim.version.version5"], ["description", "string", "vim.version.version5"]])
    create_data_type("vim.OvfManager.CreateImportSpecParams", "OvfCreateImportSpecParams", "vim.OvfManager.CommonParams", "vim.version.version5", [["entityName", "string", "vim.version.version5"], ["hostSystem", "vim.HostSystem", "vim.version.version5", {:optional => true}], ["networkMapping", "vim.OvfManager.NetworkMapping[]", "vim.version.version5", {:optional => true}], ["ipAllocationPolicy", "string", "vim.version.version5", {:optional => true}], ["ipProtocol", "string", "vim.version.version5", {:optional => true}], ["propertyMapping", "vim.KeyValue[]", "vim.version.version5", {:optional => true}], ["resourceMapping", "vim.OvfManager.ResourceMap[]", "vim.version.version6", {:optional => true}], ["diskProvisioning", "string", "vim.version.version6", {:optional => true}], ["instantiationOst", "vim.OvfConsumer.OstNode", "vim.version.version7", {:optional => true}]])
    create_enum_type("vim.OvfManager.CreateImportSpecParams.DiskProvisioningType", "OvfCreateImportSpecParamsDiskProvisioningType", "vim.version.version6", ["monolithicSparse", "monolithicFlat", "twoGbMaxExtentSparse", "twoGbMaxExtentFlat", "thin", "thick", "seSparse", "eagerZeroedThick", "sparse", "flat"])
    create_data_type("vim.OvfManager.ResourceMap", "OvfResourceMap", "vmodl.DynamicData", "vim.version.version6", [["source", "string", "vim.version.version6"], ["parent", "vim.ResourcePool", "vim.version.version6", {:optional => true}], ["resourceSpec", "vim.ResourceConfigSpec", "vim.version.version6", {:optional => true}], ["datastore", "vim.Datastore", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.OvfManager.NetworkMapping", "OvfNetworkMapping", "vmodl.DynamicData", "vim.version.version5", [["name", "string", "vim.version.version5"], ["network", "vim.Network", "vim.version.version5"]])
    create_data_type("vim.OvfManager.CreateImportSpecResult", "OvfCreateImportSpecResult", "vmodl.DynamicData", "vim.version.version5", [["importSpec", "vim.ImportSpec", "vim.version.version5", {:optional => true}], ["fileItem", "vim.OvfManager.FileItem[]", "vim.version.version5", {:optional => true}], ["warning", "vmodl.MethodFault[]", "vim.version.version5", {:optional => true}], ["error", "vmodl.MethodFault[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.OvfManager.FileItem", "OvfFileItem", "vmodl.DynamicData", "vim.version.version5", [["deviceId", "string", "vim.version.version5"], ["path", "string", "vim.version.version5"], ["compressionMethod", "string", "vim.version.version5", {:optional => true}], ["chunkSize", "long", "vim.version.version5", {:optional => true}], ["size", "long", "vim.version.version5", {:optional => true}], ["cimType", "int", "vim.version.version5"], ["create", "boolean", "vim.version.version5"]])
    create_data_type("vim.OvfManager.CreateDescriptorParams", "OvfCreateDescriptorParams", "vmodl.DynamicData", "vim.version.version5", [["ovfFiles", "vim.OvfManager.OvfFile[]", "vim.version.version5", {:optional => true}], ["name", "string", "vim.version.version5", {:optional => true}], ["description", "string", "vim.version.version5", {:optional => true}], ["includeImageFiles", "boolean", "vim.version.version6", {:optional => true}], ["exportOption", "string[]", "vim.version.version8", {:optional => true}], ["snapshot", "vim.vm.Snapshot", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.OvfManager.CreateDescriptorResult", "OvfCreateDescriptorResult", "vmodl.DynamicData", "vim.version.version5", [["ovfDescriptor", "string", "vim.version.version5"], ["error", "vmodl.MethodFault[]", "vim.version.version5", {:optional => true}], ["warning", "vmodl.MethodFault[]", "vim.version.version5", {:optional => true}], ["includeImageFiles", "boolean", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.OvfManager.OvfFile", "OvfFile", "vmodl.DynamicData", "vim.version.version5", [["deviceId", "string", "vim.version.version5"], ["path", "string", "vim.version.version5"], ["compressionMethod", "string", "vim.version.version5", {:optional => true}], ["chunkSize", "long", "vim.version.version5", {:optional => true}], ["size", "long", "vim.version.version5"], ["capacity", "long", "vim.version.version6", {:optional => true}], ["populatedSize", "long", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.PasswordField", "PasswordField", "vmodl.DynamicData", "vim.version.version5", [["value", "string", "vim.version.version5"]])
    create_data_type("vim.PerformanceDescription", "PerformanceDescription", "vmodl.DynamicData", "vim.version.version1", [["counterType", "vim.ElementDescription[]", "vim.version.version1"], ["statsType", "vim.ElementDescription[]", "vim.version.version1"]])
    create_managed_type("vim.PerformanceManager", "PerformanceManager", "vmodl.ManagedObject", "vim.version.version1", [["description", "vim.PerformanceDescription", "vim.version.version1", {}, "System.View"], ["historicalInterval", "vim.HistoricalInterval[]", "vim.version.version1", {:optional => true}, "System.View"], ["perfCounter", "vim.PerformanceManager.CounterInfo[]", "vim.version.version1", {:optional => true}, "System.View"]], [["queryProviderSummary", "QueryPerfProviderSummary", "vim.version.version1", [["entity", "vmodl.ManagedObject", "vim.version.version1", {}, nil]], [{}, "vim.PerformanceManager.ProviderSummary", "vim.PerformanceManager.ProviderSummary"], "System.Read", nil], ["queryAvailableMetric", "QueryAvailablePerfMetric", "vim.version.version1", [["entity", "vmodl.ManagedObject", "vim.version.version1", {}, nil], ["beginTime", "vmodl.DateTime", "vim.version.version1", {:optional => true}, nil], ["endTime", "vmodl.DateTime", "vim.version.version1", {:optional => true}, nil], ["intervalId", "int", "vim.version.version1", {:optional => true}, nil]], [{:optional => true}, "vim.PerformanceManager.MetricId[]", "vim.PerformanceManager.MetricId[]"], "System.Read", nil], ["queryCounter", "QueryPerfCounter", "vim.version.version1", [["counterId", "int[]", "vim.version.version1", {}, nil]], [{:optional => true}, "vim.PerformanceManager.CounterInfo[]", "vim.PerformanceManager.CounterInfo[]"], "System.View", nil], ["queryCounterByLevel", "QueryPerfCounterByLevel", "vim.version.version2", [["level", "int", "vim.version.version2", {}, nil]], [{}, "vim.PerformanceManager.CounterInfo[]", "vim.PerformanceManager.CounterInfo[]"], "System.View", nil], ["queryStats", "QueryPerf", "vim.version.version1", [["querySpec", "vim.PerformanceManager.QuerySpec[]", "vim.version.version1", {}, nil]], [{:optional => true}, "vim.PerformanceManager.EntityMetricBase[]", "vim.PerformanceManager.EntityMetricBase[]"], "System.View", nil], ["queryCompositeStats", "QueryPerfComposite", "vim.version.version1", [["querySpec", "vim.PerformanceManager.QuerySpec", "vim.version.version1", {}, nil]], [{}, "vim.PerformanceManager.CompositeEntityMetric", "vim.PerformanceManager.CompositeEntityMetric"], "System.View", nil], ["createHistoricalInterval", "CreatePerfInterval", "vim.version.version1", [["intervalId", "vim.HistoricalInterval", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Performance.ModifyIntervals", nil], ["removeHistoricalInterval", "RemovePerfInterval", "vim.version.version1", [["samplePeriod", "int", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Performance.ModifyIntervals", nil], ["updateHistoricalInterval", "UpdatePerfInterval", "vim.version.version1", [["interval", "vim.HistoricalInterval", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Performance.ModifyIntervals", nil], ["updateCounterLevelMapping", "UpdateCounterLevelMapping", "vim.version.version6", [["counterLevelMap", "vim.PerformanceManager.CounterLevelMapping[]", "vim.version.version6", {}, nil]], [{}, "void", "void"], "Performance.ModifyIntervals", nil], ["resetCounterLevelMapping", "ResetCounterLevelMapping", "vim.version.version6", [["counters", "int[]", "vim.version.version6", {}, nil]], [{}, "void", "void"], "Performance.ModifyIntervals", nil]])
    create_enum_type("vim.PerformanceManager.Format", "PerfFormat", "vim.version.version1", ["normal", "csv"])
    create_data_type("vim.PerformanceManager.ProviderSummary", "PerfProviderSummary", "vmodl.DynamicData", "vim.version.version1", [["entity", "vmodl.ManagedObject", "vim.version.version1"], ["currentSupported", "boolean", "vim.version.version1"], ["summarySupported", "boolean", "vim.version.version1"], ["refreshRate", "int", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.PerformanceManager.CounterInfo", "PerfCounterInfo", "vmodl.DynamicData", "vim.version.version1", [["key", "int", "vim.version.version1"], ["nameInfo", "vim.ElementDescription", "vim.version.version1"], ["groupInfo", "vim.ElementDescription", "vim.version.version1"], ["unitInfo", "vim.ElementDescription", "vim.version.version1"], ["rollupType", "vim.PerformanceManager.CounterInfo.RollupType", "vim.version.version1"], ["statsType", "vim.PerformanceManager.CounterInfo.StatsType", "vim.version.version1"], ["level", "int", "vim.version.version2", {:optional => true}], ["perDeviceLevel", "int", "vim.version.version6", {:optional => true}], ["associatedCounterId", "int[]", "vim.version.version1", {:optional => true}]])
    create_enum_type("vim.PerformanceManager.CounterInfo.RollupType", "PerfSummaryType", "vim.version.version1", ["average", "maximum", "minimum", "latest", "summation", "none"])
    create_enum_type("vim.PerformanceManager.CounterInfo.StatsType", "PerfStatsType", "vim.version.version1", ["absolute", "delta", "rate"])
    create_enum_type("vim.PerformanceManager.CounterInfo.Unit", "PerformanceManagerUnit", "vim.version.version1", ["percent", "kiloBytes", "megaBytes", "megaHertz", "number", "microsecond", "millisecond", "second", "kiloBytesPerSecond", "megaBytesPerSecond", "watt", "joule"])
    create_data_type("vim.PerformanceManager.MetricId", "PerfMetricId", "vmodl.DynamicData", "vim.version.version1", [["counterId", "int", "vim.version.version1"], ["instance", "string", "vim.version.version1"]])
    create_data_type("vim.PerformanceManager.QuerySpec", "PerfQuerySpec", "vmodl.DynamicData", "vim.version.version1", [["entity", "vmodl.ManagedObject", "vim.version.version1"], ["startTime", "vmodl.DateTime", "vim.version.version1", {:optional => true}], ["endTime", "vmodl.DateTime", "vim.version.version1", {:optional => true}], ["maxSample", "int", "vim.version.version1", {:optional => true}], ["metricId", "vim.PerformanceManager.MetricId[]", "vim.version.version1", {:optional => true}], ["intervalId", "int", "vim.version.version1", {:optional => true}], ["format", "string", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.PerformanceManager.SampleInfo", "PerfSampleInfo", "vmodl.DynamicData", "vim.version.version1", [["timestamp", "vmodl.DateTime", "vim.version.version1"], ["interval", "int", "vim.version.version1"]])
    create_data_type("vim.PerformanceManager.MetricSeries", "PerfMetricSeries", "vmodl.DynamicData", "vim.version.version1", [["id", "vim.PerformanceManager.MetricId", "vim.version.version1"]])
    create_data_type("vim.PerformanceManager.IntSeries", "PerfMetricIntSeries", "vim.PerformanceManager.MetricSeries", "vim.version.version1", [["value", "long[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.PerformanceManager.MetricSeriesCSV", "PerfMetricSeriesCSV", "vim.PerformanceManager.MetricSeries", "vim.version.version1", [["value", "string", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.PerformanceManager.EntityMetricBase", "PerfEntityMetricBase", "vmodl.DynamicData", "vim.version.version1", [["entity", "vmodl.ManagedObject", "vim.version.version1"]])
    create_data_type("vim.PerformanceManager.EntityMetric", "PerfEntityMetric", "vim.PerformanceManager.EntityMetricBase", "vim.version.version1", [["sampleInfo", "vim.PerformanceManager.SampleInfo[]", "vim.version.version1", {:optional => true}], ["value", "vim.PerformanceManager.MetricSeries[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.PerformanceManager.EntityMetricCSV", "PerfEntityMetricCSV", "vim.PerformanceManager.EntityMetricBase", "vim.version.version1", [["sampleInfoCSV", "string", "vim.version.version1"], ["value", "vim.PerformanceManager.MetricSeriesCSV[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.PerformanceManager.CompositeEntityMetric", "PerfCompositeMetric", "vmodl.DynamicData", "vim.version.version1", [["entity", "vim.PerformanceManager.EntityMetricBase", "vim.version.version1", {:optional => true}], ["childEntity", "vim.PerformanceManager.EntityMetricBase[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.PerformanceManager.CounterLevelMapping", "PerformanceManagerCounterLevelMapping", "vmodl.DynamicData", "vim.version.version6", [["counterId", "int", "vim.version.version6"], ["aggregateLevel", "int", "vim.version.version6", {:optional => true}], ["perDeviceLevel", "int", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.HistoricalInterval", "PerfInterval", "vmodl.DynamicData", "vim.version.version1", [["key", "int", "vim.version.version2"], ["samplingPeriod", "int", "vim.version.version1"], ["name", "string", "vim.version.version1"], ["length", "int", "vim.version.version1"], ["level", "int", "vim.version.version2", {:optional => true}], ["enabled", "boolean", "vim.version.version2"]])
    create_data_type("vim.PrivilegePolicyDef", "PrivilegePolicyDef", "vmodl.DynamicData", "vim.version.version2", [["createPrivilege", "string", "vim.version.version2"], ["readPrivilege", "string", "vim.version.version2"], ["updatePrivilege", "string", "vim.version.version2"], ["deletePrivilege", "string", "vim.version.version2"]])
    create_enum_type("vim.ProxyService.AccessMode", "ProxyServiceAccessMode", "vim.version.version2", ["httpOnly", "httpsOnly", "httpsWithRedirect", "httpAndHttps"])
    create_enum_type("vim.ProxyService.RedirectSpec.RedirectType", "ProxyServiceRedirectSpecRedirectType", "vim.version.version7", ["permanent", "found"])
    create_data_type("vim.ResourceAllocationInfo", "ResourceAllocationInfo", "vmodl.DynamicData", "vim.version.version1", [["reservation", "long", "vim.version.version1", {:optional => true}], ["expandableReservation", "boolean", "vim.version.version1", {:optional => true}], ["limit", "long", "vim.version.version1", {:optional => true}], ["shares", "vim.SharesInfo", "vim.version.version1", {:optional => true}], ["overheadLimit", "long", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.ResourceAllocationOption", "ResourceAllocationOption", "vmodl.DynamicData", "vim.version.version6", [["sharesOption", "vim.SharesOption", "vim.version.version6"]])
    create_data_type("vim.ResourceConfigOption", "ResourceConfigOption", "vmodl.DynamicData", "vim.version.version6", [["cpuAllocationOption", "vim.ResourceAllocationOption", "vim.version.version6"], ["memoryAllocationOption", "vim.ResourceAllocationOption", "vim.version.version6"]])
    create_data_type("vim.ResourceConfigSpec", "ResourceConfigSpec", "vmodl.DynamicData", "vim.version.version1", [["entity", "vim.ManagedEntity", "vim.version.version1", {:optional => true}], ["changeVersion", "string", "vim.version.version1", {:optional => true}], ["lastModified", "vmodl.DateTime", "vim.version.version1", {:optional => true}], ["cpuAllocation", "vim.ResourceAllocationInfo", "vim.version.version1"], ["memoryAllocation", "vim.ResourceAllocationInfo", "vim.version.version1"]])
    create_managed_type("vim.ResourcePlanningManager", "ResourcePlanningManager", "vmodl.ManagedObject", "vim.version.version5", nil, [["estimateDatabaseSize", "EstimateDatabaseSize", "vim.version.version5", [["dbSizeParam", "vim.ResourcePlanningManager.DatabaseSizeParam", "vim.version.version5", {}, nil]], [{}, "vim.ResourcePlanningManager.DatabaseSizeEstimate", "vim.ResourcePlanningManager.DatabaseSizeEstimate"], "System.Read", nil]])
    create_data_type("vim.ResourcePlanningManager.DatabaseSizeParam", "DatabaseSizeParam", "vmodl.DynamicData", "vim.version.version5", [["inventoryDesc", "vim.ResourcePlanningManager.InventoryDescription", "vim.version.version5"], ["perfStatsDesc", "vim.ResourcePlanningManager.PerfStatsDescription", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.ResourcePlanningManager.InventoryDescription", "InventoryDescription", "vmodl.DynamicData", "vim.version.version5", [["numHosts", "int", "vim.version.version5"], ["numVirtualMachines", "int", "vim.version.version5"], ["numResourcePools", "int", "vim.version.version5", {:optional => true}], ["numClusters", "int", "vim.version.version5", {:optional => true}], ["numCpuDev", "int", "vim.version.version5", {:optional => true}], ["numNetDev", "int", "vim.version.version5", {:optional => true}], ["numDiskDev", "int", "vim.version.version5", {:optional => true}], ["numvCpuDev", "int", "vim.version.version5", {:optional => true}], ["numvNetDev", "int", "vim.version.version5", {:optional => true}], ["numvDiskDev", "int", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.ResourcePlanningManager.PerfStatsDescription", "PerformanceStatisticsDescription", "vmodl.DynamicData", "vim.version.version5", [["intervals", "vim.HistoricalInterval[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.ResourcePlanningManager.DatabaseSizeEstimate", "DatabaseSizeEstimate", "vmodl.DynamicData", "vim.version.version5", [["size", "long", "vim.version.version5"]])
    create_managed_type("vim.SearchIndex", "SearchIndex", "vmodl.ManagedObject", "vim.version.version1", nil, [["findByUuid", "FindByUuid", "vim.version.version1", [["datacenter", "vim.Datacenter", "vim.version.version1", {:optional => true}, nil], ["uuid", "string", "vim.version.version1", {}, nil], ["vmSearch", "boolean", "vim.version.version1", {}, nil], ["instanceUuid", "boolean", "vim.version.version5", {:optional => true}, nil]], [{:optional => true}, "vim.ManagedEntity", "vim.ManagedEntity"], "System.View", nil], ["findByDatastorePath", "FindByDatastorePath", "vim.version.version1", [["datacenter", "vim.Datacenter", "vim.version.version1", {}, nil], ["path", "string", "vim.version.version1", {}, nil]], [{:optional => true}, "vim.VirtualMachine", "vim.VirtualMachine"], "System.View", ["vim.fault.InvalidDatastore"]], ["findByDnsName", "FindByDnsName", "vim.version.version1", [["datacenter", "vim.Datacenter", "vim.version.version1", {:optional => true}, nil], ["dnsName", "string", "vim.version.version1", {}, nil], ["vmSearch", "boolean", "vim.version.version1", {}, nil]], [{:optional => true}, "vim.ManagedEntity", "vim.ManagedEntity"], "System.View", nil], ["findByIp", "FindByIp", "vim.version.version1", [["datacenter", "vim.Datacenter", "vim.version.version1", {:optional => true}, nil], ["ip", "string", "vim.version.version1", {}, nil], ["vmSearch", "boolean", "vim.version.version1", {}, nil]], [{:optional => true}, "vim.ManagedEntity", "vim.ManagedEntity"], "System.View", nil], ["findByInventoryPath", "FindByInventoryPath", "vim.version.version1", [["inventoryPath", "string", "vim.version.version1", {}, nil]], [{:optional => true}, "vim.ManagedEntity", "vim.ManagedEntity"], "System.View", nil], ["findChild", "FindChild", "vim.version.version1", [["entity", "vim.ManagedEntity", "vim.version.version1", {}, nil], ["name", "string", "vim.version.version1", {}, nil]], [{:optional => true}, "vim.ManagedEntity", "vim.ManagedEntity"], "System.View", nil], ["findAllByUuid", "FindAllByUuid", "vim.version.version5", [["datacenter", "vim.Datacenter", "vim.version.version5", {:optional => true}, nil], ["uuid", "string", "vim.version.version5", {}, nil], ["vmSearch", "boolean", "vim.version.version5", {}, nil], ["instanceUuid", "boolean", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.ManagedEntity[]", "vim.ManagedEntity[]"], "System.View", nil], ["findAllByDnsName", "FindAllByDnsName", "vim.version.version5", [["datacenter", "vim.Datacenter", "vim.version.version5", {:optional => true}, nil], ["dnsName", "string", "vim.version.version5", {}, nil], ["vmSearch", "boolean", "vim.version.version5", {}, nil]], [{}, "vim.ManagedEntity[]", "vim.ManagedEntity[]"], "System.View", nil], ["findAllByIp", "FindAllByIp", "vim.version.version5", [["datacenter", "vim.Datacenter", "vim.version.version5", {:optional => true}, nil], ["ip", "string", "vim.version.version5", {}, nil], ["vmSearch", "boolean", "vim.version.version5", {}, nil]], [{}, "vim.ManagedEntity[]", "vim.ManagedEntity[]"], "System.View", nil]])
    create_data_type("vim.SelectionSet", "SelectionSet", "vmodl.DynamicData", "vim.version.version7", nil)
    create_enum_type("vim.ServiceDirectory.ServiceProtocol", "ServiceProtocol", "vim.version.version5", ["vimApi", "vimWebServices", "viImageLibrary", "unknown"])
    create_data_type("vim.ServiceInstanceContent", "ServiceContent", "vmodl.DynamicData", "vim.version.version1", [["rootFolder", "vim.Folder", "vim.version.version1"], ["propertyCollector", "vmodl.query.PropertyCollector", "vim.version.version1"], ["viewManager", "vim.view.ViewManager", "vim.version.version2", {:optional => true}], ["about", "vim.AboutInfo", "vim.version.version1"], ["setting", "vim.option.OptionManager", "vim.version.version1", {:optional => true}], ["userDirectory", "vim.UserDirectory", "vim.version.version1", {:optional => true}], ["sessionManager", "vim.SessionManager", "vim.version.version1", {:optional => true}], ["authorizationManager", "vim.AuthorizationManager", "vim.version.version1", {:optional => true}], ["serviceManager", "vim.ServiceManager", "vim.version.version8", {:optional => true}], ["perfManager", "vim.PerformanceManager", "vim.version.version1", {:optional => true}], ["scheduledTaskManager", "vim.scheduler.ScheduledTaskManager", "vim.version.version1", {:optional => true}], ["alarmManager", "vim.alarm.AlarmManager", "vim.version.version1", {:optional => true}], ["eventManager", "vim.event.EventManager", "vim.version.version1", {:optional => true}], ["taskManager", "vim.TaskManager", "vim.version.version1", {:optional => true}], ["extensionManager", "vim.ExtensionManager", "vim.version.version2", {:optional => true}], ["customizationSpecManager", "vim.CustomizationSpecManager", "vim.version.version1", {:optional => true}], ["customFieldsManager", "vim.CustomFieldsManager", "vim.version.version1", {:optional => true}], ["accountManager", "vim.host.LocalAccountManager", "vim.version.version1", {:optional => true}], ["diagnosticManager", "vim.DiagnosticManager", "vim.version.version1", {:optional => true}], ["licenseManager", "vim.LicenseManager", "vim.version.version1", {:optional => true}], ["searchIndex", "vim.SearchIndex", "vim.version.version1", {:optional => true}], ["fileManager", "vim.FileManager", "vim.version.version2", {:optional => true}], ["datastoreNamespaceManager", "vim.DatastoreNamespaceManager", "vim.version.version9", {:optional => true}], ["virtualDiskManager", "vim.VirtualDiskManager", "vim.version.version2", {:optional => true}], ["virtualizationManager", "vim.VirtualizationManager", "vim.version.version2", {:optional => true}], ["snmpSystem", "vim.host.SnmpSystem", "vim.version.version5", {:optional => true}], ["vmProvisioningChecker", "vim.vm.check.ProvisioningChecker", "vim.version.version5", {:optional => true}], ["vmCompatibilityChecker", "vim.vm.check.CompatibilityChecker", "vim.version.version5", {:optional => true}], ["ovfManager", "vim.OvfManager", "vim.version.version5", {:optional => true}], ["ipPoolManager", "vim.IpPoolManager", "vim.version.version5", {:optional => true}], ["dvSwitchManager", "vim.dvs.DistributedVirtualSwitchManager", "vim.version.version5", {:optional => true}], ["hostProfileManager", "vim.profile.host.ProfileManager", "vim.version.version5", {:optional => true}], ["clusterProfileManager", "vim.profile.cluster.ProfileManager", "vim.version.version5", {:optional => true}], ["complianceManager", "vim.profile.ComplianceManager", "vim.version.version5", {:optional => true}], ["localizationManager", "vim.LocalizationManager", "vim.version.version5", {:optional => true}], ["storageResourceManager", "vim.StorageResourceManager", "vim.version.version6", {:optional => true}], ["guestOperationsManager", "vim.vm.guest.GuestOperationsManager", "vim.version.version7", {:optional => true}]])
    create_managed_type("vim.ServiceManager", "ServiceManager", "vmodl.ManagedObject", "vim.version.version2", [["service", "vim.ServiceManager.ServiceInfo[]", "vim.version.version2", {:optional => true}, "Global.ServiceManagers"]], [["queryServiceList", "QueryServiceList", "vim.version.version2", [["serviceName", "string", "vim.version.version2", {:optional => true}, nil], ["location", "string[]", "vim.version.version2", {:optional => true}, nil]], [{:optional => true}, "vim.ServiceManager.ServiceInfo[]", "vim.ServiceManager.ServiceInfo[]"], "Global.ServiceManagers", nil]])
    create_data_type("vim.ServiceManager.ServiceInfo", "ServiceManagerServiceInfo", "vmodl.DynamicData", "vim.version.version1", [["serviceName", "string", "vim.version.version1"], ["location", "string[]", "vim.version.version1", {:optional => true}], ["service", "vmodl.ManagedObject", "vim.version.version1"], ["description", "string", "vim.version.version1"]])
    create_managed_type("vim.SessionManager", "SessionManager", "vmodl.ManagedObject", "vim.version.version1", [["sessionList", "vim.UserSession[]", "vim.version.version1", {:optional => true}, "Sessions.TerminateSession"], ["currentSession", "vim.UserSession", "vim.version.version1", {:optional => true}, "System.Anonymous"], ["message", "string", "vim.version.version1", {:optional => true}, "System.View"], ["messageLocaleList", "string[]", "vim.version.version1", {:optional => true}, "System.Anonymous"], ["supportedLocaleList", "string[]", "vim.version.version1", {:optional => true}, "System.Anonymous"], ["defaultLocale", "string", "vim.version.version1", {}, "System.Anonymous"]], [["updateMessage", "UpdateServiceMessage", "vim.version.version1", [["message", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Sessions.GlobalMessage", nil], ["loginByToken", "LoginByToken", "vim.version.version8", [["locale", "string", "vim.version.version8", {:optional => true}, nil]], [{}, "vim.UserSession", "vim.UserSession"], "System.Anonymous", ["vim.fault.InvalidLogin", "vim.fault.InvalidLocale"]], ["login", "Login", "vim.version.version1", [["userName", "string", "vim.version.version1", {}, nil], ["password", "string", "vim.version.version1", {}, nil], ["locale", "string", "vim.version.version1", {:optional => true}, nil]], [{}, "vim.UserSession", "vim.UserSession"], "System.Anonymous", ["vim.fault.InvalidLogin", "vim.fault.InvalidLocale"]], ["loginBySSPI", "LoginBySSPI", "vim.version.version2", [["base64Token", "string", "vim.version.version2", {}, nil], ["locale", "string", "vim.version.version2", {:optional => true}, nil]], [{}, "vim.UserSession", "vim.UserSession"], "System.Anonymous", ["vim.fault.SSPIChallenge", "vim.fault.InvalidLogin", "vim.fault.InvalidLocale"]], ["logout", "Logout", "vim.version.version1", [], [{}, "void", "void"], "System.View", nil], ["acquireLocalTicket", "AcquireLocalTicket", "vim.version.version1", [["userName", "string", "vim.version.version1", {}, nil]], [{}, "vim.SessionManager.LocalTicket", "vim.SessionManager.LocalTicket"], "System.Anonymous", ["vim.fault.InvalidLogin"]], ["acquireGenericServiceTicket", "AcquireGenericServiceTicket", "vim.version.version7", [["spec", "vim.SessionManager.ServiceRequestSpec", "vim.version.version7", {}, nil]], [{}, "vim.SessionManager.GenericServiceTicket", "vim.SessionManager.GenericServiceTicket"], "System.Anonymous", nil], ["terminate", "TerminateSession", "vim.version.version1", [["sessionId", "string[]", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Sessions.TerminateSession", ["vim.fault.NotFound"]], ["setLocale", "SetLocale", "vim.version.version1", [["locale", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], "System.View", ["vim.fault.InvalidLocale"]], ["loginExtensionBySubjectName", "LoginExtensionBySubjectName", "vim.version.version2", [["extensionKey", "string", "vim.version.version2", {}, nil], ["locale", "string", "vim.version.version2", {:optional => true}, nil]], [{}, "vim.UserSession", "vim.UserSession"], "System.Anonymous", ["vim.fault.InvalidLogin", "vim.fault.InvalidLocale", "vim.fault.NotFound", "vim.fault.NoClientCertificate", "vim.fault.NoSubjectName"]], ["loginExtensionByCertificate", "LoginExtensionByCertificate", "vim.version.version5", [["extensionKey", "string", "vim.version.version5", {}, nil], ["locale", "string", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.UserSession", "vim.UserSession"], "System.Anonymous", ["vim.fault.InvalidLogin", "vim.fault.InvalidLocale", "vim.fault.NoClientCertificate"]], ["impersonateUser", "ImpersonateUser", "vim.version.version2", [["userName", "string", "vim.version.version2", {}, nil], ["locale", "string", "vim.version.version2", {:optional => true}, nil]], [{}, "vim.UserSession", "vim.UserSession"], "Sessions.ImpersonateUser", ["vim.fault.InvalidLogin", "vim.fault.InvalidLocale"]], ["sessionIsActive", "SessionIsActive", "vim.version.version2", [["sessionID", "string", "vim.version.version2", {}, nil], ["userName", "string", "vim.version.version2", {}, nil]], [{}, "boolean", "boolean"], "Sessions.ValidateSession", nil], ["acquireCloneTicket", "AcquireCloneTicket", "vim.version.version3", [], [{}, "string", "string"], "System.View", nil], ["cloneSession", "CloneSession", "vim.version.version3", [["cloneTicket", "string", "vim.version.version3", {}, nil]], [{}, "vim.UserSession", "vim.UserSession"], "System.Anonymous", ["vim.fault.InvalidLogin"]]])
    create_data_type("vim.SessionManager.LocalTicket", "SessionManagerLocalTicket", "vmodl.DynamicData", "vim.version.version1", [["userName", "string", "vim.version.version1"], ["passwordFilePath", "string", "vim.version.version1"]])
    create_data_type("vim.SessionManager.GenericServiceTicket", "SessionManagerGenericServiceTicket", "vmodl.DynamicData", "vim.version.version7", [["id", "string", "vim.version.version7"], ["hostName", "string", "vim.version.version8", {:optional => true}], ["sslThumbprint", "string", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.SessionManager.ServiceRequestSpec", "SessionManagerServiceRequestSpec", "vmodl.DynamicData", "vim.version.version7", nil)
    create_data_type("vim.SessionManager.VmomiServiceRequestSpec", "SessionManagerVmomiServiceRequestSpec", "vim.SessionManager.ServiceRequestSpec", "vim.version.version8", [["method", "vmodl.MethodName", "vim.version.version8"]])
    create_data_type("vim.SessionManager.HttpServiceRequestSpec", "SessionManagerHttpServiceRequestSpec", "vim.SessionManager.ServiceRequestSpec", "vim.version.version7", [["method", "string", "vim.version.version7", {:optional => true}], ["url", "string", "vim.version.version7"]])
    create_enum_type("vim.SessionManager.HttpServiceRequestSpec.Method", "SessionManagerHttpServiceRequestSpecMethod", "vim.version.version7", ["httpOptions", "httpGet", "httpHead", "httpPost", "httpPut", "httpDelete", "httpTrace", "httpConnect"])
    create_data_type("vim.SharesInfo", "SharesInfo", "vmodl.DynamicData", "vim.version.version1", [["shares", "int", "vim.version.version1"], ["level", "vim.SharesInfo.Level", "vim.version.version1"]])
    create_enum_type("vim.SharesInfo.Level", "SharesLevel", "vim.version.version1", ["low", "normal", "high", "custom"])
    create_data_type("vim.SharesOption", "SharesOption", "vmodl.DynamicData", "vim.version.version6", [["sharesOption", "vim.option.IntOption", "vim.version.version6"], ["defaultLevel", "vim.SharesInfo.Level", "vim.version.version6"]])
    create_managed_type("vim.SimpleCommand", "SimpleCommand", "vmodl.ManagedObject", "vim.version.version2", [["encodingType", "vim.SimpleCommand.Encoding", "vim.version.version2", {}, nil], ["entity", "vim.ServiceManager.ServiceInfo", "vim.version.version2", {}, nil]], [["Execute", "ExecuteSimpleCommand", "vim.version.version2", [["arguments", "string[]", "vim.version.version2", {:optional => true}, nil]], [{}, "string", "string"], "Global.ServiceManagers", nil]])
    create_enum_type("vim.SimpleCommand.Encoding", "SimpleCommandEncoding", "vim.version.version2", ["CSV", "HEX", "STRING"])
    create_managed_type("vim.StorageResourceManager", "StorageResourceManager", "vmodl.ManagedObject", "vim.version.version6", nil, [["ConfigureDatastoreIORM", "ConfigureDatastoreIORM_Task", "vim.version.version6", [["datastore", "vim.Datastore", "vim.version.version6", {}, "Datastore.Config"], ["spec", "vim.StorageResourceManager.IORMConfigSpec", "vim.version.version6", {}, nil]], [{}, "vim.Task", "void"], nil, ["vim.fault.IORMNotSupportedHostOnDatastore", "vim.fault.InaccessibleDatastore"]], ["QueryIORMConfigOption", "QueryIORMConfigOption", "vim.version.version6", [["host", "vim.HostSystem", "vim.version.version6", {}, nil]], [{}, "vim.StorageResourceManager.IORMConfigOption", "vim.StorageResourceManager.IORMConfigOption"], "Datastore.Config", nil], ["queryDatastorePerformanceSummary", "QueryDatastorePerformanceSummary", "vim.version.version8", [["datastore", "vim.Datastore", "vim.version.version8", {}, nil]], [{:optional => true}, "vim.StorageResourceManager.StoragePerformanceSummary[]", "vim.StorageResourceManager.StoragePerformanceSummary[]"], "System.View", ["vim.fault.NotFound"]], ["applyRecommendationToPod", "ApplyStorageDrsRecommendationToPod_Task", "vim.version.version7", [["pod", "vim.StoragePod", "vim.version.version7", {}, nil], ["key", "string", "vim.version.version7", {}, nil]], [{}, "vim.Task", "vim.storageDrs.ApplyRecommendationResult"], "System.View", nil], ["applyRecommendation", "ApplyStorageDrsRecommendation_Task", "vim.version.version7", [["key", "string[]", "vim.version.version7", {}, nil]], [{}, "vim.Task", "vim.storageDrs.ApplyRecommendationResult"], "System.View", nil], ["cancelRecommendation", "CancelStorageDrsRecommendation", "vim.version.version7", [["key", "string[]", "vim.version.version7", {}, nil]], [{}, "void", "void"], "System.View", nil], ["refreshRecommendation", "RefreshStorageDrsRecommendation", "vim.version.version7", [["pod", "vim.StoragePod", "vim.version.version7", {}, nil]], [{}, "void", "void"], "System.View", nil], ["configureStorageDrsForPod", "ConfigureStorageDrsForPod_Task", "vim.version.version7", [["pod", "vim.StoragePod", "vim.version.version7", {}, "StoragePod.Config"], ["spec", "vim.storageDrs.ConfigSpec", "vim.version.version7", {}, nil], ["modify", "boolean", "vim.version.version7", {}, nil]], [{}, "vim.Task", "void"], nil, nil], ["recommendDatastores", "RecommendDatastores", "vim.version.version7", [["storageSpec", "vim.storageDrs.StoragePlacementSpec", "vim.version.version7", {}, nil]], [{}, "vim.storageDrs.StoragePlacementResult", "vim.storageDrs.StoragePlacementResult"], "System.View", nil]])
    create_data_type("vim.StorageResourceManager.IOAllocationInfo", "StorageIOAllocationInfo", "vmodl.DynamicData", "vim.version.version6", [["limit", "long", "vim.version.version6", {:optional => true}], ["shares", "vim.SharesInfo", "vim.version.version6", {:optional => true}], ["reservation", "int", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.StorageResourceManager.IOAllocationOption", "StorageIOAllocationOption", "vmodl.DynamicData", "vim.version.version6", [["limitOption", "vim.option.LongOption", "vim.version.version6"], ["sharesOption", "vim.SharesOption", "vim.version.version6"]])
    create_enum_type("vim.StorageResourceManager.CongestionThresholdMode", "StorageIORMThresholdMode", "vim.version.version8", ["automatic", "manual"])
    create_data_type("vim.StorageResourceManager.IORMConfigInfo", "StorageIORMInfo", "vmodl.DynamicData", "vim.version.version6", [["enabled", "boolean", "vim.version.version6"], ["congestionThresholdMode", "string", "vim.version.version8"], ["congestionThreshold", "int", "vim.version.version6"], ["percentOfPeakThroughput", "int", "vim.version.version8", {:optional => true}], ["statsCollectionEnabled", "boolean", "vim.version.version7"], ["statsAggregationDisabled", "boolean", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.StorageResourceManager.IORMConfigSpec", "StorageIORMConfigSpec", "vmodl.DynamicData", "vim.version.version6", [["enabled", "boolean", "vim.version.version6", {:optional => true}], ["congestionThresholdMode", "string", "vim.version.version8", {:optional => true}], ["congestionThreshold", "int", "vim.version.version6", {:optional => true}], ["percentOfPeakThroughput", "int", "vim.version.version8", {:optional => true}], ["statsCollectionEnabled", "boolean", "vim.version.version7", {:optional => true}], ["statsAggregationDisabled", "boolean", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.StorageResourceManager.IORMConfigOption", "StorageIORMConfigOption", "vmodl.DynamicData", "vim.version.version6", [["enabledOption", "vim.option.BoolOption", "vim.version.version6"], ["congestionThresholdOption", "vim.option.IntOption", "vim.version.version6"], ["statsCollectionEnabledOption", "vim.option.BoolOption", "vim.version.version7"]])
    create_data_type("vim.StorageResourceManager.StoragePerformanceSummary", "StoragePerformanceSummary", "vmodl.DynamicData", "vim.version.version8", [["interval", "int", "vim.version.version8"], ["percentile", "int[]", "vim.version.version8"], ["datastoreReadLatency", "double[]", "vim.version.version8"], ["datastoreWriteLatency", "double[]", "vim.version.version8"], ["datastoreVmLatency", "double[]", "vim.version.version8"], ["datastoreReadIops", "double[]", "vim.version.version8"], ["datastoreWriteIops", "double[]", "vim.version.version8"], ["siocActivityDuration", "int", "vim.version.version8"]])
    create_data_type("vim.StorageResourceManager.PodStorageDrsEntry", "PodStorageDrsEntry", "vmodl.DynamicData", "vim.version.version7", [["storageDrsConfig", "vim.storageDrs.ConfigInfo", "vim.version.version7"], ["recommendation", "vim.cluster.Recommendation[]", "vim.version.version7", {:optional => true}], ["drsFault", "vim.cluster.DrsFaults[]", "vim.version.version7", {:optional => true}], ["actionHistory", "vim.cluster.ActionHistory[]", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.StringExpression", "StringExpression", "vim.NegatableExpression", "vim.version.version9", [["value", "string", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.StringPolicy", "StringPolicy", "vim.InheritablePolicy", "vim.version.version5", [["value", "string", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.Tag", "Tag", "vmodl.DynamicData", "vim.version.version5", [["key", "string", "vim.version.version5"]])
    create_data_type("vim.TaskDescription", "TaskDescription", "vmodl.DynamicData", "vim.version.version1", [["methodInfo", "vim.ElementDescription[]", "vim.version.version1"], ["state", "vim.ElementDescription[]", "vim.version.version1"], ["reason", "vim.TypeDescription[]", "vim.version.version1"]])
    create_managed_type("vim.TaskHistoryCollector", "TaskHistoryCollector", "vim.HistoryCollector", "vim.version.version1", [["latestPage", "vim.TaskInfo[]", "vim.version.version1", {:optional => true}, nil]], [["readNext", "ReadNextTasks", "vim.version.version1", [["maxCount", "int", "vim.version.version1", {}, nil]], [{:optional => true}, "vim.TaskInfo[]", "vim.TaskInfo[]"], nil, nil], ["readPrev", "ReadPreviousTasks", "vim.version.version1", [["maxCount", "int", "vim.version.version1", {}, nil]], [{:optional => true}, "vim.TaskInfo[]", "vim.TaskInfo[]"], nil, nil]])
    create_data_type("vim.TaskInfo", "TaskInfo", "vmodl.DynamicData", "vim.version.version1", [["key", "string", "vim.version.version1"], ["task", "vim.Task", "vim.version.version1"], ["description", "vmodl.LocalizableMessage", "vim.version.version5", {:optional => true}], ["name", "vmodl.MethodName", "vim.version.version1", {:optional => true}], ["descriptionId", "string", "vim.version.version1"], ["entity", "vim.ManagedEntity", "vim.version.version1", {:optional => true}], ["entityName", "string", "vim.version.version1", {:optional => true}], ["locked", "vim.ManagedEntity[]", "vim.version.version1", {:optional => true}], ["state", "vim.TaskInfo.State", "vim.version.version1"], ["cancelled", "boolean", "vim.version.version1"], ["cancelable", "boolean", "vim.version.version1"], ["error", "vmodl.MethodFault", "vim.version.version1", {:optional => true}], ["result", "anyType", "vim.version.version1", {:optional => true}], ["progress", "int", "vim.version.version1", {:optional => true}], ["reason", "vim.TaskReason", "vim.version.version1"], ["queueTime", "vmodl.DateTime", "vim.version.version1"], ["startTime", "vmodl.DateTime", "vim.version.version1", {:optional => true}], ["completeTime", "vmodl.DateTime", "vim.version.version1", {:optional => true}], ["eventChainId", "int", "vim.version.version1"], ["changeTag", "string", "vim.version.version5", {:optional => true}], ["parentTaskKey", "string", "vim.version.version5", {:optional => true}], ["rootTaskKey", "string", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.TaskInfo.State", "TaskInfoState", "vim.version.version1", ["queued", "running", "success", "error"])
    create_managed_type("vim.TaskManager", "TaskManager", "vmodl.ManagedObject", "vim.version.version1", [["recentTask", "vim.Task[]", "vim.version.version1", {:optional => true}, "System.View"], ["description", "vim.TaskDescription", "vim.version.version1", {}, "System.View"], ["maxCollector", "int", "vim.version.version1", {}, "System.View"]], [["createCollector", "CreateCollectorForTasks", "vim.version.version1", [["filter", "vim.TaskFilterSpec", "vim.version.version1", {}, nil]], [{}, "vim.TaskHistoryCollector", "vim.TaskHistoryCollector"], "System.View", ["vim.fault.InvalidState"]], ["createTask", "CreateTask", "vim.version.version2", [["obj", "vmodl.ManagedObject", "vim.version.version2", {}, nil], ["taskTypeId", "string", "vim.version.version2", {}, nil], ["initiatedBy", "string", "vim.version.version2", {:optional => true}, nil], ["cancelable", "boolean", "vim.version.version2", {}, nil], ["parentTaskKey", "string", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.TaskInfo", "vim.TaskInfo"], "Task.Create", nil]])
    create_data_type("vim.TaskReason", "TaskReason", "vmodl.DynamicData", "vim.version.version1", nil)
    create_data_type("vim.TaskReasonSystem", "TaskReasonSystem", "vim.TaskReason", "vim.version.version1", nil)
    create_data_type("vim.TaskReasonUser", "TaskReasonUser", "vim.TaskReason", "vim.version.version1", [["userName", "string", "vim.version.version1"]])
    create_data_type("vim.TaskReasonAlarm", "TaskReasonAlarm", "vim.TaskReason", "vim.version.version1", [["alarmName", "string", "vim.version.version1"], ["alarm", "vim.alarm.Alarm", "vim.version.version1"], ["entityName", "string", "vim.version.version1"], ["entity", "vim.ManagedEntity", "vim.version.version1"]])
    create_data_type("vim.TaskReasonSchedule", "TaskReasonSchedule", "vim.TaskReason", "vim.version.version1", [["name", "string", "vim.version.version1"], ["scheduledTask", "vim.scheduler.ScheduledTask", "vim.version.version1"]])
    create_data_type("vim.TypeDescription", "TypeDescription", "vim.Description", "vim.version.version1", [["key", "vmodl.TypeName", "vim.version.version1"]])
    create_data_type("vim.UpdateVirtualMachineFilesResult", "UpdateVirtualMachineFilesResult", "vmodl.DynamicData", "vim.version.version6", [["failedVmFile", "vim.UpdateVirtualMachineFilesResult.FailedVmFileInfo[]", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.UpdateVirtualMachineFilesResult.FailedVmFileInfo", "UpdateVirtualMachineFilesResultFailedVmFileInfo", "vmodl.DynamicData", "vim.version.version6", [["vmFile", "string", "vim.version.version6"], ["fault", "vmodl.MethodFault", "vim.version.version6"]])
    create_managed_type("vim.UserDirectory", "UserDirectory", "vmodl.ManagedObject", "vim.version.version1", [["domainList", "string[]", "vim.version.version1", {:optional => true}, "System.View"]], [["retrieveUserGroups", "RetrieveUserGroups", "vim.version.version1", [["domain", "string", "vim.version.version1", {:optional => true}, nil], ["searchStr", "string", "vim.version.version1", {}, nil], ["belongsToGroup", "string", "vim.version.version1", {:optional => true}, nil], ["belongsToUser", "string", "vim.version.version1", {:optional => true}, nil], ["exactMatch", "boolean", "vim.version.version1", {}, nil], ["findUsers", "boolean", "vim.version.version1", {}, nil], ["findGroups", "boolean", "vim.version.version1", {}, nil]], [{:optional => true}, "vim.UserSearchResult[]", "vim.UserSearchResult[]"], nil, ["vim.fault.NotFound"]]])
    create_data_type("vim.UserSearchResult", "UserSearchResult", "vmodl.DynamicData", "vim.version.version1", [["principal", "string", "vim.version.version1"], ["fullName", "string", "vim.version.version1", {:optional => true}], ["group", "boolean", "vim.version.version1"]])
    create_data_type("vim.UserSession", "UserSession", "vmodl.DynamicData", "vim.version.version1", [["key", "string", "vim.version.version1"], ["userName", "string", "vim.version.version1"], ["fullName", "string", "vim.version.version1"], ["loginTime", "vmodl.DateTime", "vim.version.version1"], ["lastActiveTime", "vmodl.DateTime", "vim.version.version1"], ["locale", "string", "vim.version.version1"], ["messageLocale", "string", "vim.version.version1"], ["extensionSession", "boolean", "vim.version.version7"], ["ipAddress", "string", "vim.version.version8"], ["userAgent", "string", "vim.version.version8"], ["callCount", "long", "vim.version.version8"]])
    create_managed_type("vim.VirtualizationManager", "VirtualizationManager", "vmodl.ManagedObject", "vim.version.version2", nil, nil)
    create_data_type("vim.action.Action", "Action", "vmodl.DynamicData", "vim.version.version1", nil)
    create_enum_type("vim.action.Action.ActionParameter", "ActionParameter", "vim.version.version1", ["targetName", "alarmName", "oldStatus", "newStatus", "triggeringSummary", "declaringSummary", "eventDescription", "target", "alarm"])
    create_data_type("vim.action.MethodActionArgument", "MethodActionArgument", "vmodl.DynamicData", "vim.version.version1", [["value", "anyType", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.action.MethodAction", "MethodAction", "vim.action.Action", "vim.version.version1", [["name", "vmodl.MethodName", "vim.version.version1"], ["argument", "vim.action.MethodActionArgument[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.action.SendEmailAction", "SendEmailAction", "vim.action.Action", "vim.version.version1", [["toList", "string", "vim.version.version1"], ["ccList", "string", "vim.version.version1"], ["subject", "string", "vim.version.version1"], ["body", "string", "vim.version.version1"]])
    create_data_type("vim.action.SendSNMPAction", "SendSNMPAction", "vim.action.Action", "vim.version.version1", nil)
    create_data_type("vim.action.RunScriptAction", "RunScriptAction", "vim.action.Action", "vim.version.version1", [["script", "string", "vim.version.version1"]])
    create_data_type("vim.action.CreateTaskAction", "CreateTaskAction", "vim.action.Action", "vim.version.version2", [["taskTypeId", "string", "vim.version.version2"], ["cancelable", "boolean", "vim.version.version2"]])
    create_managed_type("vim.alarm.Alarm", "Alarm", "vim.ExtensibleManagedObject", "vim.version.version1", [["info", "vim.alarm.AlarmInfo", "vim.version.version1", {}, "System.View"]], [["remove", "RemoveAlarm", "vim.version.version1", [], [{}, "void", "void"], "Alarm.Delete", nil], ["reconfigure", "ReconfigureAlarm", "vim.version.version1", [["spec", "vim.alarm.AlarmSpec", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Alarm.Edit", ["vim.fault.InvalidName", "vim.fault.DuplicateName"]]])
    create_data_type("vim.alarm.AlarmAction", "AlarmAction", "vmodl.DynamicData", "vim.version.version1", nil)
    create_data_type("vim.alarm.GroupAlarmAction", "GroupAlarmAction", "vim.alarm.AlarmAction", "vim.version.version1", [["action", "vim.alarm.AlarmAction[]", "vim.version.version1"]])
    create_data_type("vim.alarm.AlarmDescription", "AlarmDescription", "vmodl.DynamicData", "vim.version.version1", [["expr", "vim.TypeDescription[]", "vim.version.version1"], ["stateOperator", "vim.ElementDescription[]", "vim.version.version1"], ["metricOperator", "vim.ElementDescription[]", "vim.version.version1"], ["hostSystemConnectionState", "vim.ElementDescription[]", "vim.version.version1"], ["virtualMachinePowerState", "vim.ElementDescription[]", "vim.version.version1"], ["datastoreConnectionState", "vim.ElementDescription[]", "vim.version.version5"], ["hostSystemPowerState", "vim.ElementDescription[]", "vim.version.version5"], ["virtualMachineGuestHeartbeatStatus", "vim.ElementDescription[]", "vim.version.version5"], ["entityStatus", "vim.ElementDescription[]", "vim.version.version1"], ["action", "vim.TypeDescription[]", "vim.version.version1"]])
    create_data_type("vim.alarm.AlarmExpression", "AlarmExpression", "vmodl.DynamicData", "vim.version.version1", nil)
    create_data_type("vim.alarm.AndAlarmExpression", "AndAlarmExpression", "vim.alarm.AlarmExpression", "vim.version.version1", [["expression", "vim.alarm.AlarmExpression[]", "vim.version.version1"]])
    create_data_type("vim.alarm.OrAlarmExpression", "OrAlarmExpression", "vim.alarm.AlarmExpression", "vim.version.version1", [["expression", "vim.alarm.AlarmExpression[]", "vim.version.version1"]])
    create_data_type("vim.alarm.StateAlarmExpression", "StateAlarmExpression", "vim.alarm.AlarmExpression", "vim.version.version1", [["operator", "vim.alarm.StateAlarmExpression.StateOperator", "vim.version.version1"], ["type", "vmodl.TypeName", "vim.version.version1"], ["statePath", "vmodl.PropertyPath", "vim.version.version1"], ["yellow", "string", "vim.version.version1", {:optional => true}], ["red", "string", "vim.version.version1", {:optional => true}]])
    create_enum_type("vim.alarm.StateAlarmExpression.StateOperator", "StateAlarmOperator", "vim.version.version1", ["isEqual", "isUnequal"])
    create_data_type("vim.alarm.MetricAlarmExpression", "MetricAlarmExpression", "vim.alarm.AlarmExpression", "vim.version.version1", [["operator", "vim.alarm.MetricAlarmExpression.MetricOperator", "vim.version.version1"], ["type", "vmodl.TypeName", "vim.version.version1"], ["metric", "vim.PerformanceManager.MetricId", "vim.version.version1"], ["yellow", "int", "vim.version.version1", {:optional => true}], ["yellowInterval", "int", "vim.version.version5", {:optional => true}], ["red", "int", "vim.version.version1", {:optional => true}], ["redInterval", "int", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.alarm.MetricAlarmExpression.MetricOperator", "MetricAlarmOperator", "vim.version.version1", ["isAbove", "isBelow"])
    create_data_type("vim.alarm.AlarmSetting", "AlarmSetting", "vmodl.DynamicData", "vim.version.version1", [["toleranceRange", "int", "vim.version.version1"], ["reportingFrequency", "int", "vim.version.version1"]])
    create_data_type("vim.alarm.AlarmSpec", "AlarmSpec", "vmodl.DynamicData", "vim.version.version1", [["name", "string", "vim.version.version1"], ["systemName", "string", "vim.version.version7", {:optional => true}], ["description", "string", "vim.version.version1"], ["enabled", "boolean", "vim.version.version1"], ["expression", "vim.alarm.AlarmExpression", "vim.version.version1"], ["action", "vim.alarm.AlarmAction", "vim.version.version1", {:optional => true}], ["actionFrequency", "int", "vim.version.version5", {:optional => true}], ["setting", "vim.alarm.AlarmSetting", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.cluster.Action", "ClusterAction", "vmodl.DynamicData", "vim.version.version2", [["type", "string", "vim.version.version2"], ["target", "vmodl.ManagedObject", "vim.version.version2", {:optional => true}]])
    create_enum_type("vim.cluster.Action.ActionType", "ActionType", "vim.version.version2", ["MigrationV1", "VmPowerV1", "HostPowerV1", "IncreaseLimitV1", "IncreaseSizeV1", "IncreaseSharesV1", "IncreaseReservationV1", "DecreaseOthersReservationV1", "IncreaseClusterCapacityV1", "DecreaseMigrationThresholdV1", "HostMaintenanceV1", "StorageMigrationV1", "StoragePlacementV1", "PlacementV1"])
    create_data_type("vim.cluster.ActionHistory", "ClusterActionHistory", "vmodl.DynamicData", "vim.version.version2", [["action", "vim.cluster.Action", "vim.version.version2"], ["time", "vmodl.DateTime", "vim.version.version2"]])
    create_data_type("vim.cluster.AttemptedVmInfo", "ClusterAttemptedVmInfo", "vmodl.DynamicData", "vim.version.version2", [["vm", "vim.VirtualMachine", "vim.version.version2"], ["task", "vim.Task", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.cluster.ConfigInfo", "ClusterConfigInfo", "vmodl.DynamicData", "vim.version.version1", [["dasConfig", "vim.cluster.DasConfigInfo", "vim.version.version1"], ["dasVmConfig", "vim.cluster.DasVmConfigInfo[]", "vim.version.version1", {:optional => true}], ["drsConfig", "vim.cluster.DrsConfigInfo", "vim.version.version1"], ["drsVmConfig", "vim.cluster.DrsVmConfigInfo[]", "vim.version.version1", {:optional => true}], ["rule", "vim.cluster.RuleInfo[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.cluster.DrsConfigInfo", "ClusterDrsConfigInfo", "vmodl.DynamicData", "vim.version.version1", [["enabled", "boolean", "vim.version.version1", {:optional => true}], ["enableVmBehaviorOverrides", "boolean", "vim.version.version5", {:optional => true}], ["defaultVmBehavior", "vim.cluster.DrsConfigInfo.DrsBehavior", "vim.version.version1", {:optional => true}], ["vmotionRate", "int", "vim.version.version1", {:optional => true}], ["option", "vim.option.OptionValue[]", "vim.version.version1", {:optional => true}]])
    create_enum_type("vim.cluster.DrsConfigInfo.DrsBehavior", "DrsBehavior", "vim.version.version1", ["manual", "partiallyAutomated", "fullyAutomated"])
    create_data_type("vim.cluster.DrsVmConfigInfo", "ClusterDrsVmConfigInfo", "vmodl.DynamicData", "vim.version.version1", [["key", "vim.VirtualMachine", "vim.version.version1"], ["enabled", "boolean", "vim.version.version1", {:optional => true}], ["behavior", "vim.cluster.DrsConfigInfo.DrsBehavior", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.cluster.DpmConfigInfo", "ClusterDpmConfigInfo", "vmodl.DynamicData", "vim.version.version2", [["enabled", "boolean", "vim.version.version2", {:optional => true}], ["defaultDpmBehavior", "vim.cluster.DpmConfigInfo.DpmBehavior", "vim.version.version2", {:optional => true}], ["hostPowerActionRate", "int", "vim.version.version5", {:optional => true}], ["option", "vim.option.OptionValue[]", "vim.version.version2", {:optional => true}]])
    create_enum_type("vim.cluster.DpmConfigInfo.DpmBehavior", "DpmBehavior", "vim.version.version2", ["manual", "automated"])
    create_data_type("vim.cluster.DpmHostConfigInfo", "ClusterDpmHostConfigInfo", "vmodl.DynamicData", "vim.version.version2", [["key", "vim.HostSystem", "vim.version.version2"], ["enabled", "boolean", "vim.version.version2", {:optional => true}], ["behavior", "vim.cluster.DpmConfigInfo.DpmBehavior", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.cluster.ConfigSpec", "ClusterConfigSpec", "vmodl.DynamicData", "vim.version.version1", [["dasConfig", "vim.cluster.DasConfigInfo", "vim.version.version1", {:optional => true}], ["dasVmConfigSpec", "vim.cluster.DasVmConfigSpec[]", "vim.version.version1", {:optional => true}], ["drsConfig", "vim.cluster.DrsConfigInfo", "vim.version.version1", {:optional => true}], ["drsVmConfigSpec", "vim.cluster.DrsVmConfigSpec[]", "vim.version.version1", {:optional => true}], ["rulesSpec", "vim.cluster.RuleSpec[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.cluster.DasAamNodeState", "ClusterDasAamNodeState", "vmodl.DynamicData", "vim.version.version5", [["host", "vim.HostSystem", "vim.version.version5"], ["name", "string", "vim.version.version5"], ["configState", "string", "vim.version.version5"], ["runtimeState", "string", "vim.version.version5"]])
    create_enum_type("vim.cluster.DasAamNodeState.DasState", "ClusterDasAamNodeStateDasState", "vim.version.version5", ["uninitialized", "initialized", "configuring", "unconfiguring", "running", "error", "agentShutdown", "nodeFailed"])
    create_data_type("vim.cluster.DasAdmissionControlInfo", "ClusterDasAdmissionControlInfo", "vmodl.DynamicData", "vim.version.version5", nil)
    create_data_type("vim.cluster.DasAdmissionControlPolicy", "ClusterDasAdmissionControlPolicy", "vmodl.DynamicData", "vim.version.version5", nil)
    create_data_type("vim.cluster.DasAdvancedRuntimeInfo", "ClusterDasAdvancedRuntimeInfo", "vmodl.DynamicData", "vim.version.version5", [["dasHostInfo", "vim.cluster.DasHostInfo", "vim.version.version5", {:optional => true}], ["heartbeatDatastoreInfo", "vim.cluster.DasAdvancedRuntimeInfo.HeartbeatDatastoreInfo[]", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.cluster.DasAdvancedRuntimeInfo.HeartbeatDatastoreInfo", "DasHeartbeatDatastoreInfo", "vmodl.DynamicData", "vim.version.version7", [["datastore", "vim.Datastore", "vim.version.version7"], ["hosts", "vim.HostSystem[]", "vim.version.version7"]])
    create_data_type("vim.cluster.DasConfigInfo", "ClusterDasConfigInfo", "vmodl.DynamicData", "vim.version.version1", [["enabled", "boolean", "vim.version.version1", {:optional => true}], ["vmMonitoring", "string", "vim.version.version5", {:optional => true}], ["hostMonitoring", "string", "vim.version.version5", {:optional => true}], ["failoverLevel", "int", "vim.version.version1", {:optional => true}], ["admissionControlPolicy", "vim.cluster.DasAdmissionControlPolicy", "vim.version.version5", {:optional => true}], ["admissionControlEnabled", "boolean", "vim.version.version1", {:optional => true}], ["defaultVmSettings", "vim.cluster.DasVmSettings", "vim.version.version2", {:optional => true}], ["option", "vim.option.OptionValue[]", "vim.version.version1", {:optional => true}], ["heartbeatDatastore", "vim.Datastore[]", "vim.version.version7", {:optional => true}], ["hBDatastoreCandidatePolicy", "string", "vim.version.version7", {:optional => true}]])
    create_enum_type("vim.cluster.DasConfigInfo.ServiceState", "ClusterDasConfigInfoServiceState", "vim.version.version5", ["disabled", "enabled"])
    create_enum_type("vim.cluster.DasConfigInfo.VmMonitoringState", "ClusterDasConfigInfoVmMonitoringState", "vim.version.version6", ["vmMonitoringDisabled", "vmMonitoringOnly", "vmAndAppMonitoring"])
    create_enum_type("vim.cluster.DasConfigInfo.HBDatastoreCandidate", "ClusterDasConfigInfoHBDatastoreCandidate", "vim.version.version7", ["userSelectedDs", "allFeasibleDs", "allFeasibleDsWithUserPreference"])
    create_data_type("vim.cluster.DasData", "ClusterDasData", "vmodl.DynamicData", "vim.version.version7", nil)
    create_data_type("vim.cluster.DasDataSummary", "ClusterDasDataSummary", "vim.cluster.DasData", "vim.version.version7", [["hostListVersion", "long", "vim.version.version7"], ["clusterConfigVersion", "long", "vim.version.version7"], ["compatListVersion", "long", "vim.version.version7"]])
    create_data_type("vim.cluster.DasFailoverLevelAdvancedRuntimeInfo", "ClusterDasFailoverLevelAdvancedRuntimeInfo", "vim.cluster.DasAdvancedRuntimeInfo", "vim.version.version5", [["slotInfo", "vim.cluster.DasFailoverLevelAdvancedRuntimeInfo.SlotInfo", "vim.version.version5"], ["totalSlots", "int", "vim.version.version5"], ["usedSlots", "int", "vim.version.version5"], ["unreservedSlots", "int", "vim.version.version5"], ["totalVms", "int", "vim.version.version5"], ["totalHosts", "int", "vim.version.version5"], ["totalGoodHosts", "int", "vim.version.version5"], ["hostSlots", "vim.cluster.DasFailoverLevelAdvancedRuntimeInfo.HostSlots[]", "vim.version.version5", {:optional => true}], ["vmsRequiringMultipleSlots", "vim.cluster.DasFailoverLevelAdvancedRuntimeInfo.VmSlots[]", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.cluster.DasFailoverLevelAdvancedRuntimeInfo.SlotInfo", "ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo", "vmodl.DynamicData", "vim.version.version5", [["numVcpus", "int", "vim.version.version5"], ["cpuMHz", "int", "vim.version.version5"], ["memoryMB", "int", "vim.version.version5"]])
    create_data_type("vim.cluster.DasFailoverLevelAdvancedRuntimeInfo.HostSlots", "ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots", "vmodl.DynamicData", "vim.version.version5", [["host", "vim.HostSystem", "vim.version.version5"], ["slots", "int", "vim.version.version5"]])
    create_data_type("vim.cluster.DasFailoverLevelAdvancedRuntimeInfo.VmSlots", "ClusterDasFailoverLevelAdvancedRuntimeInfoVmSlots", "vmodl.DynamicData", "vim.version.version8", [["vm", "vim.VirtualMachine", "vim.version.version8"], ["slots", "int", "vim.version.version8"]])
    create_enum_type("vim.cluster.DasFdmAvailabilityState", "ClusterDasFdmAvailabilityState", "vim.version.version7", ["uninitialized", "election", "master", "connectedToMaster", "networkPartitionedFromMaster", "networkIsolated", "hostDown", "initializationError", "uninitializationError", "fdmUnreachable"])
    create_data_type("vim.cluster.DasFdmHostState", "ClusterDasFdmHostState", "vmodl.DynamicData", "vim.version.version7", [["state", "string", "vim.version.version7"], ["stateReporter", "vim.HostSystem", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.cluster.DasHostInfo", "ClusterDasHostInfo", "vmodl.DynamicData", "vim.version.version5", nil)
    create_data_type("vim.cluster.DasHostRecommendation", "ClusterDasHostRecommendation", "vmodl.DynamicData", "vim.version.version5", [["host", "vim.HostSystem", "vim.version.version5"], ["drsRating", "int", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.cluster.DasVmConfigInfo", "ClusterDasVmConfigInfo", "vmodl.DynamicData", "vim.version.version1", [["key", "vim.VirtualMachine", "vim.version.version1"], ["restartPriority", "vim.cluster.DasVmConfigInfo.Priority", "vim.version.version1", {:optional => true}], ["powerOffOnIsolation", "boolean", "vim.version.version1", {:optional => true}], ["dasSettings", "vim.cluster.DasVmSettings", "vim.version.version2", {:optional => true}]])
    create_enum_type("vim.cluster.DasVmConfigInfo.Priority", "DasVmPriority", "vim.version.version1", ["disabled", "low", "medium", "high"])
    create_data_type("vim.cluster.DasVmSettings", "ClusterDasVmSettings", "vmodl.DynamicData", "vim.version.version2", [["restartPriority", "string", "vim.version.version2", {:optional => true}], ["isolationResponse", "string", "vim.version.version2", {:optional => true}], ["vmToolsMonitoringSettings", "vim.cluster.VmToolsMonitoringSettings", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.cluster.DasVmSettings.RestartPriority", "ClusterDasVmSettingsRestartPriority", "vim.version.version2", ["disabled", "low", "medium", "high", "clusterRestartPriority"])
    create_enum_type("vim.cluster.DasVmSettings.IsolationResponse", "ClusterDasVmSettingsIsolationResponse", "vim.version.version2", ["none", "powerOff", "shutdown", "clusterIsolationResponse"])
    create_data_type("vim.cluster.DrsFaults", "ClusterDrsFaults", "vmodl.DynamicData", "vim.version.version5", [["reason", "string", "vim.version.version5"], ["faultsByVm", "vim.cluster.DrsFaults.FaultsByVm[]", "vim.version.version5"]])
    create_data_type("vim.cluster.DrsFaults.FaultsByVm", "ClusterDrsFaultsFaultsByVm", "vmodl.DynamicData", "vim.version.version5", [["vm", "vim.VirtualMachine", "vim.version.version5", {:optional => true}], ["fault", "vmodl.MethodFault[]", "vim.version.version5"]])
    create_data_type("vim.cluster.DrsFaults.FaultsByVirtualDisk", "ClusterDrsFaultsFaultsByVirtualDisk", "vim.cluster.DrsFaults.FaultsByVm", "vim.version.version7", [["disk", "vim.vm.device.VirtualDiskId", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.cluster.DrsMigration", "ClusterDrsMigration", "vmodl.DynamicData", "vim.version.version1", [["key", "string", "vim.version.version1"], ["time", "vmodl.DateTime", "vim.version.version1"], ["vm", "vim.VirtualMachine", "vim.version.version1"], ["cpuLoad", "int", "vim.version.version1", {:optional => true}], ["memoryLoad", "long", "vim.version.version1", {:optional => true}], ["source", "vim.HostSystem", "vim.version.version1"], ["sourceCpuLoad", "int", "vim.version.version1", {:optional => true}], ["sourceMemoryLoad", "long", "vim.version.version1", {:optional => true}], ["destination", "vim.HostSystem", "vim.version.version1"], ["destinationCpuLoad", "int", "vim.version.version1", {:optional => true}], ["destinationMemoryLoad", "long", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.cluster.DrsRecommendation", "ClusterDrsRecommendation", "vmodl.DynamicData", "vim.version.version1", [["key", "string", "vim.version.version1"], ["rating", "int", "vim.version.version1"], ["reason", "string", "vim.version.version1"], ["reasonText", "string", "vim.version.version1"], ["migrationList", "vim.cluster.DrsMigration[]", "vim.version.version1"]])
    create_enum_type("vim.cluster.DrsRecommendation.ReasonCode", "DrsRecommendationReasonCode", "vim.version.version1", ["fairnessCpuAvg", "fairnessMemAvg", "jointAffin", "antiAffin", "hostMaint"])
    create_data_type("vim.cluster.EnterMaintenanceResult", "ClusterEnterMaintenanceResult", "vmodl.DynamicData", "vim.version.version7", [["recommendations", "vim.cluster.Recommendation[]", "vim.version.version7", {:optional => true}], ["fault", "vim.cluster.DrsFaults", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.cluster.FailoverHostAdmissionControlPolicy", "ClusterFailoverHostAdmissionControlPolicy", "vim.cluster.DasAdmissionControlPolicy", "vim.version.version5", [["failoverHosts", "vim.HostSystem[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.cluster.FailoverLevelAdmissionControlInfo", "ClusterFailoverLevelAdmissionControlInfo", "vim.cluster.DasAdmissionControlInfo", "vim.version.version5", [["currentFailoverLevel", "int", "vim.version.version5"]])
    create_data_type("vim.cluster.FailoverLevelAdmissionControlPolicy", "ClusterFailoverLevelAdmissionControlPolicy", "vim.cluster.DasAdmissionControlPolicy", "vim.version.version5", [["failoverLevel", "int", "vim.version.version5"], ["slotPolicy", "vim.cluster.SlotPolicy", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.cluster.FailoverResourcesAdmissionControlInfo", "ClusterFailoverResourcesAdmissionControlInfo", "vim.cluster.DasAdmissionControlInfo", "vim.version.version5", [["currentCpuFailoverResourcesPercent", "int", "vim.version.version5"], ["currentMemoryFailoverResourcesPercent", "int", "vim.version.version5"]])
    create_data_type("vim.cluster.FailoverResourcesAdmissionControlPolicy", "ClusterFailoverResourcesAdmissionControlPolicy", "vim.cluster.DasAdmissionControlPolicy", "vim.version.version5", [["cpuFailoverResourcesPercent", "int", "vim.version.version5"], ["memoryFailoverResourcesPercent", "int", "vim.version.version5"]])
    create_data_type("vim.cluster.GroupInfo", "ClusterGroupInfo", "vmodl.DynamicData", "vim.version.version6", [["name", "string", "vim.version.version6"], ["userCreated", "boolean", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.cluster.HostGroup", "ClusterHostGroup", "vim.cluster.GroupInfo", "vim.version.version6", [["host", "vim.HostSystem[]", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.cluster.HostPowerAction", "ClusterHostPowerAction", "vim.cluster.Action", "vim.version.version2", [["operationType", "vim.cluster.HostPowerAction.OperationType", "vim.version.version2"], ["powerConsumptionWatt", "int", "vim.version.version2", {:optional => true}], ["cpuCapacityMHz", "int", "vim.version.version2", {:optional => true}], ["memCapacityMB", "int", "vim.version.version2", {:optional => true}]])
    create_enum_type("vim.cluster.HostPowerAction.OperationType", "HostPowerOperationType", "vim.version.version2", ["powerOn", "powerOff"])
    create_data_type("vim.cluster.HostRecommendation", "ClusterHostRecommendation", "vmodl.DynamicData", "vim.version.version1", [["host", "vim.HostSystem", "vim.version.version1"], ["rating", "int", "vim.version.version1"]])
    create_data_type("vim.cluster.InitialPlacementAction", "ClusterInitialPlacementAction", "vim.cluster.Action", "vim.version.version2", [["targetHost", "vim.HostSystem", "vim.version.version2"], ["pool", "vim.ResourcePool", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.cluster.MigrationAction", "ClusterMigrationAction", "vim.cluster.Action", "vim.version.version2", [["drsMigration", "vim.cluster.DrsMigration", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.cluster.NotAttemptedVmInfo", "ClusterNotAttemptedVmInfo", "vmodl.DynamicData", "vim.version.version2", [["vm", "vim.VirtualMachine", "vim.version.version2"], ["fault", "vmodl.MethodFault", "vim.version.version2"]])
    create_enum_type("vim.cluster.PowerOnVmOption", "ClusterPowerOnVmOption", "vim.version.version6", ["OverrideAutomationLevel", "ReserveResources"])
    create_data_type("vim.cluster.PowerOnVmResult", "ClusterPowerOnVmResult", "vmodl.DynamicData", "vim.version.version2", [["attempted", "vim.cluster.AttemptedVmInfo[]", "vim.version.version2", {:optional => true}], ["notAttempted", "vim.cluster.NotAttemptedVmInfo[]", "vim.version.version2", {:optional => true}], ["recommendations", "vim.cluster.Recommendation[]", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.cluster.Recommendation", "ClusterRecommendation", "vmodl.DynamicData", "vim.version.version2", [["key", "string", "vim.version.version2"], ["type", "string", "vim.version.version2"], ["time", "vmodl.DateTime", "vim.version.version2"], ["rating", "int", "vim.version.version2"], ["reason", "string", "vim.version.version2"], ["reasonText", "string", "vim.version.version2"], ["prerequisite", "string[]", "vim.version.version2", {:optional => true}], ["action", "vim.cluster.Action[]", "vim.version.version2", {:optional => true}], ["target", "vmodl.ManagedObject", "vim.version.version2", {:optional => true}]])
    create_enum_type("vim.cluster.Recommendation.RecommendationType", "RecommendationType", "vim.version.version2", ["V1"])
    create_enum_type("vim.cluster.Recommendation.ReasonCode", "RecommendationReasonCode", "vim.version.version2", ["fairnessCpuAvg", "fairnessMemAvg", "jointAffin", "antiAffin", "hostMaint", "enterStandby", "reservationCpu", "reservationMem", "powerOnVm", "powerSaving", "increaseCapacity", "checkResource", "unreservedCapacity", "colocateCommunicatingVM", "balanceNetworkBandwidthUsage", "vmHostHardAffinity", "vmHostSoftAffinity", "increaseAllocation", "balanceDatastoreSpaceUsage", "balanceDatastoreIOLoad", "datastoreMaint", "virtualDiskJointAffin", "virtualDiskAntiAffin", "datastoreSpaceOutage", "storagePlacement", "iolbDisabledInternal", "xvmotionPlacement"])
    create_data_type("vim.cluster.SlotPolicy", "ClusterSlotPolicy", "vmodl.DynamicData", "vim.version.version8", nil)
    create_data_type("vim.cluster.FixedSizeSlotPolicy", "ClusterFixedSizeSlotPolicy", "vim.cluster.SlotPolicy", "vim.version.version8", [["cpu", "int", "vim.version.version8"], ["memory", "int", "vim.version.version8"]])
    create_data_type("vim.cluster.VmGroup", "ClusterVmGroup", "vim.cluster.GroupInfo", "vim.version.version6", [["vm", "vim.VirtualMachine[]", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.cluster.VmToolsMonitoringSettings", "ClusterVmToolsMonitoringSettings", "vmodl.DynamicData", "vim.version.version5", [["enabled", "boolean", "vim.version.version5", {:optional => true}], ["vmMonitoring", "string", "vim.version.version6", {:optional => true}], ["clusterSettings", "boolean", "vim.version.version5", {:optional => true}], ["failureInterval", "int", "vim.version.version5", {:optional => true}], ["minUpTime", "int", "vim.version.version5", {:optional => true}], ["maxFailures", "int", "vim.version.version5", {:optional => true}], ["maxFailureWindow", "int", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.dvs.DistributedVirtualPort", "DistributedVirtualPort", "vmodl.DynamicData", "vim.version.version5", [["key", "string", "vim.version.version5"], ["config", "vim.dvs.DistributedVirtualPort.ConfigInfo", "vim.version.version5"], ["dvsUuid", "string", "vim.version.version5"], ["portgroupKey", "string", "vim.version.version5", {:optional => true}], ["proxyHost", "vim.HostSystem", "vim.version.version5", {:optional => true}], ["connectee", "vim.dvs.PortConnectee", "vim.version.version5", {:optional => true}], ["conflict", "boolean", "vim.version.version5"], ["conflictPortKey", "string", "vim.version.version5", {:optional => true}], ["state", "vim.dvs.DistributedVirtualPort.State", "vim.version.version5", {:optional => true}], ["connectionCookie", "int", "vim.version.version5", {:optional => true}], ["lastStatusChange", "vmodl.DateTime", "vim.version.version5"], ["hostLocalPort", "boolean", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.dvs.DistributedVirtualPort.ConfigSpec", "DVPortConfigSpec", "vmodl.DynamicData", "vim.version.version5", [["operation", "string", "vim.version.version5"], ["key", "string", "vim.version.version5", {:optional => true}], ["name", "string", "vim.version.version5", {:optional => true}], ["scope", "vim.ManagedEntity[]", "vim.version.version5", {:optional => true}], ["description", "string", "vim.version.version5", {:optional => true}], ["setting", "vim.dvs.DistributedVirtualPort.Setting", "vim.version.version5", {:optional => true}], ["configVersion", "string", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.dvs.DistributedVirtualPort.ConfigInfo", "DVPortConfigInfo", "vmodl.DynamicData", "vim.version.version5", [["name", "string", "vim.version.version5", {:optional => true}], ["scope", "vim.ManagedEntity[]", "vim.version.version5", {:optional => true}], ["description", "string", "vim.version.version5", {:optional => true}], ["setting", "vim.dvs.DistributedVirtualPort.Setting", "vim.version.version5", {:optional => true}], ["configVersion", "string", "vim.version.version5"]])
    create_data_type("vim.dvs.DistributedVirtualPort.TrafficShapingPolicy", "DVSTrafficShapingPolicy", "vim.InheritablePolicy", "vim.version.version5", [["enabled", "vim.BoolPolicy", "vim.version.version5", {:optional => true}], ["averageBandwidth", "vim.LongPolicy", "vim.version.version5", {:optional => true}], ["peakBandwidth", "vim.LongPolicy", "vim.version.version5", {:optional => true}], ["burstSize", "vim.LongPolicy", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.dvs.DistributedVirtualPort.HostLocalPortInfo", "DVSHostLocalPortInfo", "vmodl.DynamicData", "vim.version.version8", [["switchUuid", "string", "vim.version.version8"], ["portKey", "string", "vim.version.version8"], ["setting", "vim.dvs.DistributedVirtualPort.Setting", "vim.version.version8"], ["vnic", "string", "vim.version.version8"]])
    create_data_type("vim.dvs.DistributedVirtualPort.VendorSpecificConfig", "DVSVendorSpecificConfig", "vim.InheritablePolicy", "vim.version.version5", [["keyValue", "vim.dvs.KeyedOpaqueBlob[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.dvs.DistributedVirtualPort.FilterParameter", "DvsFilterParameter", "vmodl.DynamicData", "vim.version.version9", [["parameters", "string[]", "vim.version.version9", {:optional => true}]])
    create_enum_type("vim.dvs.DistributedVirtualPort.FilterOnFailure", "DvsFilterOnFailure", "vim.version.version9", ["failOpen", "failClosed"])
    create_data_type("vim.dvs.DistributedVirtualPort.FilterConfig", "DvsFilterConfig", "vim.InheritablePolicy", "vim.version.version9", [["key", "string", "vim.version.version9", {:optional => true}], ["agentName", "string", "vim.version.version9", {:optional => true}], ["slotNumber", "string", "vim.version.version9", {:optional => true}], ["parameters", "vim.dvs.DistributedVirtualPort.FilterParameter", "vim.version.version9", {:optional => true}], ["onFailure", "string", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.dvs.DistributedVirtualPort.TrafficFilterConfig", "DvsTrafficFilterConfig", "vim.dvs.DistributedVirtualPort.FilterConfig", "vim.version.version9", [["trafficRuleset", "vim.dvs.TrafficRuleset", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.dvs.DistributedVirtualPort.FilterConfigSpec", "DvsFilterConfigSpec", "vim.dvs.DistributedVirtualPort.FilterConfig", "vim.version.version9", [["operation", "string", "vim.version.version9"]])
    create_data_type("vim.dvs.DistributedVirtualPort.TrafficFilterConfigSpec", "DvsTrafficFilterConfigSpec", "vim.dvs.DistributedVirtualPort.TrafficFilterConfig", "vim.version.version9", [["operation", "string", "vim.version.version9"]])
    create_data_type("vim.dvs.DistributedVirtualPort.FilterPolicy", "DvsFilterPolicy", "vim.InheritablePolicy", "vim.version.version9", [["filterConfig", "vim.dvs.DistributedVirtualPort.FilterConfig[]", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.dvs.DistributedVirtualPort.Setting", "DVPortSetting", "vmodl.DynamicData", "vim.version.version5", [["blocked", "vim.BoolPolicy", "vim.version.version5", {:optional => true}], ["vmDirectPathGen2Allowed", "vim.BoolPolicy", "vim.version.version6", {:optional => true}], ["inShapingPolicy", "vim.dvs.DistributedVirtualPort.TrafficShapingPolicy", "vim.version.version5", {:optional => true}], ["outShapingPolicy", "vim.dvs.DistributedVirtualPort.TrafficShapingPolicy", "vim.version.version5", {:optional => true}], ["vendorSpecificConfig", "vim.dvs.DistributedVirtualPort.VendorSpecificConfig", "vim.version.version5", {:optional => true}], ["networkResourcePoolKey", "vim.StringPolicy", "vim.version.version7", {:optional => true}], ["filterPolicy", "vim.dvs.DistributedVirtualPort.FilterPolicy", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.dvs.DistributedVirtualPort.RuntimeInfo", "DVPortStatus", "vmodl.DynamicData", "vim.version.version5", [["linkUp", "boolean", "vim.version.version5"], ["blocked", "boolean", "vim.version.version5"], ["vlanIds", "vim.NumericRange[]", "vim.version.version5", {:optional => true}], ["trunkingMode", "boolean", "vim.version.version5", {:optional => true}], ["mtu", "int", "vim.version.version5", {:optional => true}], ["linkPeer", "string", "vim.version.version5", {:optional => true}], ["macAddress", "string", "vim.version.version5", {:optional => true}], ["statusDetail", "string", "vim.version.version6", {:optional => true}], ["vmDirectPathGen2Active", "boolean", "vim.version.version6", {:optional => true}], ["vmDirectPathGen2InactiveReasonNetwork", "string[]", "vim.version.version6", {:optional => true}], ["vmDirectPathGen2InactiveReasonOther", "string[]", "vim.version.version6", {:optional => true}], ["vmDirectPathGen2InactiveReasonExtended", "string", "vim.version.version6", {:optional => true}]])
    create_enum_type("vim.dvs.DistributedVirtualPort.RuntimeInfo.VmDirectPathGen2InactiveReasonNetwork", "DVPortStatusVmDirectPathGen2InactiveReasonNetwork", "vim.version.version6", ["portNptIncompatibleDvs", "portNptNoCompatibleNics", "portNptNoVirtualFunctionsAvailable", "portNptDisabledForPort"])
    create_enum_type("vim.dvs.DistributedVirtualPort.RuntimeInfo.VmDirectPathGen2InactiveReasonOther", "DVPortStatusVmDirectPathGen2InactiveReasonOther", "vim.version.version6", ["portNptIncompatibleHost", "portNptIncompatibleConnectee"])
    create_data_type("vim.dvs.DistributedVirtualPort.State", "DVPortState", "vmodl.DynamicData", "vim.version.version5", [["runtimeInfo", "vim.dvs.DistributedVirtualPort.RuntimeInfo", "vim.version.version5", {:optional => true}], ["stats", "vim.dvs.PortStatistics", "vim.version.version5"], ["vendorSpecificState", "vim.dvs.KeyedOpaqueBlob[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.dvs.DistributedVirtualPortgroupInfo", "DistributedVirtualPortgroupInfo", "vmodl.DynamicData", "vim.version.version5", [["switchName", "string", "vim.version.version5"], ["switchUuid", "string", "vim.version.version5"], ["portgroupName", "string", "vim.version.version5"], ["portgroupKey", "string", "vim.version.version5"], ["portgroupType", "string", "vim.version.version5"], ["uplinkPortgroup", "boolean", "vim.version.version5"], ["portgroup", "vim.dvs.DistributedVirtualPortgroup", "vim.version.version5"]])
    create_data_type("vim.dvs.DistributedVirtualPortgroupSelection", "DVPortgroupSelection", "vim.SelectionSet", "vim.version.version7", [["dvsUuid", "string", "vim.version.version7"], ["portgroupKey", "string[]", "vim.version.version7"]])
    create_data_type("vim.dvs.DistributedVirtualSwitchInfo", "DistributedVirtualSwitchInfo", "vmodl.DynamicData", "vim.version.version5", [["switchName", "string", "vim.version.version5"], ["switchUuid", "string", "vim.version.version5"], ["distributedVirtualSwitch", "vim.DistributedVirtualSwitch", "vim.version.version5"]])
    create_data_type("vim.dvs.DistributedVirtualSwitchSelection", "DVSSelection", "vim.SelectionSet", "vim.version.version7", [["dvsUuid", "string", "vim.version.version7"]])
    create_data_type("vim.dvs.EntityBackup", "EntityBackup", "vmodl.DynamicData", "vim.version.version8", nil)
    create_data_type("vim.dvs.EntityBackup.Config", "EntityBackupConfig", "vmodl.DynamicData", "vim.version.version8", [["entityType", "string", "vim.version.version8"], ["configBlob", "vmodl.Binary", "vim.version.version8"], ["key", "string", "vim.version.version8", {:optional => true}], ["name", "string", "vim.version.version8", {:optional => true}], ["container", "vim.ManagedEntity", "vim.version.version8", {:optional => true}], ["configVersion", "string", "vim.version.version8", {:optional => true}]])
    create_enum_type("vim.dvs.EntityBackup.EntityType", "EntityType", "vim.version.version8", ["distributedVirtualSwitch", "distributedVirtualPortgroup"])
    create_enum_type("vim.dvs.EntityBackup.ImportType", "EntityImportType", "vim.version.version8", ["createEntityWithNewIdentifier", "createEntityWithOriginalIdentifier", "applyToEntitySpecified"])
    create_data_type("vim.dvs.HostMember", "DistributedVirtualSwitchHostMember", "vmodl.DynamicData", "vim.version.version5", [["runtimeState", "vim.dvs.HostMember.RuntimeState", "vim.version.version7", {:optional => true}], ["config", "vim.dvs.HostMember.ConfigInfo", "vim.version.version5"], ["productInfo", "vim.dvs.ProductSpec", "vim.version.version5", {:optional => true}], ["uplinkPortKey", "string[]", "vim.version.version5", {:optional => true}], ["status", "string", "vim.version.version5"], ["statusDetail", "string", "vim.version.version6", {:optional => true}]])
    create_enum_type("vim.dvs.HostMember.HostComponentState", "DistributedVirtualSwitchHostMemberHostComponentState", "vim.version.version5", ["up", "pending", "outOfSync", "warning", "disconnected", "down"])
    create_data_type("vim.dvs.HostMember.ConfigSpec", "DistributedVirtualSwitchHostMemberConfigSpec", "vmodl.DynamicData", "vim.version.version5", [["operation", "string", "vim.version.version5"], ["host", "vim.HostSystem", "vim.version.version5"], ["backing", "vim.dvs.HostMember.Backing", "vim.version.version5", {:optional => true}], ["maxProxySwitchPorts", "int", "vim.version.version5", {:optional => true}], ["vendorSpecificConfig", "vim.dvs.KeyedOpaqueBlob[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.dvs.HostMember.PnicSpec", "DistributedVirtualSwitchHostMemberPnicSpec", "vmodl.DynamicData", "vim.version.version5", [["pnicDevice", "string", "vim.version.version5"], ["uplinkPortKey", "string", "vim.version.version5", {:optional => true}], ["uplinkPortgroupKey", "string", "vim.version.version5", {:optional => true}], ["connectionCookie", "int", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.dvs.HostMember.Backing", "DistributedVirtualSwitchHostMemberBacking", "vmodl.DynamicData", "vim.version.version5", nil)
    create_data_type("vim.dvs.HostMember.PnicBacking", "DistributedVirtualSwitchHostMemberPnicBacking", "vim.dvs.HostMember.Backing", "vim.version.version5", [["pnicSpec", "vim.dvs.HostMember.PnicSpec[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.dvs.HostMember.RuntimeState", "DistributedVirtualSwitchHostMemberRuntimeState", "vmodl.DynamicData", "vim.version.version7", [["currentMaxProxySwitchPorts", "int", "vim.version.version7"]])
    create_data_type("vim.dvs.HostMember.ConfigInfo", "DistributedVirtualSwitchHostMemberConfigInfo", "vmodl.DynamicData", "vim.version.version5", [["host", "vim.HostSystem", "vim.version.version5", {:optional => true}], ["maxProxySwitchPorts", "int", "vim.version.version5"], ["vendorSpecificConfig", "vim.dvs.KeyedOpaqueBlob[]", "vim.version.version5", {:optional => true}], ["backing", "vim.dvs.HostMember.Backing", "vim.version.version5"]])
    create_data_type("vim.dvs.HostMember.RuntimeInfo", "HostMemberRuntimeInfo", "vmodl.DynamicData", "vim.version.version8", [["host", "vim.HostSystem", "vim.version.version8"], ["status", "string", "vim.version.version8", {:optional => true}], ["statusDetail", "string", "vim.version.version8", {:optional => true}], ["healthCheckResult", "vim.dvs.HostMember.HealthCheckResult[]", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.dvs.HostMember.HealthCheckResult", "HostMemberHealthCheckResult", "vmodl.DynamicData", "vim.version.version8", [["summary", "string", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.dvs.HostMember.UplinkHealthCheckResult", "HostMemberUplinkHealthCheckResult", "vim.dvs.HostMember.HealthCheckResult", "vim.version.version8", [["uplinkPortKey", "string", "vim.version.version8"]])
    create_data_type("vim.dvs.HostProductSpec", "DistributedVirtualSwitchHostProductSpec", "vmodl.DynamicData", "vim.version.version5", [["productLineId", "string", "vim.version.version5", {:optional => true}], ["version", "string", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.dvs.KeyedOpaqueBlob", "DistributedVirtualSwitchKeyedOpaqueBlob", "vmodl.DynamicData", "vim.version.version5", [["key", "string", "vim.version.version5"], ["opaqueData", "string", "vim.version.version5"]])
    create_data_type("vim.dvs.NetworkResourcePool", "DVSNetworkResourcePool", "vmodl.DynamicData", "vim.version.version6", [["key", "string", "vim.version.version6"], ["name", "string", "vim.version.version6", {:optional => true}], ["description", "string", "vim.version.version6", {:optional => true}], ["configVersion", "string", "vim.version.version6"], ["allocationInfo", "vim.dvs.NetworkResourcePool.AllocationInfo", "vim.version.version6"]])
    create_data_type("vim.dvs.NetworkResourcePool.AllocationInfo", "DVSNetworkResourcePoolAllocationInfo", "vmodl.DynamicData", "vim.version.version6", [["limit", "long", "vim.version.version6", {:optional => true}], ["shares", "vim.SharesInfo", "vim.version.version6", {:optional => true}], ["priorityTag", "int", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.dvs.NetworkResourcePool.ConfigSpec", "DVSNetworkResourcePoolConfigSpec", "vmodl.DynamicData", "vim.version.version6", [["key", "string", "vim.version.version6"], ["configVersion", "string", "vim.version.version6", {:optional => true}], ["allocationInfo", "vim.dvs.NetworkResourcePool.AllocationInfo", "vim.version.version6", {:optional => true}], ["name", "string", "vim.version.version7", {:optional => true}], ["description", "string", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.dvs.PortConnectee", "DistributedVirtualSwitchPortConnectee", "vmodl.DynamicData", "vim.version.version5", [["connectedEntity", "vim.ManagedEntity", "vim.version.version5", {:optional => true}], ["nicKey", "string", "vim.version.version5", {:optional => true}], ["type", "string", "vim.version.version5", {:optional => true}], ["addressHint", "string", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.dvs.PortConnectee.ConnecteeType", "DistributedVirtualSwitchPortConnecteeConnecteeType", "vim.version.version5", ["pnic", "vmVnic", "hostConsoleVnic", "hostVmkVnic"])
    create_data_type("vim.dvs.PortConnection", "DistributedVirtualSwitchPortConnection", "vmodl.DynamicData", "vim.version.version5", [["switchUuid", "string", "vim.version.version5"], ["portgroupKey", "string", "vim.version.version5", {:optional => true}], ["portKey", "string", "vim.version.version5", {:optional => true}], ["connectionCookie", "int", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.dvs.PortCriteria", "DistributedVirtualSwitchPortCriteria", "vmodl.DynamicData", "vim.version.version5", [["connected", "boolean", "vim.version.version5", {:optional => true}], ["active", "boolean", "vim.version.version5", {:optional => true}], ["uplinkPort", "boolean", "vim.version.version5", {:optional => true}], ["scope", "vim.ManagedEntity", "vim.version.version5", {:optional => true}], ["portgroupKey", "string[]", "vim.version.version5", {:optional => true}], ["inside", "boolean", "vim.version.version5", {:optional => true}], ["portKey", "string[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.dvs.PortStatistics", "DistributedVirtualSwitchPortStatistics", "vmodl.DynamicData", "vim.version.version5", [["packetsInMulticast", "long", "vim.version.version5"], ["packetsOutMulticast", "long", "vim.version.version5"], ["bytesInMulticast", "long", "vim.version.version5"], ["bytesOutMulticast", "long", "vim.version.version5"], ["packetsInUnicast", "long", "vim.version.version5"], ["packetsOutUnicast", "long", "vim.version.version5"], ["bytesInUnicast", "long", "vim.version.version5"], ["bytesOutUnicast", "long", "vim.version.version5"], ["packetsInBroadcast", "long", "vim.version.version5"], ["packetsOutBroadcast", "long", "vim.version.version5"], ["bytesInBroadcast", "long", "vim.version.version5"], ["bytesOutBroadcast", "long", "vim.version.version5"], ["packetsInDropped", "long", "vim.version.version5"], ["packetsOutDropped", "long", "vim.version.version5"], ["packetsInException", "long", "vim.version.version5"], ["packetsOutException", "long", "vim.version.version5"]])
    create_data_type("vim.dvs.ProductSpec", "DistributedVirtualSwitchProductSpec", "vmodl.DynamicData", "vim.version.version5", [["name", "string", "vim.version.version5", {:optional => true}], ["vendor", "string", "vim.version.version5", {:optional => true}], ["version", "string", "vim.version.version5", {:optional => true}], ["build", "string", "vim.version.version5", {:optional => true}], ["forwardingClass", "string", "vim.version.version5", {:optional => true}], ["bundleId", "string", "vim.version.version5", {:optional => true}], ["bundleUrl", "string", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.dvs.TrafficRule", "DvsTrafficRule", "vmodl.DynamicData", "vim.version.version9", [["key", "string", "vim.version.version9", {:optional => true}], ["description", "string", "vim.version.version9", {:optional => true}], ["sequence", "int", "vim.version.version9", {:optional => true}], ["qualifier", "vim.dvs.TrafficRule.Qualifier[]", "vim.version.version9", {:optional => true}], ["action", "vim.dvs.TrafficRule.Action", "vim.version.version9", {:optional => true}], ["direction", "string", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.dvs.TrafficRule.Qualifier", "DvsNetworkRuleQualifier", "vmodl.DynamicData", "vim.version.version9", [["key", "string", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.dvs.TrafficRule.Action", "DvsNetworkRuleAction", "vmodl.DynamicData", "vim.version.version9", nil)
    create_enum_type("vim.dvs.TrafficRule.RuleDirectionType", "DvsNetworkRuleDirectionType", "vim.version.version9", ["incomingPackets", "outgoingPackets", "both"])
    create_data_type("vim.dvs.TrafficRule.IpQualifier", "DvsIpNetworkRuleQualifier", "vim.dvs.TrafficRule.Qualifier", "vim.version.version9", [["sourceAddress", "vim.IpAddress", "vim.version.version9", {:optional => true}], ["destinationAddress", "vim.IpAddress", "vim.version.version9", {:optional => true}], ["protocol", "vim.IntExpression", "vim.version.version9", {:optional => true}], ["sourceIpPort", "vim.dvs.TrafficRule.IpPort", "vim.version.version9", {:optional => true}], ["destinationIpPort", "vim.dvs.TrafficRule.IpPort", "vim.version.version9", {:optional => true}], ["tcpFlags", "vim.IntExpression", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.dvs.TrafficRule.IpPort", "DvsIpPort", "vim.NegatableExpression", "vim.version.version9", nil)
    create_data_type("vim.dvs.TrafficRule.SingleIpPort", "DvsSingleIpPort", "vim.dvs.TrafficRule.IpPort", "vim.version.version9", [["portNumber", "int", "vim.version.version9"]])
    create_data_type("vim.dvs.TrafficRule.IpPortRange", "DvsIpPortRange", "vim.dvs.TrafficRule.IpPort", "vim.version.version9", [["startPortNumber", "int", "vim.version.version9"], ["endPortNumber", "int", "vim.version.version9"]])
    create_data_type("vim.dvs.TrafficRule.MacQualifier", "DvsMacNetworkRuleQualifier", "vim.dvs.TrafficRule.Qualifier", "vim.version.version9", [["sourceAddress", "vim.MacAddress", "vim.version.version9", {:optional => true}], ["destinationAddress", "vim.MacAddress", "vim.version.version9", {:optional => true}], ["protocol", "vim.IntExpression", "vim.version.version9", {:optional => true}], ["vlanId", "vim.IntExpression", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.dvs.TrafficRule.SystemTrafficQualifier", "DvsSystemTrafficNetworkRuleQualifier", "vim.dvs.TrafficRule.Qualifier", "vim.version.version9", [["typeOfSystemTraffic", "vim.StringExpression", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.dvs.TrafficRule.DropAction", "DvsDropNetworkRuleAction", "vim.dvs.TrafficRule.Action", "vim.version.version9", nil)
    create_data_type("vim.dvs.TrafficRule.AcceptAction", "DvsAcceptNetworkRuleAction", "vim.dvs.TrafficRule.Action", "vim.version.version9", nil)
    create_data_type("vim.dvs.TrafficRule.UpdateTagAction", "DvsUpdateTagNetworkRuleAction", "vim.dvs.TrafficRule.Action", "vim.version.version9", [["qosTag", "int", "vim.version.version9", {:optional => true}], ["dscpTag", "int", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.dvs.TrafficRule.RateLimitAction", "DvsRateLimitNetworkRuleAction", "vim.dvs.TrafficRule.Action", "vim.version.version9", [["packetsPerSecond", "int", "vim.version.version9"]])
    create_data_type("vim.dvs.TrafficRule.LogAction", "DvsLogNetworkRuleAction", "vim.dvs.TrafficRule.Action", "vim.version.version9", nil)
    create_data_type("vim.dvs.TrafficRule.GreAction", "DvsGreEncapNetworkRuleAction", "vim.dvs.TrafficRule.Action", "vim.version.version9", [["encapsulationIp", "vim.SingleIp", "vim.version.version9"]])
    create_data_type("vim.dvs.TrafficRule.MacRewriteAction", "DvsMacRewriteNetworkRuleAction", "vim.dvs.TrafficRule.Action", "vim.version.version9", [["rewriteMac", "string", "vim.version.version9"]])
    create_data_type("vim.dvs.TrafficRule.PuntAction", "DvsPuntNetworkRuleAction", "vim.dvs.TrafficRule.Action", "vim.version.version9", nil)
    create_data_type("vim.dvs.TrafficRule.CopyAction", "DvsCopyNetworkRuleAction", "vim.dvs.TrafficRule.Action", "vim.version.version9", nil)
    create_data_type("vim.dvs.TrafficRuleset", "DvsTrafficRuleset", "vmodl.DynamicData", "vim.version.version9", [["key", "string", "vim.version.version9", {:optional => true}], ["enabled", "boolean", "vim.version.version9", {:optional => true}], ["precedence", "int", "vim.version.version9", {:optional => true}], ["rules", "vim.dvs.TrafficRule[]", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.event.Event", "Event", "vmodl.DynamicData", "vim.version.version1", [["key", "int", "vim.version.version1"], ["chainId", "int", "vim.version.version1"], ["createdTime", "vmodl.DateTime", "vim.version.version1"], ["userName", "string", "vim.version.version1"], ["datacenter", "vim.event.DatacenterEventArgument", "vim.version.version1", {:optional => true}], ["computeResource", "vim.event.ComputeResourceEventArgument", "vim.version.version1", {:optional => true}], ["host", "vim.event.HostEventArgument", "vim.version.version1", {:optional => true}], ["vm", "vim.event.VmEventArgument", "vim.version.version1", {:optional => true}], ["ds", "vim.event.DatastoreEventArgument", "vim.version.version5", {:optional => true}], ["net", "vim.event.NetworkEventArgument", "vim.version.version5", {:optional => true}], ["dvs", "vim.event.DvsEventArgument", "vim.version.version5", {:optional => true}], ["fullFormattedMessage", "string", "vim.version.version1", {:optional => true}], ["changeTag", "string", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.event.Event.EventSeverity", "EventEventSeverity", "vim.version.version5", ["error", "warning", "info", "user"])
    create_data_type("vim.event.GeneralEvent", "GeneralEvent", "vim.event.Event", "vim.version.version1", [["message", "string", "vim.version.version1"]])
    create_data_type("vim.event.GeneralHostInfoEvent", "GeneralHostInfoEvent", "vim.event.GeneralEvent", "vim.version.version1", nil)
    create_data_type("vim.event.GeneralHostWarningEvent", "GeneralHostWarningEvent", "vim.event.GeneralEvent", "vim.version.version1", nil)
    create_data_type("vim.event.GeneralHostErrorEvent", "GeneralHostErrorEvent", "vim.event.GeneralEvent", "vim.version.version1", nil)
    create_data_type("vim.event.GeneralVmInfoEvent", "GeneralVmInfoEvent", "vim.event.GeneralEvent", "vim.version.version1", nil)
    create_data_type("vim.event.GeneralVmWarningEvent", "GeneralVmWarningEvent", "vim.event.GeneralEvent", "vim.version.version1", nil)
    create_data_type("vim.event.GeneralVmErrorEvent", "GeneralVmErrorEvent", "vim.event.GeneralEvent", "vim.version.version1", nil)
    create_data_type("vim.event.GeneralUserEvent", "GeneralUserEvent", "vim.event.GeneralEvent", "vim.version.version1", [["entity", "vim.event.ManagedEntityEventArgument", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.event.ExtendedEvent", "ExtendedEvent", "vim.event.GeneralEvent", "vim.version.version2", [["eventTypeId", "string", "vim.version.version2"], ["managedObject", "vmodl.ManagedObject", "vim.version.version2"], ["data", "vim.event.ExtendedEvent.Pair[]", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.event.ExtendedEvent.Pair", "ExtendedEventPair", "vmodl.DynamicData", "vim.version.version2", [["key", "string", "vim.version.version2"], ["value", "string", "vim.version.version2"]])
    create_data_type("vim.event.HealthStatusChangedEvent", "HealthStatusChangedEvent", "vim.event.Event", "vim.version.version5", [["componentId", "string", "vim.version.version5"], ["oldStatus", "string", "vim.version.version5"], ["newStatus", "string", "vim.version.version5"], ["componentName", "string", "vim.version.version5"]])
    create_data_type("vim.event.HostInventoryUnreadableEvent", "HostInventoryUnreadableEvent", "vim.event.Event", "vim.version.version5", nil)
    create_data_type("vim.event.DatacenterEvent", "DatacenterEvent", "vim.event.Event", "vim.version.version2", nil)
    create_data_type("vim.event.DatacenterCreatedEvent", "DatacenterCreatedEvent", "vim.event.DatacenterEvent", "vim.version.version2", [["parent", "vim.event.FolderEventArgument", "vim.version.version2"]])
    create_data_type("vim.event.DatacenterRenamedEvent", "DatacenterRenamedEvent", "vim.event.DatacenterEvent", "vim.version.version2", [["oldName", "string", "vim.version.version2"], ["newName", "string", "vim.version.version2"]])
    create_data_type("vim.event.SessionEvent", "SessionEvent", "vim.event.Event", "vim.version.version1", nil)
    create_data_type("vim.event.ServerStartedSessionEvent", "ServerStartedSessionEvent", "vim.event.SessionEvent", "vim.version.version1", nil)
    create_data_type("vim.event.UserLoginSessionEvent", "UserLoginSessionEvent", "vim.event.SessionEvent", "vim.version.version1", [["ipAddress", "string", "vim.version.version1"], ["userAgent", "string", "vim.version.version8", {:optional => true}], ["locale", "string", "vim.version.version1"], ["sessionId", "string", "vim.version.version1"]])
    create_data_type("vim.event.UserLogoutSessionEvent", "UserLogoutSessionEvent", "vim.event.SessionEvent", "vim.version.version1", [["ipAddress", "string", "vim.version.version8", {:optional => true}], ["userAgent", "string", "vim.version.version8", {:optional => true}], ["callCount", "long", "vim.version.version8", {:optional => true}], ["sessionId", "string", "vim.version.version8", {:optional => true}], ["loginTime", "vmodl.DateTime", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.event.BadUsernameSessionEvent", "BadUsernameSessionEvent", "vim.event.SessionEvent", "vim.version.version1", [["ipAddress", "string", "vim.version.version1"]])
    create_data_type("vim.event.AlreadyAuthenticatedSessionEvent", "AlreadyAuthenticatedSessionEvent", "vim.event.SessionEvent", "vim.version.version1", nil)
    create_data_type("vim.event.NoAccessUserEvent", "NoAccessUserEvent", "vim.event.SessionEvent", "vim.version.version1", [["ipAddress", "string", "vim.version.version1"]])
    create_data_type("vim.event.SessionTerminatedEvent", "SessionTerminatedEvent", "vim.event.SessionEvent", "vim.version.version1", [["sessionId", "string", "vim.version.version1"], ["terminatedUsername", "string", "vim.version.version1"]])
    create_data_type("vim.event.GlobalMessageChangedEvent", "GlobalMessageChangedEvent", "vim.event.SessionEvent", "vim.version.version1", [["message", "string", "vim.version.version1"]])
    create_data_type("vim.event.UpgradeEvent", "UpgradeEvent", "vim.event.Event", "vim.version.version1", [["message", "string", "vim.version.version1"]])
    create_data_type("vim.event.InfoUpgradeEvent", "InfoUpgradeEvent", "vim.event.UpgradeEvent", "vim.version.version1", nil)
    create_data_type("vim.event.WarningUpgradeEvent", "WarningUpgradeEvent", "vim.event.UpgradeEvent", "vim.version.version1", nil)
    create_data_type("vim.event.ErrorUpgradeEvent", "ErrorUpgradeEvent", "vim.event.UpgradeEvent", "vim.version.version1", nil)
    create_data_type("vim.event.UserUpgradeEvent", "UserUpgradeEvent", "vim.event.UpgradeEvent", "vim.version.version1", nil)
    create_data_type("vim.event.HostEvent", "HostEvent", "vim.event.Event", "vim.version.version1", nil)
    create_data_type("vim.event.HostDasEvent", "HostDasEvent", "vim.event.HostEvent", "vim.version.version2", nil)
    create_data_type("vim.event.HostConnectedEvent", "HostConnectedEvent", "vim.event.HostEvent", "vim.version.version1", nil)
    create_data_type("vim.event.HostDisconnectedEvent", "HostDisconnectedEvent", "vim.event.HostEvent", "vim.version.version1", [["reason", "string", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.event.HostDisconnectedEvent.ReasonCode", "HostDisconnectedEventReasonCode", "vim.version.version5", ["sslThumbprintVerifyFailed", "licenseExpired", "agentUpgrade", "userRequest", "insufficientLicenses", "agentOutOfDate", "passwordDecryptFailure", "unknown", "vcVRAMCapacityExceeded"])
    create_data_type("vim.event.HostSyncFailedEvent", "HostSyncFailedEvent", "vim.event.HostEvent", "vim.version.version5", [["reason", "vmodl.MethodFault", "vim.version.version5"]])
    create_data_type("vim.event.HostConnectionLostEvent", "HostConnectionLostEvent", "vim.event.HostEvent", "vim.version.version1", nil)
    create_data_type("vim.event.HostReconnectionFailedEvent", "HostReconnectionFailedEvent", "vim.event.HostEvent", "vim.version.version1", nil)
    create_data_type("vim.event.HostCnxFailedNoConnectionEvent", "HostCnxFailedNoConnectionEvent", "vim.event.HostEvent", "vim.version.version1", nil)
    create_data_type("vim.event.HostCnxFailedBadUsernameEvent", "HostCnxFailedBadUsernameEvent", "vim.event.HostEvent", "vim.version.version1", nil)
    create_data_type("vim.event.HostCnxFailedBadVersionEvent", "HostCnxFailedBadVersionEvent", "vim.event.HostEvent", "vim.version.version1", nil)
    create_data_type("vim.event.HostCnxFailedAlreadyManagedEvent", "HostCnxFailedAlreadyManagedEvent", "vim.event.HostEvent", "vim.version.version1", [["serverName", "string", "vim.version.version1"]])
    create_data_type("vim.event.HostCnxFailedNoLicenseEvent", "HostCnxFailedNoLicenseEvent", "vim.event.HostEvent", "vim.version.version1", nil)
    create_data_type("vim.event.HostCnxFailedNetworkErrorEvent", "HostCnxFailedNetworkErrorEvent", "vim.event.HostEvent", "vim.version.version1", nil)
    create_data_type("vim.event.HostRemovedEvent", "HostRemovedEvent", "vim.event.HostEvent", "vim.version.version1", nil)
    create_data_type("vim.event.HostCnxFailedCcagentUpgradeEvent", "HostCnxFailedCcagentUpgradeEvent", "vim.event.HostEvent", "vim.version.version1", nil)
    create_data_type("vim.event.HostCnxFailedBadCcagentEvent", "HostCnxFailedBadCcagentEvent", "vim.event.HostEvent", "vim.version.version1", nil)
    create_data_type("vim.event.HostCnxFailedEvent", "HostCnxFailedEvent", "vim.event.HostEvent", "vim.version.version1", nil)
    create_data_type("vim.event.HostCnxFailedAccountFailedEvent", "HostCnxFailedAccountFailedEvent", "vim.event.HostEvent", "vim.version.version1", nil)
    create_data_type("vim.event.HostCnxFailedNoAccessEvent", "HostCnxFailedNoAccessEvent", "vim.event.HostEvent", "vim.version.version1", nil)
    create_data_type("vim.event.HostShutdownEvent", "HostShutdownEvent", "vim.event.HostEvent", "vim.version.version1", [["reason", "string", "vim.version.version1"]])
    create_data_type("vim.event.HostCnxFailedNotFoundEvent", "HostCnxFailedNotFoundEvent", "vim.event.HostEvent", "vim.version.version1", nil)
    create_data_type("vim.event.HostCnxFailedTimeoutEvent", "HostCnxFailedTimeoutEvent", "vim.event.HostEvent", "vim.version.version1", nil)
    create_data_type("vim.event.HostUpgradeFailedEvent", "HostUpgradeFailedEvent", "vim.event.HostEvent", "vim.version.version1", nil)
    create_data_type("vim.event.EnteringMaintenanceModeEvent", "EnteringMaintenanceModeEvent", "vim.event.HostEvent", "vim.version.version1", nil)
    create_data_type("vim.event.EnteredMaintenanceModeEvent", "EnteredMaintenanceModeEvent", "vim.event.HostEvent", "vim.version.version1", nil)
    create_data_type("vim.event.ExitMaintenanceModeEvent", "ExitMaintenanceModeEvent", "vim.event.HostEvent", "vim.version.version1", nil)
    create_data_type("vim.event.CanceledHostOperationEvent", "CanceledHostOperationEvent", "vim.event.HostEvent", "vim.version.version1", nil)
    create_data_type("vim.event.TimedOutHostOperationEvent", "TimedOutHostOperationEvent", "vim.event.HostEvent", "vim.version.version1", nil)
    create_data_type("vim.event.HostDasEnabledEvent", "HostDasEnabledEvent", "vim.event.HostEvent", "vim.version.version1", nil)
    create_data_type("vim.event.HostDasDisabledEvent", "HostDasDisabledEvent", "vim.event.HostEvent", "vim.version.version1", nil)
    create_data_type("vim.event.HostDasEnablingEvent", "HostDasEnablingEvent", "vim.event.HostEvent", "vim.version.version1", nil)
    create_data_type("vim.event.HostDasDisablingEvent", "HostDasDisablingEvent", "vim.event.HostEvent", "vim.version.version1", nil)
    create_data_type("vim.event.HostDasErrorEvent", "HostDasErrorEvent", "vim.event.HostEvent", "vim.version.version1", [["message", "string", "vim.version.version2", {:optional => true}], ["reason", "string", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.event.HostDasErrorEvent.HostDasErrorReason", "HostDasErrorEventHostDasErrorReason", "vim.version.version5", ["configFailed", "timeout", "communicationInitFailed", "healthCheckScriptFailed", "agentFailed", "agentShutdown", "isolationAddressUnpingable", "other"])
    create_data_type("vim.event.HostDasOkEvent", "HostDasOkEvent", "vim.event.HostEvent", "vim.version.version1", nil)
    create_data_type("vim.event.VcAgentUpgradedEvent", "VcAgentUpgradedEvent", "vim.event.HostEvent", "vim.version.version1", nil)
    create_data_type("vim.event.VcAgentUninstalledEvent", "VcAgentUninstalledEvent", "vim.event.HostEvent", "vim.version.version5", nil)
    create_data_type("vim.event.VcAgentUpgradeFailedEvent", "VcAgentUpgradeFailedEvent", "vim.event.HostEvent", "vim.version.version1", [["reason", "string", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.event.VcAgentUninstallFailedEvent", "VcAgentUninstallFailedEvent", "vim.event.HostEvent", "vim.version.version5", [["reason", "string", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.event.HostAddedEvent", "HostAddedEvent", "vim.event.HostEvent", "vim.version.version1", nil)
    create_data_type("vim.event.HostAddFailedEvent", "HostAddFailedEvent", "vim.event.HostEvent", "vim.version.version1", [["hostname", "string", "vim.version.version1"]])
    create_data_type("vim.event.HostIpChangedEvent", "HostIpChangedEvent", "vim.event.HostEvent", "vim.version.version2", [["oldIP", "string", "vim.version.version2"], ["newIP", "string", "vim.version.version2"]])
    create_data_type("vim.event.EnteringStandbyModeEvent", "EnteringStandbyModeEvent", "vim.event.HostEvent", "vim.version.version2", nil)
    create_data_type("vim.event.DrsEnteringStandbyModeEvent", "DrsEnteringStandbyModeEvent", "vim.event.EnteringStandbyModeEvent", "vim.version.version5", nil)
    create_data_type("vim.event.EnteredStandbyModeEvent", "EnteredStandbyModeEvent", "vim.event.HostEvent", "vim.version.version2", nil)
    create_data_type("vim.event.DrsEnteredStandbyModeEvent", "DrsEnteredStandbyModeEvent", "vim.event.EnteredStandbyModeEvent", "vim.version.version2", nil)
    create_data_type("vim.event.ExitingStandbyModeEvent", "ExitingStandbyModeEvent", "vim.event.HostEvent", "vim.version.version5", nil)
    create_data_type("vim.event.DrsExitingStandbyModeEvent", "DrsExitingStandbyModeEvent", "vim.event.ExitingStandbyModeEvent", "vim.version.version5", nil)
    create_data_type("vim.event.ExitedStandbyModeEvent", "ExitedStandbyModeEvent", "vim.event.HostEvent", "vim.version.version2", nil)
    create_data_type("vim.event.DrsExitedStandbyModeEvent", "DrsExitedStandbyModeEvent", "vim.event.ExitedStandbyModeEvent", "vim.version.version2", nil)
    create_data_type("vim.event.ExitStandbyModeFailedEvent", "ExitStandbyModeFailedEvent", "vim.event.HostEvent", "vim.version.version5", nil)
    create_data_type("vim.event.DrsExitStandbyModeFailedEvent", "DrsExitStandbyModeFailedEvent", "vim.event.ExitStandbyModeFailedEvent", "vim.version.version5", nil)
    create_data_type("vim.event.UpdatedAgentBeingRestartedEvent", "UpdatedAgentBeingRestartedEvent", "vim.event.HostEvent", "vim.version.version2", nil)
    create_data_type("vim.event.AccountRemovedEvent", "AccountRemovedEvent", "vim.event.HostEvent", "vim.version.version1", [["account", "string", "vim.version.version1"], ["group", "boolean", "vim.version.version1"]])
    create_data_type("vim.event.UserPasswordChanged", "UserPasswordChanged", "vim.event.HostEvent", "vim.version.version1", [["userLogin", "string", "vim.version.version1"]])
    create_data_type("vim.event.UserAssignedToGroup", "UserAssignedToGroup", "vim.event.HostEvent", "vim.version.version1", [["userLogin", "string", "vim.version.version1"], ["group", "string", "vim.version.version1"]])
    create_data_type("vim.event.UserUnassignedFromGroup", "UserUnassignedFromGroup", "vim.event.HostEvent", "vim.version.version1", [["userLogin", "string", "vim.version.version1"], ["group", "string", "vim.version.version1"]])
    create_data_type("vim.event.DatastorePrincipalConfigured", "DatastorePrincipalConfigured", "vim.event.HostEvent", "vim.version.version1", [["datastorePrincipal", "string", "vim.version.version1"]])
    create_data_type("vim.event.VMFSDatastoreCreatedEvent", "VMFSDatastoreCreatedEvent", "vim.event.HostEvent", "vim.version.version1", [["datastore", "vim.event.DatastoreEventArgument", "vim.version.version1"]])
    create_data_type("vim.event.NASDatastoreCreatedEvent", "NASDatastoreCreatedEvent", "vim.event.HostEvent", "vim.version.version1", [["datastore", "vim.event.DatastoreEventArgument", "vim.version.version1"]])
    create_data_type("vim.event.LocalDatastoreCreatedEvent", "LocalDatastoreCreatedEvent", "vim.event.HostEvent", "vim.version.version1", [["datastore", "vim.event.DatastoreEventArgument", "vim.version.version1"]])
    create_data_type("vim.event.VMFSDatastoreExtendedEvent", "VMFSDatastoreExtendedEvent", "vim.event.HostEvent", "vim.version.version5", [["datastore", "vim.event.DatastoreEventArgument", "vim.version.version5"]])
    create_data_type("vim.event.VMFSDatastoreExpandedEvent", "VMFSDatastoreExpandedEvent", "vim.event.HostEvent", "vim.version.version5", [["datastore", "vim.event.DatastoreEventArgument", "vim.version.version5"]])
    create_data_type("vim.event.DatastoreRemovedOnHostEvent", "DatastoreRemovedOnHostEvent", "vim.event.HostEvent", "vim.version.version1", [["datastore", "vim.event.DatastoreEventArgument", "vim.version.version1"]])
    create_data_type("vim.event.DatastoreRenamedOnHostEvent", "DatastoreRenamedOnHostEvent", "vim.event.HostEvent", "vim.version.version1", [["oldName", "string", "vim.version.version1"], ["newName", "string", "vim.version.version1"]])
    create_data_type("vim.event.DuplicateIpDetectedEvent", "DuplicateIpDetectedEvent", "vim.event.HostEvent", "vim.version.version2", [["duplicateIP", "string", "vim.version.version2"], ["macAddress", "string", "vim.version.version2"]])
    create_data_type("vim.event.DatastoreDiscoveredEvent", "DatastoreDiscoveredEvent", "vim.event.HostEvent", "vim.version.version1", [["datastore", "vim.event.DatastoreEventArgument", "vim.version.version1"]])
    create_data_type("vim.event.DrsResourceConfigureFailedEvent", "DrsResourceConfigureFailedEvent", "vim.event.HostEvent", "vim.version.version1", [["reason", "vmodl.MethodFault", "vim.version.version1"]])
    create_data_type("vim.event.DrsResourceConfigureSyncedEvent", "DrsResourceConfigureSyncedEvent", "vim.event.HostEvent", "vim.version.version1", nil)
    create_data_type("vim.event.HostGetShortNameFailedEvent", "HostGetShortNameFailedEvent", "vim.event.HostEvent", "vim.version.version2", nil)
    create_data_type("vim.event.HostShortNameToIpFailedEvent", "HostShortNameToIpFailedEvent", "vim.event.HostEvent", "vim.version.version2", [["shortName", "string", "vim.version.version2"]])
    create_data_type("vim.event.HostIpToShortNameFailedEvent", "HostIpToShortNameFailedEvent", "vim.event.HostEvent", "vim.version.version2", nil)
    create_data_type("vim.event.HostPrimaryAgentNotShortNameEvent", "HostPrimaryAgentNotShortNameEvent", "vim.event.HostDasEvent", "vim.version.version2", [["primaryAgent", "string", "vim.version.version2"]])
    create_data_type("vim.event.HostNotInClusterEvent", "HostNotInClusterEvent", "vim.event.HostDasEvent", "vim.version.version2", nil)
    create_data_type("vim.event.HostIsolationIpPingFailedEvent", "HostIsolationIpPingFailedEvent", "vim.event.HostDasEvent", "vim.version.version2", [["isolationIp", "string", "vim.version.version2"]])
    create_data_type("vim.event.HostIpInconsistentEvent", "HostIpInconsistentEvent", "vim.event.HostEvent", "vim.version.version2", [["ipAddress", "string", "vim.version.version2"], ["ipAddress2", "string", "vim.version.version2"]])
    create_data_type("vim.event.HostUserWorldSwapNotEnabledEvent", "HostUserWorldSwapNotEnabledEvent", "vim.event.HostEvent", "vim.version.version5", nil)
    create_data_type("vim.event.HostNonCompliantEvent", "HostNonCompliantEvent", "vim.event.HostEvent", "vim.version.version5", nil)
    create_data_type("vim.event.HostCompliantEvent", "HostCompliantEvent", "vim.event.HostEvent", "vim.version.version5", nil)
    create_data_type("vim.event.HostComplianceCheckedEvent", "HostComplianceCheckedEvent", "vim.event.HostEvent", "vim.version.version5", [["profile", "vim.event.ProfileEventArgument", "vim.version.version5"]])
    create_data_type("vim.event.ProfileEvent", "ProfileEvent", "vim.event.Event", "vim.version.version5", [["profile", "vim.event.ProfileEventArgument", "vim.version.version5"]])
    create_data_type("vim.event.ProfileCreatedEvent", "ProfileCreatedEvent", "vim.event.ProfileEvent", "vim.version.version5", nil)
    create_data_type("vim.event.ProfileRemovedEvent", "ProfileRemovedEvent", "vim.event.ProfileEvent", "vim.version.version5", nil)
    create_data_type("vim.event.ProfileAssociatedEvent", "ProfileAssociatedEvent", "vim.event.ProfileEvent", "vim.version.version5", nil)
    create_data_type("vim.event.ProfileDissociatedEvent", "ProfileDissociatedEvent", "vim.event.ProfileEvent", "vim.version.version5", nil)
    create_data_type("vim.event.HostConfigAppliedEvent", "HostConfigAppliedEvent", "vim.event.HostEvent", "vim.version.version5", nil)
    create_data_type("vim.event.ProfileReferenceHostChangedEvent", "ProfileReferenceHostChangedEvent", "vim.event.ProfileEvent", "vim.version.version5", [["referenceHost", "vim.HostSystem", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.event.ProfileChangedEvent", "ProfileChangedEvent", "vim.event.ProfileEvent", "vim.version.version5", nil)
    create_data_type("vim.event.HostProfileAppliedEvent", "HostProfileAppliedEvent", "vim.event.HostEvent", "vim.version.version5", [["profile", "vim.event.ProfileEventArgument", "vim.version.version5"]])
    create_data_type("vim.event.HostShortNameInconsistentEvent", "HostShortNameInconsistentEvent", "vim.event.HostDasEvent", "vim.version.version2", [["shortName", "string", "vim.version.version2"], ["shortName2", "string", "vim.version.version2"]])
    create_data_type("vim.event.HostNoRedundantManagementNetworkEvent", "HostNoRedundantManagementNetworkEvent", "vim.event.HostDasEvent", "vim.version.version2", nil)
    create_data_type("vim.event.HostNoAvailableNetworksEvent", "HostNoAvailableNetworksEvent", "vim.event.HostDasEvent", "vim.version.version5", [["ips", "string", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.event.HostExtraNetworksEvent", "HostExtraNetworksEvent", "vim.event.HostDasEvent", "vim.version.version5", [["ips", "string", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.event.HostNoHAEnabledPortGroupsEvent", "HostNoHAEnabledPortGroupsEvent", "vim.event.HostDasEvent", "vim.version.version5", nil)
    create_data_type("vim.event.HostMissingNetworksEvent", "HostMissingNetworksEvent", "vim.event.HostDasEvent", "vim.version.version5", [["ips", "string", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.event.VnicPortArgument", "VnicPortArgument", "vmodl.DynamicData", "vim.version.version5", [["vnic", "string", "vim.version.version5"], ["port", "vim.dvs.PortConnection", "vim.version.version5"]])
    create_data_type("vim.event.HostVnicConnectedToCustomizedDVPortEvent", "HostVnicConnectedToCustomizedDVPortEvent", "vim.event.HostEvent", "vim.version.version5", [["vnic", "vim.event.VnicPortArgument", "vim.version.version5"]])
    create_data_type("vim.event.GhostDvsProxySwitchDetectedEvent", "GhostDvsProxySwitchDetectedEvent", "vim.event.HostEvent", "vim.version.version5", [["switchUuid", "string[]", "vim.version.version5"]])
    create_data_type("vim.event.GhostDvsProxySwitchRemovedEvent", "GhostDvsProxySwitchRemovedEvent", "vim.event.HostEvent", "vim.version.version5", [["switchUuid", "string[]", "vim.version.version5"]])
    create_data_type("vim.event.VmEvent", "VmEvent", "vim.event.Event", "vim.version.version1", [["template", "boolean", "vim.version.version1"]])
    create_data_type("vim.event.VmPoweredOffEvent", "VmPoweredOffEvent", "vim.event.VmEvent", "vim.version.version1", nil)
    create_data_type("vim.event.VmPoweredOnEvent", "VmPoweredOnEvent", "vim.event.VmEvent", "vim.version.version1", nil)
    create_data_type("vim.event.VmSuspendedEvent", "VmSuspendedEvent", "vim.event.VmEvent", "vim.version.version1", nil)
    create_data_type("vim.event.VmStartingEvent", "VmStartingEvent", "vim.event.VmEvent", "vim.version.version1", nil)
    create_data_type("vim.event.VmStoppingEvent", "VmStoppingEvent", "vim.event.VmEvent", "vim.version.version1", nil)
    create_data_type("vim.event.VmSuspendingEvent", "VmSuspendingEvent", "vim.event.VmEvent", "vim.version.version1", nil)
    create_data_type("vim.event.VmResumingEvent", "VmResumingEvent", "vim.event.VmEvent", "vim.version.version1", nil)
    create_data_type("vim.event.VmDisconnectedEvent", "VmDisconnectedEvent", "vim.event.VmEvent", "vim.version.version1", nil)
    create_data_type("vim.event.VmRemoteConsoleConnectedEvent", "VmRemoteConsoleConnectedEvent", "vim.event.VmEvent", "vim.version.version5", nil)
    create_data_type("vim.event.VmRemoteConsoleDisconnectedEvent", "VmRemoteConsoleDisconnectedEvent", "vim.event.VmEvent", "vim.version.version5", nil)
    create_data_type("vim.event.VmDiscoveredEvent", "VmDiscoveredEvent", "vim.event.VmEvent", "vim.version.version1", nil)
    create_data_type("vim.event.VmOrphanedEvent", "VmOrphanedEvent", "vim.event.VmEvent", "vim.version.version1", nil)
    create_data_type("vim.event.VmBeingCreatedEvent", "VmBeingCreatedEvent", "vim.event.VmEvent", "vim.version.version1", [["configSpec", "vim.vm.ConfigSpec", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.event.VmCreatedEvent", "VmCreatedEvent", "vim.event.VmEvent", "vim.version.version1", nil)
    create_data_type("vim.event.VmStartRecordingEvent", "VmStartRecordingEvent", "vim.event.VmEvent", "vim.version.version5", nil)
    create_data_type("vim.event.VmEndRecordingEvent", "VmEndRecordingEvent", "vim.event.VmEvent", "vim.version.version5", nil)
    create_data_type("vim.event.VmStartReplayingEvent", "VmStartReplayingEvent", "vim.event.VmEvent", "vim.version.version5", nil)
    create_data_type("vim.event.VmEndReplayingEvent", "VmEndReplayingEvent", "vim.event.VmEvent", "vim.version.version5", nil)
    create_data_type("vim.event.VmRegisteredEvent", "VmRegisteredEvent", "vim.event.VmEvent", "vim.version.version1", nil)
    create_data_type("vim.event.VmAutoRenameEvent", "VmAutoRenameEvent", "vim.event.VmEvent", "vim.version.version1", [["oldName", "string", "vim.version.version1"], ["newName", "string", "vim.version.version1"]])
    create_data_type("vim.event.VmBeingHotMigratedEvent", "VmBeingHotMigratedEvent", "vim.event.VmEvent", "vim.version.version1", [["destHost", "vim.event.HostEventArgument", "vim.version.version1"], ["destDatacenter", "vim.event.DatacenterEventArgument", "vim.version.version7", {:optional => true}], ["destDatastore", "vim.event.DatastoreEventArgument", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.event.VmResettingEvent", "VmResettingEvent", "vim.event.VmEvent", "vim.version.version1", nil)
    create_data_type("vim.event.VmStaticMacConflictEvent", "VmStaticMacConflictEvent", "vim.event.VmEvent", "vim.version.version1", [["conflictedVm", "vim.event.VmEventArgument", "vim.version.version1"], ["mac", "string", "vim.version.version1"]])
    create_data_type("vim.event.VmMacConflictEvent", "VmMacConflictEvent", "vim.event.VmEvent", "vim.version.version1", [["conflictedVm", "vim.event.VmEventArgument", "vim.version.version1"], ["mac", "string", "vim.version.version1"]])
    create_data_type("vim.event.VmBeingDeployedEvent", "VmBeingDeployedEvent", "vim.event.VmEvent", "vim.version.version1", [["srcTemplate", "vim.event.VmEventArgument", "vim.version.version1"]])
    create_data_type("vim.event.VmDeployFailedEvent", "VmDeployFailedEvent", "vim.event.VmEvent", "vim.version.version1", [["destDatastore", "vim.event.EntityEventArgument", "vim.version.version1"], ["reason", "vmodl.MethodFault", "vim.version.version1"]])
    create_data_type("vim.event.VmDeployedEvent", "VmDeployedEvent", "vim.event.VmEvent", "vim.version.version1", [["srcTemplate", "vim.event.VmEventArgument", "vim.version.version1"]])
    create_data_type("vim.event.VmMacChangedEvent", "VmMacChangedEvent", "vim.event.VmEvent", "vim.version.version1", [["adapter", "string", "vim.version.version1"], ["oldMac", "string", "vim.version.version1"], ["newMac", "string", "vim.version.version1"]])
    create_data_type("vim.event.VmMacAssignedEvent", "VmMacAssignedEvent", "vim.event.VmEvent", "vim.version.version1", [["adapter", "string", "vim.version.version1"], ["mac", "string", "vim.version.version1"]])
    create_data_type("vim.event.VmUuidConflictEvent", "VmUuidConflictEvent", "vim.event.VmEvent", "vim.version.version1", [["conflictedVm", "vim.event.VmEventArgument", "vim.version.version1"], ["uuid", "string", "vim.version.version1"]])
    create_data_type("vim.event.VmInstanceUuidConflictEvent", "VmInstanceUuidConflictEvent", "vim.event.VmEvent", "vim.version.version5", [["conflictedVm", "vim.event.VmEventArgument", "vim.version.version5"], ["instanceUuid", "string", "vim.version.version5"]])
    create_data_type("vim.event.VmBeingMigratedEvent", "VmBeingMigratedEvent", "vim.event.VmEvent", "vim.version.version1", [["destHost", "vim.event.HostEventArgument", "vim.version.version1"], ["destDatacenter", "vim.event.DatacenterEventArgument", "vim.version.version7", {:optional => true}], ["destDatastore", "vim.event.DatastoreEventArgument", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.event.VmFailedMigrateEvent", "VmFailedMigrateEvent", "vim.event.VmEvent", "vim.version.version1", [["destHost", "vim.event.HostEventArgument", "vim.version.version1"], ["reason", "vmodl.MethodFault", "vim.version.version1"], ["destDatacenter", "vim.event.DatacenterEventArgument", "vim.version.version7", {:optional => true}], ["destDatastore", "vim.event.DatastoreEventArgument", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.event.VmMigratedEvent", "VmMigratedEvent", "vim.event.VmEvent", "vim.version.version1", [["sourceHost", "vim.event.HostEventArgument", "vim.version.version1"], ["sourceDatacenter", "vim.event.DatacenterEventArgument", "vim.version.version7", {:optional => true}], ["sourceDatastore", "vim.event.DatastoreEventArgument", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.event.VmUnsupportedStartingEvent", "VmUnsupportedStartingEvent", "vim.event.VmStartingEvent", "vim.version.version1", [["guestId", "string", "vim.version.version1"]])
    create_data_type("vim.event.DrsVmMigratedEvent", "DrsVmMigratedEvent", "vim.event.VmMigratedEvent", "vim.version.version1", nil)
    create_data_type("vim.event.DrsVmPoweredOnEvent", "DrsVmPoweredOnEvent", "vim.event.VmPoweredOnEvent", "vim.version.version2", nil)
    create_data_type("vim.event.DrsRuleViolationEvent", "DrsRuleViolationEvent", "vim.event.VmEvent", "vim.version.version6", nil)
    create_data_type("vim.event.DrsRuleComplianceEvent", "DrsRuleComplianceEvent", "vim.event.VmEvent", "vim.version.version6", nil)
    create_data_type("vim.event.VmRelocateSpecEvent", "VmRelocateSpecEvent", "vim.event.VmEvent", "vim.version.version1", nil)
    create_data_type("vim.event.VmBeingRelocatedEvent", "VmBeingRelocatedEvent", "vim.event.VmRelocateSpecEvent", "vim.version.version1", [["destHost", "vim.event.HostEventArgument", "vim.version.version1"], ["destDatacenter", "vim.event.DatacenterEventArgument", "vim.version.version7", {:optional => true}], ["destDatastore", "vim.event.DatastoreEventArgument", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.event.VmRelocatedEvent", "VmRelocatedEvent", "vim.event.VmRelocateSpecEvent", "vim.version.version1", [["sourceHost", "vim.event.HostEventArgument", "vim.version.version1"], ["sourceDatacenter", "vim.event.DatacenterEventArgument", "vim.version.version7", {:optional => true}], ["sourceDatastore", "vim.event.DatastoreEventArgument", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.event.VmRelocateFailedEvent", "VmRelocateFailedEvent", "vim.event.VmRelocateSpecEvent", "vim.version.version1", [["destHost", "vim.event.HostEventArgument", "vim.version.version1"], ["reason", "vmodl.MethodFault", "vim.version.version1"], ["destDatacenter", "vim.event.DatacenterEventArgument", "vim.version.version7", {:optional => true}], ["destDatastore", "vim.event.DatastoreEventArgument", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.event.VmEmigratingEvent", "VmEmigratingEvent", "vim.event.VmEvent", "vim.version.version1", nil)
    create_data_type("vim.event.VmCloneEvent", "VmCloneEvent", "vim.event.VmEvent", "vim.version.version1", nil)
    create_data_type("vim.event.VmBeingClonedEvent", "VmBeingClonedEvent", "vim.event.VmCloneEvent", "vim.version.version1", [["destFolder", "vim.event.FolderEventArgument", "vim.version.version1"], ["destName", "string", "vim.version.version1"], ["destHost", "vim.event.HostEventArgument", "vim.version.version1"]])
    create_data_type("vim.event.VmBeingClonedNoFolderEvent", "VmBeingClonedNoFolderEvent", "vim.event.VmCloneEvent", "vim.version.version6", [["destName", "string", "vim.version.version6"], ["destHost", "vim.event.HostEventArgument", "vim.version.version6"]])
    create_data_type("vim.event.VmCloneFailedEvent", "VmCloneFailedEvent", "vim.event.VmCloneEvent", "vim.version.version1", [["destFolder", "vim.event.FolderEventArgument", "vim.version.version1"], ["destName", "string", "vim.version.version1"], ["destHost", "vim.event.HostEventArgument", "vim.version.version1"], ["reason", "vmodl.MethodFault", "vim.version.version1"]])
    create_data_type("vim.event.VmClonedEvent", "VmClonedEvent", "vim.event.VmCloneEvent", "vim.version.version1", [["sourceVm", "vim.event.VmEventArgument", "vim.version.version1"]])
    create_data_type("vim.event.VmResourceReallocatedEvent", "VmResourceReallocatedEvent", "vim.event.VmEvent", "vim.version.version1", nil)
    create_data_type("vim.event.VmRenamedEvent", "VmRenamedEvent", "vim.event.VmEvent", "vim.version.version1", [["oldName", "string", "vim.version.version1"], ["newName", "string", "vim.version.version1"]])
    create_data_type("vim.event.VmDateRolledBackEvent", "VmDateRolledBackEvent", "vim.event.VmEvent", "vim.version.version1", nil)
    create_data_type("vim.event.VmNoNetworkAccessEvent", "VmNoNetworkAccessEvent", "vim.event.VmEvent", "vim.version.version1", [["destHost", "vim.event.HostEventArgument", "vim.version.version1"]])
    create_data_type("vim.event.VmDiskFailedEvent", "VmDiskFailedEvent", "vim.event.VmEvent", "vim.version.version1", [["disk", "string", "vim.version.version1"], ["reason", "vmodl.MethodFault", "vim.version.version1"]])
    create_data_type("vim.event.VmFailedToPowerOnEvent", "VmFailedToPowerOnEvent", "vim.event.VmEvent", "vim.version.version1", [["reason", "vmodl.MethodFault", "vim.version.version1"]])
    create_data_type("vim.event.VmFailedToPowerOffEvent", "VmFailedToPowerOffEvent", "vim.event.VmEvent", "vim.version.version1", [["reason", "vmodl.MethodFault", "vim.version.version1"]])
    create_data_type("vim.event.VmFailedToSuspendEvent", "VmFailedToSuspendEvent", "vim.event.VmEvent", "vim.version.version1", [["reason", "vmodl.MethodFault", "vim.version.version1"]])
    create_data_type("vim.event.VmFailedToResetEvent", "VmFailedToResetEvent", "vim.event.VmEvent", "vim.version.version1", [["reason", "vmodl.MethodFault", "vim.version.version1"]])
    create_data_type("vim.event.VmFailedToShutdownGuestEvent", "VmFailedToShutdownGuestEvent", "vim.event.VmEvent", "vim.version.version1", [["reason", "vmodl.MethodFault", "vim.version.version1"]])
    create_data_type("vim.event.VmFailedToRebootGuestEvent", "VmFailedToRebootGuestEvent", "vim.event.VmEvent", "vim.version.version1", [["reason", "vmodl.MethodFault", "vim.version.version1"]])
    create_data_type("vim.event.VmFailedToStandbyGuestEvent", "VmFailedToStandbyGuestEvent", "vim.event.VmEvent", "vim.version.version1", [["reason", "vmodl.MethodFault", "vim.version.version1"]])
    create_data_type("vim.event.VmRemovedEvent", "VmRemovedEvent", "vim.event.VmEvent", "vim.version.version1", nil)
    create_data_type("vim.event.VmGuestShutdownEvent", "VmGuestShutdownEvent", "vim.event.VmEvent", "vim.version.version1", nil)
    create_data_type("vim.event.VmGuestRebootEvent", "VmGuestRebootEvent", "vim.event.VmEvent", "vim.version.version1", nil)
    create_data_type("vim.event.VmGuestStandbyEvent", "VmGuestStandbyEvent", "vim.event.VmEvent", "vim.version.version1", nil)
    create_data_type("vim.event.VmUpgradingEvent", "VmUpgradingEvent", "vim.event.VmEvent", "vim.version.version1", [["version", "string", "vim.version.version1"]])
    create_data_type("vim.event.VmUpgradeCompleteEvent", "VmUpgradeCompleteEvent", "vim.event.VmEvent", "vim.version.version1", [["version", "string", "vim.version.version1"]])
    create_data_type("vim.event.VmUpgradeFailedEvent", "VmUpgradeFailedEvent", "vim.event.VmEvent", "vim.version.version1", nil)
    create_data_type("vim.event.VmRestartedOnAlternateHostEvent", "VmRestartedOnAlternateHostEvent", "vim.event.VmPoweredOnEvent", "vim.version.version1", [["sourceHost", "vim.event.HostEventArgument", "vim.version.version1"]])
    create_data_type("vim.event.VmReconfiguredEvent", "VmReconfiguredEvent", "vim.event.VmEvent", "vim.version.version1", [["configSpec", "vim.vm.ConfigSpec", "vim.version.version1"]])
    create_data_type("vim.event.VmMessageEvent", "VmMessageEvent", "vim.event.VmEvent", "vim.version.version1", [["message", "string", "vim.version.version1"], ["messageInfo", "vim.vm.Message[]", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.event.VmMessageWarningEvent", "VmMessageWarningEvent", "vim.event.VmEvent", "vim.version.version5", [["message", "string", "vim.version.version5"], ["messageInfo", "vim.vm.Message[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.event.VmMessageErrorEvent", "VmMessageErrorEvent", "vim.event.VmEvent", "vim.version.version5", [["message", "string", "vim.version.version5"], ["messageInfo", "vim.vm.Message[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.event.VmConfigMissingEvent", "VmConfigMissingEvent", "vim.event.VmEvent", "vim.version.version1", nil)
    create_data_type("vim.event.VmPowerOffOnIsolationEvent", "VmPowerOffOnIsolationEvent", "vim.event.VmPoweredOffEvent", "vim.version.version1", [["isolatedHost", "vim.event.HostEventArgument", "vim.version.version1"]])
    create_data_type("vim.event.VmShutdownOnIsolationEvent", "VmShutdownOnIsolationEvent", "vim.event.VmPoweredOffEvent", "vim.version.version5", [["isolatedHost", "vim.event.HostEventArgument", "vim.version.version5"], ["shutdownResult", "string", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.event.VmShutdownOnIsolationEvent.Operation", "VmShutdownOnIsolationEventOperation", "vim.version.version5", ["shutdown", "poweredOff"])
    create_data_type("vim.event.VmFailoverFailed", "VmFailoverFailed", "vim.event.VmEvent", "vim.version.version1", [["reason", "vmodl.MethodFault", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.event.VmDasBeingResetEvent", "VmDasBeingResetEvent", "vim.event.VmEvent", "vim.version.version5", [["reason", "string", "vim.version.version6", {:optional => true}]])
    create_enum_type("vim.event.VmDasBeingResetEvent.ReasonCode", "VmDasBeingResetEventReasonCode", "vim.version.version6", ["vmtoolsHeartbeatFailure", "appHeartbeatFailure", "appImmediateResetRequest", "vmcpResetApdCleared"])
    create_data_type("vim.event.VmDasResetFailedEvent", "VmDasResetFailedEvent", "vim.event.VmEvent", "vim.version.version5", nil)
    create_data_type("vim.event.VmMaxRestartCountReached", "VmMaxRestartCountReached", "vim.event.VmEvent", "vim.version.version5", nil)
    create_data_type("vim.event.VmMaxFTRestartCountReached", "VmMaxFTRestartCountReached", "vim.event.VmEvent", "vim.version.version5", nil)
    create_data_type("vim.event.VmDasBeingResetWithScreenshotEvent", "VmDasBeingResetWithScreenshotEvent", "vim.event.VmDasBeingResetEvent", "vim.version.version5", [["screenshotFilePath", "string", "vim.version.version5"]])
    create_data_type("vim.event.NotEnoughResourcesToStartVmEvent", "NotEnoughResourcesToStartVmEvent", "vim.event.VmEvent", "vim.version.version1", nil)
    create_data_type("vim.event.VmUuidAssignedEvent", "VmUuidAssignedEvent", "vim.event.VmEvent", "vim.version.version1", [["uuid", "string", "vim.version.version1"]])
    create_data_type("vim.event.VmInstanceUuidAssignedEvent", "VmInstanceUuidAssignedEvent", "vim.event.VmEvent", "vim.version.version5", [["instanceUuid", "string", "vim.version.version5"]])
    create_data_type("vim.event.VmUuidChangedEvent", "VmUuidChangedEvent", "vim.event.VmEvent", "vim.version.version1", [["oldUuid", "string", "vim.version.version1"], ["newUuid", "string", "vim.version.version1"]])
    create_data_type("vim.event.VmInstanceUuidChangedEvent", "VmInstanceUuidChangedEvent", "vim.event.VmEvent", "vim.version.version5", [["oldInstanceUuid", "string", "vim.version.version5"], ["newInstanceUuid", "string", "vim.version.version5"]])
    create_data_type("vim.event.VmWwnConflictEvent", "VmWwnConflictEvent", "vim.event.VmEvent", "vim.version.version2", [["conflictedVms", "vim.event.VmEventArgument[]", "vim.version.version2", {:optional => true}], ["conflictedHosts", "vim.event.HostEventArgument[]", "vim.version.version2", {:optional => true}], ["wwn", "long", "vim.version.version2"]])
    create_data_type("vim.event.VmAcquiredMksTicketEvent", "VmAcquiredMksTicketEvent", "vim.event.VmEvent", "vim.version.version2", nil)
    create_data_type("vim.event.VmAcquiredTicketEvent", "VmAcquiredTicketEvent", "vim.event.VmEvent", "vim.version.version6", [["ticketType", "string", "vim.version.version6"]])
    create_data_type("vim.event.HostWwnConflictEvent", "HostWwnConflictEvent", "vim.event.HostEvent", "vim.version.version2", [["conflictedVms", "vim.event.VmEventArgument[]", "vim.version.version2", {:optional => true}], ["conflictedHosts", "vim.event.HostEventArgument[]", "vim.version.version2", {:optional => true}], ["wwn", "long", "vim.version.version2"]])
    create_data_type("vim.event.VmWwnAssignedEvent", "VmWwnAssignedEvent", "vim.event.VmEvent", "vim.version.version2", [["nodeWwns", "long[]", "vim.version.version2"], ["portWwns", "long[]", "vim.version.version2"]])
    create_data_type("vim.event.VmWwnChangedEvent", "VmWwnChangedEvent", "vim.event.VmEvent", "vim.version.version2", [["oldNodeWwns", "long[]", "vim.version.version2", {:optional => true}], ["oldPortWwns", "long[]", "vim.version.version2", {:optional => true}], ["newNodeWwns", "long[]", "vim.version.version2", {:optional => true}], ["newPortWwns", "long[]", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.event.VmSecondaryAddedEvent", "VmSecondaryAddedEvent", "vim.event.VmEvent", "vim.version.version5", nil)
    create_data_type("vim.event.VmFaultToleranceTurnedOffEvent", "VmFaultToleranceTurnedOffEvent", "vim.event.VmEvent", "vim.version.version5", nil)
    create_data_type("vim.event.VmSecondaryDisabledEvent", "VmSecondaryDisabledEvent", "vim.event.VmEvent", "vim.version.version5", nil)
    create_data_type("vim.event.VmSecondaryDisabledBySystemEvent", "VmSecondaryDisabledBySystemEvent", "vim.event.VmEvent", "vim.version.version5", [["reason", "vmodl.MethodFault", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.event.VmSecondaryEnabledEvent", "VmSecondaryEnabledEvent", "vim.event.VmEvent", "vim.version.version5", nil)
    create_data_type("vim.event.VmStartingSecondaryEvent", "VmStartingSecondaryEvent", "vim.event.VmEvent", "vim.version.version5", nil)
    create_data_type("vim.event.VmSecondaryStartedEvent", "VmSecondaryStartedEvent", "vim.event.VmEvent", "vim.version.version5", nil)
    create_data_type("vim.event.VmFailedUpdatingSecondaryConfig", "VmFailedUpdatingSecondaryConfig", "vim.event.VmEvent", "vim.version.version5", nil)
    create_data_type("vim.event.VmFailedStartingSecondaryEvent", "VmFailedStartingSecondaryEvent", "vim.event.VmEvent", "vim.version.version5", [["reason", "string", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.event.VmFailedStartingSecondaryEvent.FailureReason", "VmFailedStartingSecondaryEventFailureReason", "vim.version.version5", ["incompatibleHost", "loginFailed", "registerVmFailed", "migrateFailed"])
    create_data_type("vim.event.VmTimedoutStartingSecondaryEvent", "VmTimedoutStartingSecondaryEvent", "vim.event.VmEvent", "vim.version.version5", [["timeout", "long", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.event.VmNoCompatibleHostForSecondaryEvent", "VmNoCompatibleHostForSecondaryEvent", "vim.event.VmEvent", "vim.version.version5", nil)
    create_data_type("vim.event.VmPrimaryFailoverEvent", "VmPrimaryFailoverEvent", "vim.event.VmEvent", "vim.version.version5", [["reason", "string", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.event.VmFaultToleranceVmTerminatedEvent", "VmFaultToleranceVmTerminatedEvent", "vim.event.VmEvent", "vim.version.version5", [["reason", "string", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.event.HostWwnChangedEvent", "HostWwnChangedEvent", "vim.event.HostEvent", "vim.version.version2", [["oldNodeWwns", "long[]", "vim.version.version2", {:optional => true}], ["oldPortWwns", "long[]", "vim.version.version2", {:optional => true}], ["newNodeWwns", "long[]", "vim.version.version2", {:optional => true}], ["newPortWwns", "long[]", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.event.HostAdminDisableEvent", "HostAdminDisableEvent", "vim.event.HostEvent", "vim.version.version2", nil)
    create_data_type("vim.event.HostAdminEnableEvent", "HostAdminEnableEvent", "vim.event.HostEvent", "vim.version.version2", nil)
    create_data_type("vim.event.VmFailedRelayoutOnVmfs2DatastoreEvent", "VmFailedRelayoutOnVmfs2DatastoreEvent", "vim.event.VmEvent", "vim.version.version1", nil)
    create_data_type("vim.event.VmFailedRelayoutEvent", "VmFailedRelayoutEvent", "vim.event.VmEvent", "vim.version.version1", [["reason", "vmodl.MethodFault", "vim.version.version1"]])
    create_data_type("vim.event.VmRelayoutSuccessfulEvent", "VmRelayoutSuccessfulEvent", "vim.event.VmEvent", "vim.version.version1", nil)
    create_data_type("vim.event.VmRelayoutUpToDateEvent", "VmRelayoutUpToDateEvent", "vim.event.VmEvent", "vim.version.version1", nil)
    create_data_type("vim.event.VmConnectedEvent", "VmConnectedEvent", "vim.event.VmEvent", "vim.version.version1", nil)
    create_data_type("vim.event.VmPoweringOnWithCustomizedDVPortEvent", "VmPoweringOnWithCustomizedDVPortEvent", "vim.event.VmEvent", "vim.version.version5", [["vnic", "vim.event.VnicPortArgument[]", "vim.version.version5"]])
    create_data_type("vim.event.VmDasUpdateErrorEvent", "VmDasUpdateErrorEvent", "vim.event.VmEvent", "vim.version.version1", nil)
    create_data_type("vim.event.NoMaintenanceModeDrsRecommendationForVM", "NoMaintenanceModeDrsRecommendationForVM", "vim.event.VmEvent", "vim.version.version1", nil)
    create_data_type("vim.event.VmDasUpdateOkEvent", "VmDasUpdateOkEvent", "vim.event.VmEvent", "vim.version.version1", nil)
    create_data_type("vim.event.ScheduledTaskEvent", "ScheduledTaskEvent", "vim.event.Event", "vim.version.version1", [["scheduledTask", "vim.event.ScheduledTaskEventArgument", "vim.version.version1"], ["entity", "vim.event.ManagedEntityEventArgument", "vim.version.version1"]])
    create_data_type("vim.event.ScheduledTaskCreatedEvent", "ScheduledTaskCreatedEvent", "vim.event.ScheduledTaskEvent", "vim.version.version1", nil)
    create_data_type("vim.event.ScheduledTaskStartedEvent", "ScheduledTaskStartedEvent", "vim.event.ScheduledTaskEvent", "vim.version.version1", nil)
    create_data_type("vim.event.ScheduledTaskRemovedEvent", "ScheduledTaskRemovedEvent", "vim.event.ScheduledTaskEvent", "vim.version.version1", nil)
    create_data_type("vim.event.ScheduledTaskReconfiguredEvent", "ScheduledTaskReconfiguredEvent", "vim.event.ScheduledTaskEvent", "vim.version.version1", nil)
    create_data_type("vim.event.ScheduledTaskCompletedEvent", "ScheduledTaskCompletedEvent", "vim.event.ScheduledTaskEvent", "vim.version.version1", nil)
    create_data_type("vim.event.ScheduledTaskFailedEvent", "ScheduledTaskFailedEvent", "vim.event.ScheduledTaskEvent", "vim.version.version1", [["reason", "vmodl.MethodFault", "vim.version.version1"]])
    create_data_type("vim.event.ScheduledTaskEmailCompletedEvent", "ScheduledTaskEmailCompletedEvent", "vim.event.ScheduledTaskEvent", "vim.version.version1", [["to", "string", "vim.version.version1"]])
    create_data_type("vim.event.ScheduledTaskEmailFailedEvent", "ScheduledTaskEmailFailedEvent", "vim.event.ScheduledTaskEvent", "vim.version.version1", [["to", "string", "vim.version.version1"], ["reason", "vmodl.MethodFault", "vim.version.version1"]])
    create_data_type("vim.event.AlarmEvent", "AlarmEvent", "vim.event.Event", "vim.version.version1", [["alarm", "vim.event.AlarmEventArgument", "vim.version.version1"]])
    create_data_type("vim.event.AlarmCreatedEvent", "AlarmCreatedEvent", "vim.event.AlarmEvent", "vim.version.version1", [["entity", "vim.event.ManagedEntityEventArgument", "vim.version.version1"]])
    create_data_type("vim.event.AlarmStatusChangedEvent", "AlarmStatusChangedEvent", "vim.event.AlarmEvent", "vim.version.version1", [["source", "vim.event.ManagedEntityEventArgument", "vim.version.version1"], ["entity", "vim.event.ManagedEntityEventArgument", "vim.version.version1"], ["from", "string", "vim.version.version1"], ["to", "string", "vim.version.version1"]])
    create_data_type("vim.event.AlarmActionTriggeredEvent", "AlarmActionTriggeredEvent", "vim.event.AlarmEvent", "vim.version.version1", [["source", "vim.event.ManagedEntityEventArgument", "vim.version.version1"], ["entity", "vim.event.ManagedEntityEventArgument", "vim.version.version1"]])
    create_data_type("vim.event.AlarmEmailCompletedEvent", "AlarmEmailCompletedEvent", "vim.event.AlarmEvent", "vim.version.version1", [["entity", "vim.event.ManagedEntityEventArgument", "vim.version.version1"], ["to", "string", "vim.version.version1"]])
    create_data_type("vim.event.AlarmEmailFailedEvent", "AlarmEmailFailedEvent", "vim.event.AlarmEvent", "vim.version.version1", [["entity", "vim.event.ManagedEntityEventArgument", "vim.version.version1"], ["to", "string", "vim.version.version1"], ["reason", "vmodl.MethodFault", "vim.version.version1"]])
    create_data_type("vim.event.AlarmSnmpCompletedEvent", "AlarmSnmpCompletedEvent", "vim.event.AlarmEvent", "vim.version.version1", [["entity", "vim.event.ManagedEntityEventArgument", "vim.version.version1"]])
    create_data_type("vim.event.AlarmSnmpFailedEvent", "AlarmSnmpFailedEvent", "vim.event.AlarmEvent", "vim.version.version1", [["entity", "vim.event.ManagedEntityEventArgument", "vim.version.version1"], ["reason", "vmodl.MethodFault", "vim.version.version1"]])
    create_data_type("vim.event.AlarmScriptCompleteEvent", "AlarmScriptCompleteEvent", "vim.event.AlarmEvent", "vim.version.version1", [["entity", "vim.event.ManagedEntityEventArgument", "vim.version.version1"], ["script", "string", "vim.version.version1"]])
    create_data_type("vim.event.AlarmScriptFailedEvent", "AlarmScriptFailedEvent", "vim.event.AlarmEvent", "vim.version.version1", [["entity", "vim.event.ManagedEntityEventArgument", "vim.version.version1"], ["script", "string", "vim.version.version1"], ["reason", "vmodl.MethodFault", "vim.version.version1"]])
    create_data_type("vim.event.AlarmRemovedEvent", "AlarmRemovedEvent", "vim.event.AlarmEvent", "vim.version.version1", [["entity", "vim.event.ManagedEntityEventArgument", "vim.version.version1"]])
    create_data_type("vim.event.AlarmReconfiguredEvent", "AlarmReconfiguredEvent", "vim.event.AlarmEvent", "vim.version.version1", [["entity", "vim.event.ManagedEntityEventArgument", "vim.version.version1"]])
    create_data_type("vim.event.AlarmAcknowledgedEvent", "AlarmAcknowledgedEvent", "vim.event.AlarmEvent", "vim.version.version7", [["source", "vim.event.ManagedEntityEventArgument", "vim.version.version7"], ["entity", "vim.event.ManagedEntityEventArgument", "vim.version.version7"]])
    create_data_type("vim.event.AlarmClearedEvent", "AlarmClearedEvent", "vim.event.AlarmEvent", "vim.version.version7", [["source", "vim.event.ManagedEntityEventArgument", "vim.version.version7"], ["entity", "vim.event.ManagedEntityEventArgument", "vim.version.version7"], ["from", "string", "vim.version.version7"]])
    create_data_type("vim.event.CustomFieldEvent", "CustomFieldEvent", "vim.event.Event", "vim.version.version1", nil)
    create_data_type("vim.event.CustomFieldDefEvent", "CustomFieldDefEvent", "vim.event.CustomFieldEvent", "vim.version.version1", [["fieldKey", "int", "vim.version.version1"], ["name", "string", "vim.version.version1"]])
    create_data_type("vim.event.CustomFieldDefAddedEvent", "CustomFieldDefAddedEvent", "vim.event.CustomFieldDefEvent", "vim.version.version1", nil)
    create_data_type("vim.event.CustomFieldDefRemovedEvent", "CustomFieldDefRemovedEvent", "vim.event.CustomFieldDefEvent", "vim.version.version1", nil)
    create_data_type("vim.event.CustomFieldDefRenamedEvent", "CustomFieldDefRenamedEvent", "vim.event.CustomFieldDefEvent", "vim.version.version1", [["newName", "string", "vim.version.version1"]])
    create_data_type("vim.event.CustomFieldValueChangedEvent", "CustomFieldValueChangedEvent", "vim.event.CustomFieldEvent", "vim.version.version1", [["entity", "vim.event.ManagedEntityEventArgument", "vim.version.version1"], ["fieldKey", "int", "vim.version.version1"], ["name", "string", "vim.version.version1"], ["value", "string", "vim.version.version1"]])
    create_data_type("vim.event.AuthorizationEvent", "AuthorizationEvent", "vim.event.Event", "vim.version.version1", nil)
    create_data_type("vim.event.PermissionEvent", "PermissionEvent", "vim.event.AuthorizationEvent", "vim.version.version1", [["entity", "vim.event.ManagedEntityEventArgument", "vim.version.version1"], ["principal", "string", "vim.version.version1"], ["group", "boolean", "vim.version.version1"]])
    create_data_type("vim.event.PermissionAddedEvent", "PermissionAddedEvent", "vim.event.PermissionEvent", "vim.version.version1", [["role", "vim.event.RoleEventArgument", "vim.version.version1"], ["propagate", "boolean", "vim.version.version1"]])
    create_data_type("vim.event.PermissionUpdatedEvent", "PermissionUpdatedEvent", "vim.event.PermissionEvent", "vim.version.version1", [["role", "vim.event.RoleEventArgument", "vim.version.version1"], ["propagate", "boolean", "vim.version.version1"]])
    create_data_type("vim.event.PermissionRemovedEvent", "PermissionRemovedEvent", "vim.event.PermissionEvent", "vim.version.version1", nil)
    create_data_type("vim.event.RoleEvent", "RoleEvent", "vim.event.AuthorizationEvent", "vim.version.version1", [["role", "vim.event.RoleEventArgument", "vim.version.version1"]])
    create_data_type("vim.event.RoleAddedEvent", "RoleAddedEvent", "vim.event.RoleEvent", "vim.version.version1", [["privilegeList", "string[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.event.RoleUpdatedEvent", "RoleUpdatedEvent", "vim.event.RoleEvent", "vim.version.version1", [["privilegeList", "string[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.event.RoleRemovedEvent", "RoleRemovedEvent", "vim.event.RoleEvent", "vim.version.version1", nil)
    create_data_type("vim.event.DatastoreEvent", "DatastoreEvent", "vim.event.Event", "vim.version.version1", [["datastore", "vim.event.DatastoreEventArgument", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.event.DatastoreDestroyedEvent", "DatastoreDestroyedEvent", "vim.event.DatastoreEvent", "vim.version.version1", nil)
    create_data_type("vim.event.DatastoreRenamedEvent", "DatastoreRenamedEvent", "vim.event.DatastoreEvent", "vim.version.version1", [["oldName", "string", "vim.version.version1"], ["newName", "string", "vim.version.version1"]])
    create_data_type("vim.event.DatastoreCapacityIncreasedEvent", "DatastoreCapacityIncreasedEvent", "vim.event.DatastoreEvent", "vim.version.version5", [["oldCapacity", "long", "vim.version.version5"], ["newCapacity", "long", "vim.version.version5"]])
    create_data_type("vim.event.DatastoreDuplicatedEvent", "DatastoreDuplicatedEvent", "vim.event.DatastoreEvent", "vim.version.version1", nil)
    create_data_type("vim.event.DatastoreFileEvent", "DatastoreFileEvent", "vim.event.DatastoreEvent", "vim.version.version5", [["targetFile", "string", "vim.version.version5"]])
    create_data_type("vim.event.DatastoreFileCopiedEvent", "DatastoreFileCopiedEvent", "vim.event.DatastoreFileEvent", "vim.version.version5", [["sourceDatastore", "vim.event.DatastoreEventArgument", "vim.version.version5"], ["sourceFile", "string", "vim.version.version5"]])
    create_data_type("vim.event.DatastoreFileMovedEvent", "DatastoreFileMovedEvent", "vim.event.DatastoreFileEvent", "vim.version.version5", [["sourceDatastore", "vim.event.DatastoreEventArgument", "vim.version.version5"], ["sourceFile", "string", "vim.version.version5"]])
    create_data_type("vim.event.DatastoreFileDeletedEvent", "DatastoreFileDeletedEvent", "vim.event.DatastoreFileEvent", "vim.version.version5", nil)
    create_data_type("vim.event.NonVIWorkloadDetectedOnDatastoreEvent", "NonVIWorkloadDetectedOnDatastoreEvent", "vim.event.DatastoreEvent", "vim.version.version6", nil)
    create_data_type("vim.event.DatastoreIORMReconfiguredEvent", "DatastoreIORMReconfiguredEvent", "vim.event.DatastoreEvent", "vim.version.version6", nil)
    create_data_type("vim.event.TaskEvent", "TaskEvent", "vim.event.Event", "vim.version.version1", [["info", "vim.TaskInfo", "vim.version.version1"]])
    create_data_type("vim.event.TaskTimeoutEvent", "TaskTimeoutEvent", "vim.event.TaskEvent", "vim.version.version2", nil)
    create_data_type("vim.event.LicenseEvent", "LicenseEvent", "vim.event.Event", "vim.version.version1", nil)
    create_data_type("vim.event.ServerLicenseExpiredEvent", "ServerLicenseExpiredEvent", "vim.event.LicenseEvent", "vim.version.version1", [["product", "string", "vim.version.version1"]])
    create_data_type("vim.event.HostLicenseExpiredEvent", "HostLicenseExpiredEvent", "vim.event.LicenseEvent", "vim.version.version1", nil)
    create_data_type("vim.event.VMotionLicenseExpiredEvent", "VMotionLicenseExpiredEvent", "vim.event.LicenseEvent", "vim.version.version1", nil)
    create_data_type("vim.event.NoLicenseEvent", "NoLicenseEvent", "vim.event.LicenseEvent", "vim.version.version1", [["feature", "vim.LicenseManager.FeatureInfo", "vim.version.version1"]])
    create_data_type("vim.event.LicenseServerUnavailableEvent", "LicenseServerUnavailableEvent", "vim.event.LicenseEvent", "vim.version.version1", [["licenseServer", "string", "vim.version.version1"]])
    create_data_type("vim.event.LicenseServerAvailableEvent", "LicenseServerAvailableEvent", "vim.event.LicenseEvent", "vim.version.version1", [["licenseServer", "string", "vim.version.version1"]])
    create_data_type("vim.event.LicenseExpiredEvent", "LicenseExpiredEvent", "vim.event.Event", "vim.version.version1", [["feature", "vim.LicenseManager.FeatureInfo", "vim.version.version1"]])
    create_data_type("vim.event.InvalidEditionEvent", "InvalidEditionEvent", "vim.event.LicenseEvent", "vim.version.version2", [["feature", "string", "vim.version.version2"]])
    create_data_type("vim.event.HostInventoryFullEvent", "HostInventoryFullEvent", "vim.event.LicenseEvent", "vim.version.version2", [["capacity", "int", "vim.version.version2"]])
    create_data_type("vim.event.LicenseRestrictedEvent", "LicenseRestrictedEvent", "vim.event.LicenseEvent", "vim.version.version2", nil)
    create_data_type("vim.event.IncorrectHostInformationEvent", "IncorrectHostInformationEvent", "vim.event.LicenseEvent", "vim.version.version2", nil)
    create_data_type("vim.event.UnlicensedVirtualMachinesEvent", "UnlicensedVirtualMachinesEvent", "vim.event.LicenseEvent", "vim.version.version2", [["unlicensed", "int", "vim.version.version2"], ["available", "int", "vim.version.version2"]])
    create_data_type("vim.event.UnlicensedVirtualMachinesFoundEvent", "UnlicensedVirtualMachinesFoundEvent", "vim.event.LicenseEvent", "vim.version.version2", [["available", "int", "vim.version.version2"]])
    create_data_type("vim.event.AllVirtualMachinesLicensedEvent", "AllVirtualMachinesLicensedEvent", "vim.event.LicenseEvent", "vim.version.version2", nil)
    create_data_type("vim.event.LicenseNonComplianceEvent", "LicenseNonComplianceEvent", "vim.event.LicenseEvent", "vim.version.version5", [["url", "string", "vim.version.version5"]])
    create_data_type("vim.event.MigrationEvent", "MigrationEvent", "vim.event.VmEvent", "vim.version.version1", [["fault", "vmodl.MethodFault", "vim.version.version1"]])
    create_data_type("vim.event.MigrationWarningEvent", "MigrationWarningEvent", "vim.event.MigrationEvent", "vim.version.version1", nil)
    create_data_type("vim.event.MigrationErrorEvent", "MigrationErrorEvent", "vim.event.MigrationEvent", "vim.version.version1", nil)
    create_data_type("vim.event.MigrationHostWarningEvent", "MigrationHostWarningEvent", "vim.event.MigrationEvent", "vim.version.version1", [["dstHost", "vim.event.HostEventArgument", "vim.version.version1"]])
    create_data_type("vim.event.MigrationHostErrorEvent", "MigrationHostErrorEvent", "vim.event.MigrationEvent", "vim.version.version1", [["dstHost", "vim.event.HostEventArgument", "vim.version.version1"]])
    create_data_type("vim.event.MigrationResourceWarningEvent", "MigrationResourceWarningEvent", "vim.event.MigrationEvent", "vim.version.version1", [["dstPool", "vim.event.ResourcePoolEventArgument", "vim.version.version1"], ["dstHost", "vim.event.HostEventArgument", "vim.version.version1"]])
    create_data_type("vim.event.MigrationResourceErrorEvent", "MigrationResourceErrorEvent", "vim.event.MigrationEvent", "vim.version.version1", [["dstPool", "vim.event.ResourcePoolEventArgument", "vim.version.version1"], ["dstHost", "vim.event.HostEventArgument", "vim.version.version1"]])
    create_data_type("vim.event.ClusterEvent", "ClusterEvent", "vim.event.Event", "vim.version.version1", nil)
    create_data_type("vim.event.DasEnabledEvent", "DasEnabledEvent", "vim.event.ClusterEvent", "vim.version.version1", nil)
    create_data_type("vim.event.DasDisabledEvent", "DasDisabledEvent", "vim.event.ClusterEvent", "vim.version.version1", nil)
    create_data_type("vim.event.DasAdmissionControlDisabledEvent", "DasAdmissionControlDisabledEvent", "vim.event.ClusterEvent", "vim.version.version1", nil)
    create_data_type("vim.event.DasAdmissionControlEnabledEvent", "DasAdmissionControlEnabledEvent", "vim.event.ClusterEvent", "vim.version.version1", nil)
    create_data_type("vim.event.DasHostFailedEvent", "DasHostFailedEvent", "vim.event.ClusterEvent", "vim.version.version1", [["failedHost", "vim.event.HostEventArgument", "vim.version.version1"]])
    create_data_type("vim.event.DasHostIsolatedEvent", "DasHostIsolatedEvent", "vim.event.ClusterEvent", "vim.version.version1", [["isolatedHost", "vim.event.HostEventArgument", "vim.version.version1"]])
    create_data_type("vim.event.DasClusterIsolatedEvent", "DasClusterIsolatedEvent", "vim.event.ClusterEvent", "vim.version.version5", nil)
    create_data_type("vim.event.DasAgentUnavailableEvent", "DasAgentUnavailableEvent", "vim.event.ClusterEvent", "vim.version.version1", nil)
    create_data_type("vim.event.DasAgentFoundEvent", "DasAgentFoundEvent", "vim.event.ClusterEvent", "vim.version.version1", nil)
    create_data_type("vim.event.InsufficientFailoverResourcesEvent", "InsufficientFailoverResourcesEvent", "vim.event.ClusterEvent", "vim.version.version1", nil)
    create_data_type("vim.event.FailoverLevelRestored", "FailoverLevelRestored", "vim.event.ClusterEvent", "vim.version.version1", nil)
    create_data_type("vim.event.ClusterOvercommittedEvent", "ClusterOvercommittedEvent", "vim.event.ClusterEvent", "vim.version.version1", nil)
    create_data_type("vim.event.HostOvercommittedEvent", "HostOvercommittedEvent", "vim.event.ClusterOvercommittedEvent", "vim.version.version5", nil)
    create_data_type("vim.event.ClusterStatusChangedEvent", "ClusterStatusChangedEvent", "vim.event.ClusterEvent", "vim.version.version1", [["oldStatus", "string", "vim.version.version1"], ["newStatus", "string", "vim.version.version1"]])
    create_data_type("vim.event.HostStatusChangedEvent", "HostStatusChangedEvent", "vim.event.ClusterStatusChangedEvent", "vim.version.version5", nil)
    create_data_type("vim.event.ClusterCreatedEvent", "ClusterCreatedEvent", "vim.event.ClusterEvent", "vim.version.version1", [["parent", "vim.event.FolderEventArgument", "vim.version.version1"]])
    create_data_type("vim.event.ClusterDestroyedEvent", "ClusterDestroyedEvent", "vim.event.ClusterEvent", "vim.version.version1", nil)
    create_data_type("vim.event.DrsEnabledEvent", "DrsEnabledEvent", "vim.event.ClusterEvent", "vim.version.version1", [["behavior", "string", "vim.version.version1"]])
    create_data_type("vim.event.DrsDisabledEvent", "DrsDisabledEvent", "vim.event.ClusterEvent", "vim.version.version1", nil)
    create_data_type("vim.event.ClusterReconfiguredEvent", "ClusterReconfiguredEvent", "vim.event.ClusterEvent", "vim.version.version1", nil)
    create_data_type("vim.event.HostMonitoringStateChangedEvent", "HostMonitoringStateChangedEvent", "vim.event.ClusterEvent", "vim.version.version5", [["state", "string", "vim.version.version5"]])
    create_data_type("vim.event.VmHealthMonitoringStateChangedEvent", "VmHealthMonitoringStateChangedEvent", "vim.event.ClusterEvent", "vim.version.version5", [["state", "string", "vim.version.version5"]])
    create_data_type("vim.event.ResourcePoolEvent", "ResourcePoolEvent", "vim.event.Event", "vim.version.version1", [["resourcePool", "vim.event.ResourcePoolEventArgument", "vim.version.version1"]])
    create_data_type("vim.event.ResourcePoolCreatedEvent", "ResourcePoolCreatedEvent", "vim.event.ResourcePoolEvent", "vim.version.version1", [["parent", "vim.event.ResourcePoolEventArgument", "vim.version.version1"]])
    create_data_type("vim.event.ResourcePoolDestroyedEvent", "ResourcePoolDestroyedEvent", "vim.event.ResourcePoolEvent", "vim.version.version1", nil)
    create_data_type("vim.event.ResourcePoolMovedEvent", "ResourcePoolMovedEvent", "vim.event.ResourcePoolEvent", "vim.version.version1", [["oldParent", "vim.event.ResourcePoolEventArgument", "vim.version.version1"], ["newParent", "vim.event.ResourcePoolEventArgument", "vim.version.version1"]])
    create_data_type("vim.event.ResourcePoolReconfiguredEvent", "ResourcePoolReconfiguredEvent", "vim.event.ResourcePoolEvent", "vim.version.version1", nil)
    create_data_type("vim.event.ResourceViolatedEvent", "ResourceViolatedEvent", "vim.event.ResourcePoolEvent", "vim.version.version1", nil)
    create_data_type("vim.event.VmResourcePoolMovedEvent", "VmResourcePoolMovedEvent", "vim.event.VmEvent", "vim.version.version1", [["oldParent", "vim.event.ResourcePoolEventArgument", "vim.version.version1"], ["newParent", "vim.event.ResourcePoolEventArgument", "vim.version.version1"]])
    create_data_type("vim.event.TemplateUpgradeEvent", "TemplateUpgradeEvent", "vim.event.Event", "vim.version.version1", [["legacyTemplate", "string", "vim.version.version1"]])
    create_data_type("vim.event.TemplateBeingUpgradedEvent", "TemplateBeingUpgradedEvent", "vim.event.TemplateUpgradeEvent", "vim.version.version1", nil)
    create_data_type("vim.event.TemplateUpgradeFailedEvent", "TemplateUpgradeFailedEvent", "vim.event.TemplateUpgradeEvent", "vim.version.version1", [["reason", "vmodl.MethodFault", "vim.version.version1"]])
    create_data_type("vim.event.TemplateUpgradedEvent", "TemplateUpgradedEvent", "vim.event.TemplateUpgradeEvent", "vim.version.version1", nil)
    create_data_type("vim.event.CustomizationEvent", "CustomizationEvent", "vim.event.VmEvent", "vim.version.version2", [["logLocation", "string", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.event.CustomizationStartedEvent", "CustomizationStartedEvent", "vim.event.CustomizationEvent", "vim.version.version2", nil)
    create_data_type("vim.event.CustomizationSucceeded", "CustomizationSucceeded", "vim.event.CustomizationEvent", "vim.version.version2", nil)
    create_data_type("vim.event.CustomizationFailed", "CustomizationFailed", "vim.event.CustomizationEvent", "vim.version.version2", nil)
    create_data_type("vim.event.CustomizationUnknownFailure", "CustomizationUnknownFailure", "vim.event.CustomizationFailed", "vim.version.version2", nil)
    create_data_type("vim.event.CustomizationSysprepFailed", "CustomizationSysprepFailed", "vim.event.CustomizationFailed", "vim.version.version2", [["sysprepVersion", "string", "vim.version.version2"], ["systemVersion", "string", "vim.version.version2"]])
    create_data_type("vim.event.CustomizationLinuxIdentityFailed", "CustomizationLinuxIdentityFailed", "vim.event.CustomizationFailed", "vim.version.version2", nil)
    create_data_type("vim.event.CustomizationNetworkSetupFailed", "CustomizationNetworkSetupFailed", "vim.event.CustomizationFailed", "vim.version.version2", nil)
    create_data_type("vim.event.LockerMisconfiguredEvent", "LockerMisconfiguredEvent", "vim.event.Event", "vim.version.version2", [["datastore", "vim.event.DatastoreEventArgument", "vim.version.version2"]])
    create_data_type("vim.event.LockerReconfiguredEvent", "LockerReconfiguredEvent", "vim.event.Event", "vim.version.version2", [["oldDatastore", "vim.event.DatastoreEventArgument", "vim.version.version2", {:optional => true}], ["newDatastore", "vim.event.DatastoreEventArgument", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.event.NoDatastoresConfiguredEvent", "NoDatastoresConfiguredEvent", "vim.event.HostEvent", "vim.version.version2", nil)
    create_data_type("vim.event.AdminPasswordNotChangedEvent", "AdminPasswordNotChangedEvent", "vim.event.HostEvent", "vim.version.version2", nil)
    create_data_type("vim.event.HostInAuditModeEvent", "HostInAuditModeEvent", "vim.event.HostEvent", "vim.version.version7", nil)
    create_data_type("vim.event.LocalTSMEnabledEvent", "LocalTSMEnabledEvent", "vim.event.HostEvent", "vim.version.version6", nil)
    create_data_type("vim.event.RemoteTSMEnabledEvent", "RemoteTSMEnabledEvent", "vim.event.HostEvent", "vim.version.version6", nil)
    create_data_type("vim.event.VimAccountPasswordChangedEvent", "VimAccountPasswordChangedEvent", "vim.event.HostEvent", "vim.version.version2", nil)
    create_data_type("vim.event.iScsiBootFailureEvent", "IScsiBootFailureEvent", "vim.event.HostEvent", "vim.version.version6", nil)
    create_data_type("vim.event.DvsHealthStatusChangeEvent", "DvsHealthStatusChangeEvent", "vim.event.HostEvent", "vim.version.version8", [["switchUuid", "string", "vim.version.version8"], ["healthResult", "vim.dvs.HostMember.HealthCheckResult", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.event.NetworkRollbackEvent", "NetworkRollbackEvent", "vim.event.Event", "vim.version.version8", [["methodName", "string", "vim.version.version8"], ["transactionId", "string", "vim.version.version8"]])
    create_data_type("vim.event.UplinkPortVlanTrunkedEvent", "UplinkPortVlanTrunkedEvent", "vim.event.DvsHealthStatusChangeEvent", "vim.version.version8", nil)
    create_data_type("vim.event.UplinkPortVlanUntrunkedEvent", "UplinkPortVlanUntrunkedEvent", "vim.event.DvsHealthStatusChangeEvent", "vim.version.version8", nil)
    create_data_type("vim.event.MtuMatchEvent", "MtuMatchEvent", "vim.event.DvsHealthStatusChangeEvent", "vim.version.version8", nil)
    create_data_type("vim.event.MtuMismatchEvent", "MtuMismatchEvent", "vim.event.DvsHealthStatusChangeEvent", "vim.version.version8", nil)
    create_data_type("vim.event.UplinkPortMtuNotSupportEvent", "UplinkPortMtuNotSupportEvent", "vim.event.DvsHealthStatusChangeEvent", "vim.version.version8", nil)
    create_data_type("vim.event.UplinkPortMtuSupportEvent", "UplinkPortMtuSupportEvent", "vim.event.DvsHealthStatusChangeEvent", "vim.version.version8", nil)
    create_data_type("vim.event.TeamingMatchEvent", "TeamingMatchEvent", "vim.event.DvsHealthStatusChangeEvent", "vim.version.version8", nil)
    create_data_type("vim.event.TeamingMisMatchEvent", "TeamingMisMatchEvent", "vim.event.DvsHealthStatusChangeEvent", "vim.version.version8", nil)
    create_data_type("vim.event.DvsEvent", "DvsEvent", "vim.event.Event", "vim.version.version5", nil)
    create_data_type("vim.event.DvsCreatedEvent", "DvsCreatedEvent", "vim.event.DvsEvent", "vim.version.version5", [["parent", "vim.event.FolderEventArgument", "vim.version.version5"]])
    create_data_type("vim.event.DvsRenamedEvent", "DvsRenamedEvent", "vim.event.DvsEvent", "vim.version.version5", [["oldName", "string", "vim.version.version5"], ["newName", "string", "vim.version.version5"]])
    create_data_type("vim.event.DvsUpgradeAvailableEvent", "DvsUpgradeAvailableEvent", "vim.event.DvsEvent", "vim.version.version5", [["productInfo", "vim.dvs.ProductSpec", "vim.version.version5"]])
    create_data_type("vim.event.DvsUpgradeInProgressEvent", "DvsUpgradeInProgressEvent", "vim.event.DvsEvent", "vim.version.version5", [["productInfo", "vim.dvs.ProductSpec", "vim.version.version5"]])
    create_data_type("vim.event.DvsUpgradeRejectedEvent", "DvsUpgradeRejectedEvent", "vim.event.DvsEvent", "vim.version.version5", [["productInfo", "vim.dvs.ProductSpec", "vim.version.version5"]])
    create_data_type("vim.event.DvsUpgradedEvent", "DvsUpgradedEvent", "vim.event.DvsEvent", "vim.version.version5", [["productInfo", "vim.dvs.ProductSpec", "vim.version.version5"]])
    create_data_type("vim.event.DvsHostJoinedEvent", "DvsHostJoinedEvent", "vim.event.DvsEvent", "vim.version.version5", [["hostJoined", "vim.event.HostEventArgument", "vim.version.version5"]])
    create_data_type("vim.event.DvsHostLeftEvent", "DvsHostLeftEvent", "vim.event.DvsEvent", "vim.version.version5", [["hostLeft", "vim.event.HostEventArgument", "vim.version.version5"]])
    create_data_type("vim.event.DvsOutOfSyncHostArgument", "DvsOutOfSyncHostArgument", "vmodl.DynamicData", "vim.version.version5", [["outOfSyncHost", "vim.event.HostEventArgument", "vim.version.version5"], ["configParamters", "string[]", "vim.version.version5"]])
    create_data_type("vim.event.OutOfSyncDvsHost", "OutOfSyncDvsHost", "vim.event.DvsEvent", "vim.version.version5", [["hostOutOfSync", "vim.event.DvsOutOfSyncHostArgument[]", "vim.version.version5"]])
    create_data_type("vim.event.DvsHostWentOutOfSyncEvent", "DvsHostWentOutOfSyncEvent", "vim.event.DvsEvent", "vim.version.version5", [["hostOutOfSync", "vim.event.DvsOutOfSyncHostArgument", "vim.version.version5"]])
    create_data_type("vim.event.DvsHostBackInSyncEvent", "DvsHostBackInSyncEvent", "vim.event.DvsEvent", "vim.version.version5", [["hostBackInSync", "vim.event.HostEventArgument", "vim.version.version5"]])
    create_data_type("vim.event.DvsHostStatusUpdated", "DvsHostStatusUpdated", "vim.event.DvsEvent", "vim.version.version6", [["hostMember", "vim.event.HostEventArgument", "vim.version.version6"], ["oldStatus", "string", "vim.version.version6", {:optional => true}], ["newStatus", "string", "vim.version.version6", {:optional => true}], ["oldStatusDetail", "string", "vim.version.version6", {:optional => true}], ["newStatusDetail", "string", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.event.DvsPortCreatedEvent", "DvsPortCreatedEvent", "vim.event.DvsEvent", "vim.version.version5", [["portKey", "string[]", "vim.version.version5"]])
    create_data_type("vim.event.DvsPortReconfiguredEvent", "DvsPortReconfiguredEvent", "vim.event.DvsEvent", "vim.version.version5", [["portKey", "string[]", "vim.version.version5"]])
    create_data_type("vim.event.DvsPortDeletedEvent", "DvsPortDeletedEvent", "vim.event.DvsEvent", "vim.version.version5", [["portKey", "string[]", "vim.version.version5"]])
    create_data_type("vim.event.DvsPortConnectedEvent", "DvsPortConnectedEvent", "vim.event.DvsEvent", "vim.version.version5", [["portKey", "string", "vim.version.version5"], ["connectee", "vim.dvs.PortConnectee", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.event.DvsPortDisconnectedEvent", "DvsPortDisconnectedEvent", "vim.event.DvsEvent", "vim.version.version5", [["portKey", "string", "vim.version.version5"], ["connectee", "vim.dvs.PortConnectee", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.event.DvsPortVendorSpecificStateChangeEvent", "DvsPortVendorSpecificStateChangeEvent", "vim.event.DvsEvent", "vim.version.version8", [["portKey", "string", "vim.version.version8"]])
    create_data_type("vim.event.DvsPortRuntimeChangeEvent", "DvsPortRuntimeChangeEvent", "vim.event.DvsEvent", "vim.version.version8", [["portKey", "string", "vim.version.version8"], ["runtimeInfo", "vim.dvs.DistributedVirtualPort.RuntimeInfo", "vim.version.version8"]])
    create_data_type("vim.event.DvsPortLinkUpEvent", "DvsPortLinkUpEvent", "vim.event.DvsEvent", "vim.version.version5", [["portKey", "string", "vim.version.version5"], ["runtimeInfo", "vim.dvs.DistributedVirtualPort.RuntimeInfo", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.event.DvsPortLinkDownEvent", "DvsPortLinkDownEvent", "vim.event.DvsEvent", "vim.version.version5", [["portKey", "string", "vim.version.version5"], ["runtimeInfo", "vim.dvs.DistributedVirtualPort.RuntimeInfo", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.event.DvsPortJoinPortgroupEvent", "DvsPortJoinPortgroupEvent", "vim.event.DvsEvent", "vim.version.version5", [["portKey", "string", "vim.version.version5"], ["portgroupKey", "string", "vim.version.version5"], ["portgroupName", "string", "vim.version.version5"]])
    create_data_type("vim.event.DvsPortLeavePortgroupEvent", "DvsPortLeavePortgroupEvent", "vim.event.DvsEvent", "vim.version.version5", [["portKey", "string", "vim.version.version5"], ["portgroupKey", "string", "vim.version.version5"], ["portgroupName", "string", "vim.version.version5"]])
    create_data_type("vim.event.DvsPortBlockedEvent", "DvsPortBlockedEvent", "vim.event.DvsEvent", "vim.version.version5", [["portKey", "string", "vim.version.version5"], ["statusDetail", "string", "vim.version.version6", {:optional => true}], ["runtimeInfo", "vim.dvs.DistributedVirtualPort.RuntimeInfo", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.event.DvsPortUnblockedEvent", "DvsPortUnblockedEvent", "vim.event.DvsEvent", "vim.version.version5", [["portKey", "string", "vim.version.version5"], ["runtimeInfo", "vim.dvs.DistributedVirtualPort.RuntimeInfo", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.event.DvsPortEnteredPassthruEvent", "DvsPortEnteredPassthruEvent", "vim.event.DvsEvent", "vim.version.version6", [["portKey", "string", "vim.version.version6"], ["runtimeInfo", "vim.dvs.DistributedVirtualPort.RuntimeInfo", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.event.DvsPortExitedPassthruEvent", "DvsPortExitedPassthruEvent", "vim.event.DvsEvent", "vim.version.version6", [["portKey", "string", "vim.version.version6"], ["runtimeInfo", "vim.dvs.DistributedVirtualPort.RuntimeInfo", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.event.DvsDestroyedEvent", "DvsDestroyedEvent", "vim.event.DvsEvent", "vim.version.version5", nil)
    create_data_type("vim.event.DvsMergedEvent", "DvsMergedEvent", "vim.event.DvsEvent", "vim.version.version5", [["sourceDvs", "vim.event.DvsEventArgument", "vim.version.version5"], ["destinationDvs", "vim.event.DvsEventArgument", "vim.version.version5"]])
    create_data_type("vim.event.HostLocalPortCreatedEvent", "HostLocalPortCreatedEvent", "vim.event.DvsEvent", "vim.version.version8", [["hostLocalPort", "vim.dvs.DistributedVirtualPort.HostLocalPortInfo", "vim.version.version8"]])
    create_data_type("vim.event.RollbackEvent", "RollbackEvent", "vim.event.DvsEvent", "vim.version.version8", [["hostName", "string", "vim.version.version8"], ["methodName", "string", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.event.RecoveryEvent", "RecoveryEvent", "vim.event.DvsEvent", "vim.version.version8", [["hostName", "string", "vim.version.version8"], ["portKey", "string", "vim.version.version8"], ["dvsUuid", "string", "vim.version.version8", {:optional => true}], ["vnic", "string", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.event.DvsImportEvent", "DvsImportEvent", "vim.event.DvsEvent", "vim.version.version8", [["importType", "string", "vim.version.version8"]])
    create_data_type("vim.event.DvsRestoreEvent", "DvsRestoreEvent", "vim.event.DvsEvent", "vim.version.version8", nil)
    create_data_type("vim.event.DVPortgroupEvent", "DVPortgroupEvent", "vim.event.Event", "vim.version.version5", nil)
    create_data_type("vim.event.DVPortgroupCreatedEvent", "DVPortgroupCreatedEvent", "vim.event.DVPortgroupEvent", "vim.version.version5", nil)
    create_data_type("vim.event.DVPortgroupRenamedEvent", "DVPortgroupRenamedEvent", "vim.event.DVPortgroupEvent", "vim.version.version5", [["oldName", "string", "vim.version.version5"], ["newName", "string", "vim.version.version5"]])
    create_data_type("vim.event.DVPortgroupDestroyedEvent", "DVPortgroupDestroyedEvent", "vim.event.DVPortgroupEvent", "vim.version.version5", nil)
    create_data_type("vim.event.DvpgImportEvent", "DvpgImportEvent", "vim.event.DVPortgroupEvent", "vim.version.version8", [["importType", "string", "vim.version.version8"]])
    create_data_type("vim.event.DvpgRestoreEvent", "DvpgRestoreEvent", "vim.event.DVPortgroupEvent", "vim.version.version8", nil)
    create_data_type("vim.event.DrsInvocationFailedEvent", "DrsInvocationFailedEvent", "vim.event.ClusterEvent", "vim.version.version5", nil)
    create_data_type("vim.event.DrsRecoveredFromFailureEvent", "DrsRecoveredFromFailureEvent", "vim.event.ClusterEvent", "vim.version.version5", nil)
    create_data_type("vim.event.VmReloadFromPathEvent", "VmReloadFromPathEvent", "vim.event.VmEvent", "vim.version.version6", [["configPath", "string", "vim.version.version6"]])
    create_data_type("vim.event.VmReloadFromPathFailedEvent", "VmReloadFromPathFailedEvent", "vim.event.VmEvent", "vim.version.version6", [["configPath", "string", "vim.version.version6"]])
    create_data_type("vim.event.VmRequirementsExceedCurrentEVCModeEvent", "VmRequirementsExceedCurrentEVCModeEvent", "vim.event.VmEvent", "vim.version.version8", nil)
    create_data_type("vim.event.EventArgument", "EventArgument", "vmodl.DynamicData", "vim.version.version1", nil)
    create_data_type("vim.event.RoleEventArgument", "RoleEventArgument", "vim.event.EventArgument", "vim.version.version1", [["roleId", "int", "vim.version.version1"], ["name", "string", "vim.version.version1"]])
    create_data_type("vim.event.EntityEventArgument", "EntityEventArgument", "vim.event.EventArgument", "vim.version.version1", [["name", "string", "vim.version.version1"]])
    create_data_type("vim.event.ManagedEntityEventArgument", "ManagedEntityEventArgument", "vim.event.EntityEventArgument", "vim.version.version1", [["entity", "vim.ManagedEntity", "vim.version.version1"]])
    create_data_type("vim.event.FolderEventArgument", "FolderEventArgument", "vim.event.EntityEventArgument", "vim.version.version1", [["folder", "vim.Folder", "vim.version.version1"]])
    create_data_type("vim.event.DatacenterEventArgument", "DatacenterEventArgument", "vim.event.EntityEventArgument", "vim.version.version1", [["datacenter", "vim.Datacenter", "vim.version.version1"]])
    create_data_type("vim.event.ComputeResourceEventArgument", "ComputeResourceEventArgument", "vim.event.EntityEventArgument", "vim.version.version1", [["computeResource", "vim.ComputeResource", "vim.version.version1"]])
    create_data_type("vim.event.ResourcePoolEventArgument", "ResourcePoolEventArgument", "vim.event.EntityEventArgument", "vim.version.version1", [["resourcePool", "vim.ResourcePool", "vim.version.version1"]])
    create_data_type("vim.event.HostEventArgument", "HostEventArgument", "vim.event.EntityEventArgument", "vim.version.version1", [["host", "vim.HostSystem", "vim.version.version1"]])
    create_data_type("vim.event.VmEventArgument", "VmEventArgument", "vim.event.EntityEventArgument", "vim.version.version1", [["vm", "vim.VirtualMachine", "vim.version.version1"]])
    create_data_type("vim.event.DatastoreEventArgument", "DatastoreEventArgument", "vim.event.EntityEventArgument", "vim.version.version1", [["datastore", "vim.Datastore", "vim.version.version1"]])
    create_data_type("vim.event.NetworkEventArgument", "NetworkEventArgument", "vim.event.EntityEventArgument", "vim.version.version5", [["network", "vim.Network", "vim.version.version5"]])
    create_data_type("vim.event.AlarmEventArgument", "AlarmEventArgument", "vim.event.EntityEventArgument", "vim.version.version1", [["alarm", "vim.alarm.Alarm", "vim.version.version1"]])
    create_data_type("vim.event.ScheduledTaskEventArgument", "ScheduledTaskEventArgument", "vim.event.EntityEventArgument", "vim.version.version1", [["scheduledTask", "vim.scheduler.ScheduledTask", "vim.version.version1"]])
    create_data_type("vim.event.ProfileEventArgument", "ProfileEventArgument", "vim.event.EventArgument", "vim.version.version5", [["profile", "vim.profile.Profile", "vim.version.version5"], ["name", "string", "vim.version.version5"]])
    create_data_type("vim.event.DvsEventArgument", "DvsEventArgument", "vim.event.EntityEventArgument", "vim.version.version5", [["dvs", "vim.DistributedVirtualSwitch", "vim.version.version5"]])
    create_data_type("vim.event.EventDescription", "EventDescription", "vmodl.DynamicData", "vim.version.version1", [["category", "vim.ElementDescription[]", "vim.version.version1"], ["eventInfo", "vim.event.EventDescription.EventDetail[]", "vim.version.version1"], ["enumeratedTypes", "vim.EnumDescription[]", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.event.EventDescription.EventCategory", "EventCategory", "vim.version.version1", ["info", "warning", "error", "user"])
    create_data_type("vim.event.EventDescription.EventArgDesc", "EventArgDesc", "vmodl.DynamicData", "vim.version.version5", [["name", "string", "vim.version.version5"], ["type", "string", "vim.version.version5"], ["description", "vim.ElementDescription", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.event.EventDescription.EventDetail", "EventDescriptionEventDetail", "vmodl.DynamicData", "vim.version.version1", [["key", "vmodl.TypeName", "vim.version.version1"], ["description", "string", "vim.version.version5", {:optional => true}], ["category", "string", "vim.version.version1"], ["formatOnDatacenter", "string", "vim.version.version1"], ["formatOnComputeResource", "string", "vim.version.version1"], ["formatOnHost", "string", "vim.version.version1"], ["formatOnVm", "string", "vim.version.version1"], ["fullFormat", "string", "vim.version.version1"], ["longDescription", "string", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.event.EventEx", "EventEx", "vim.event.Event", "vim.version.version5", [["eventTypeId", "string", "vim.version.version5"], ["severity", "string", "vim.version.version5", {:optional => true}], ["message", "string", "vim.version.version5", {:optional => true}], ["arguments", "vmodl.KeyAnyValue[]", "vim.version.version5", {:optional => true}], ["objectId", "string", "vim.version.version5", {:optional => true}], ["objectType", "vmodl.TypeName", "vim.version.version5", {:optional => true}], ["objectName", "string", "vim.version.version6", {:optional => true}], ["fault", "vmodl.MethodFault", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.event.EventFilterSpec", "EventFilterSpec", "vmodl.DynamicData", "vim.version.version1", [["entity", "vim.event.EventFilterSpec.ByEntity", "vim.version.version1", {:optional => true}], ["time", "vim.event.EventFilterSpec.ByTime", "vim.version.version1", {:optional => true}], ["userName", "vim.event.EventFilterSpec.ByUsername", "vim.version.version1", {:optional => true}], ["eventChainId", "int", "vim.version.version1", {:optional => true}], ["alarm", "vim.alarm.Alarm", "vim.version.version1", {:optional => true}], ["scheduledTask", "vim.scheduler.ScheduledTask", "vim.version.version1", {:optional => true}], ["disableFullMessage", "boolean", "vim.version.version1", {:optional => true}], ["category", "string[]", "vim.version.version1", {:optional => true}], ["type", "vmodl.TypeName[]", "vim.version.version1", {:optional => true}], ["tag", "string[]", "vim.version.version5", {:optional => true}], ["eventTypeId", "string[]", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.event.EventFilterSpec.RecursionOption", "EventFilterSpecRecursionOption", "vim.version.version1", ["self", "children", "all"])
    create_data_type("vim.event.EventFilterSpec.ByEntity", "EventFilterSpecByEntity", "vmodl.DynamicData", "vim.version.version1", [["entity", "vim.ManagedEntity", "vim.version.version1"], ["recursion", "vim.event.EventFilterSpec.RecursionOption", "vim.version.version1"]])
    create_data_type("vim.event.EventFilterSpec.ByTime", "EventFilterSpecByTime", "vmodl.DynamicData", "vim.version.version1", [["beginTime", "vmodl.DateTime", "vim.version.version1", {:optional => true}], ["endTime", "vmodl.DateTime", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.event.EventFilterSpec.ByUsername", "EventFilterSpecByUsername", "vmodl.DynamicData", "vim.version.version1", [["systemUser", "boolean", "vim.version.version1"], ["userList", "string[]", "vim.version.version1", {:optional => true}]])
    create_managed_type("vim.event.EventHistoryCollector", "EventHistoryCollector", "vim.HistoryCollector", "vim.version.version1", [["latestPage", "vim.event.Event[]", "vim.version.version1", {:optional => true}, nil]], [["readNext", "ReadNextEvents", "vim.version.version1", [["maxCount", "int", "vim.version.version1", {}, nil]], [{:optional => true}, "vim.event.Event[]", "vim.event.Event[]"], nil, nil], ["readPrev", "ReadPreviousEvents", "vim.version.version1", [["maxCount", "int", "vim.version.version1", {}, nil]], [{:optional => true}, "vim.event.Event[]", "vim.event.Event[]"], nil, nil]])
    create_managed_type("vim.event.EventManager", "EventManager", "vmodl.ManagedObject", "vim.version.version1", [["description", "vim.event.EventDescription", "vim.version.version1", {}, "System.View"], ["latestEvent", "vim.event.Event", "vim.version.version1", {:optional => true}, "System.View"], ["maxCollector", "int", "vim.version.version1", {}, "System.View"]], [["retrieveArgumentDescription", "RetrieveArgumentDescription", "vim.version.version5", [["eventTypeId", "string", "vim.version.version5", {}, nil]], [{:optional => true}, "vim.event.EventDescription.EventArgDesc[]", "vim.event.EventDescription.EventArgDesc[]"], "System.View", nil], ["createCollector", "CreateCollectorForEvents", "vim.version.version1", [["filter", "vim.event.EventFilterSpec", "vim.version.version1", {}, nil]], [{}, "vim.event.EventHistoryCollector", "vim.event.EventHistoryCollector"], "System.View", ["vim.fault.InvalidState"]], ["logUserEvent", "LogUserEvent", "vim.version.version1", [["entity", "vim.ManagedEntity", "vim.version.version1", {}, "Global.LogEvent"], ["msg", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], nil, nil], ["QueryEvent", "QueryEvents", "vim.version.version1", [["filter", "vim.event.EventFilterSpec", "vim.version.version1", {}, nil]], [{:optional => true}, "vim.event.Event[]", "vim.event.Event[]"], "System.View", nil], ["postEvent", "PostEvent", "vim.version.version2", [["eventToPost", "vim.event.Event", "vim.version.version2", {}, nil], ["taskInfo", "vim.TaskInfo", "vim.version.version2", {:optional => true}, nil]], [{}, "void", "void"], "Global.LogEvent", ["vim.fault.InvalidEvent"]]])
    create_data_type("vim.ext.ExtendedProductInfo", "ExtExtendedProductInfo", "vmodl.DynamicData", "vim.version.version7", [["companyUrl", "string", "vim.version.version7", {:optional => true}], ["productUrl", "string", "vim.version.version7", {:optional => true}], ["managementUrl", "string", "vim.version.version7", {:optional => true}], ["self", "vim.ManagedEntity", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.ext.ManagedByInfo", "ManagedByInfo", "vmodl.DynamicData", "vim.version.version7", [["extensionKey", "string", "vim.version.version7"], ["type", "string", "vim.version.version7"]])
    create_data_type("vim.ext.ManagedEntityInfo", "ExtManagedEntityInfo", "vmodl.DynamicData", "vim.version.version7", [["type", "string", "vim.version.version7"], ["smallIconUrl", "string", "vim.version.version7", {:optional => true}], ["iconUrl", "string", "vim.version.version8", {:optional => true}], ["description", "string", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.ext.SolutionManagerInfo", "ExtSolutionManagerInfo", "vmodl.DynamicData", "vim.version.version7", [["tab", "vim.ext.SolutionManagerInfo.TabInfo[]", "vim.version.version7", {:optional => true}], ["smallIconUrl", "string", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.ext.SolutionManagerInfo.TabInfo", "ExtSolutionManagerInfoTabInfo", "vmodl.DynamicData", "vim.version.version7", [["label", "string", "vim.version.version7"], ["url", "string", "vim.version.version7"]])
    create_data_type("vim.fault.CannotDisableDrsOnClustersWithVApps", "CannotDisableDrsOnClustersWithVApps", "vmodl.RuntimeFault", "vim.version.version6", nil)
    create_data_type("vim.fault.ConflictingDatastoreFound", "ConflictingDatastoreFound", "vmodl.RuntimeFault", "vim.version.version8", [["name", "string", "vim.version.version8"], ["url", "string", "vim.version.version8"]])
    create_data_type("vim.fault.DatabaseError", "DatabaseError", "vmodl.RuntimeFault", "vim.version.version1", nil)
    create_data_type("vim.fault.DisallowedChangeByService", "DisallowedChangeByService", "vmodl.RuntimeFault", "vim.version.version7", [["serviceName", "string", "vim.version.version7"], ["disallowedChange", "string", "vim.version.version7", {:optional => true}]])
    create_enum_type("vim.fault.DisallowedChangeByService.DisallowedChange", "DisallowedChangeByServiceDisallowedChange", "vim.version.version7", ["hotExtendDisk"])
    create_data_type("vim.fault.DisallowedOperationOnFailoverHost", "DisallowedOperationOnFailoverHost", "vmodl.RuntimeFault", "vim.version.version5", [["host", "vim.HostSystem", "vim.version.version5"], ["hostname", "string", "vim.version.version5"]])
    create_data_type("vim.fault.ExpiredFeatureLicense", "ExpiredFeatureLicense", "vmodl.fault.NotEnoughLicenses", "vim.version.version2", [["feature", "string", "vim.version.version2"], ["count", "int", "vim.version.version2"], ["expirationDate", "vmodl.DateTime", "vim.version.version2"]])
    create_data_type("vim.fault.FailToLockFaultToleranceVMs", "FailToLockFaultToleranceVMs", "vmodl.RuntimeFault", "vim.version.version6", [["vmName", "string", "vim.version.version6"], ["vm", "vim.VirtualMachine", "vim.version.version6"], ["alreadyLockedVm", "vim.VirtualMachine", "vim.version.version6"]])
    create_data_type("vim.fault.HostAccessRestrictedToManagementServer", "HostAccessRestrictedToManagementServer", "vmodl.fault.NotSupported", "vim.version.version7", [["managementServer", "string", "vim.version.version7"]])
    create_data_type("vim.fault.HostInventoryFull", "HostInventoryFull", "vmodl.fault.NotEnoughLicenses", "vim.version.version2", [["capacity", "int", "vim.version.version2"]])
    create_data_type("vim.fault.InUseFeatureManipulationDisallowed", "InUseFeatureManipulationDisallowed", "vmodl.fault.NotEnoughLicenses", "vim.version.version5", nil)
    create_data_type("vim.fault.IncompatibleSetting", "IncompatibleSetting", "vmodl.fault.InvalidArgument", "vim.version.version1", [["conflictingProperty", "vmodl.PropertyPath", "vim.version.version1"]])
    create_data_type("vim.fault.IncorrectHostInformation", "IncorrectHostInformation", "vmodl.fault.NotEnoughLicenses", "vim.version.version2", nil)
    create_data_type("vim.fault.InvalidDasConfigArgument", "InvalidDasConfigArgument", "vmodl.fault.InvalidArgument", "vim.version.version8", [["entry", "string", "vim.version.version8", {:optional => true}], ["clusterName", "string", "vim.version.version8", {:optional => true}]])
    create_enum_type("vim.fault.InvalidDasConfigArgument.EntryForInvalidArgument", "InvalidDasConfigArgumentEntryForInvalidArgument", "vim.version.version8", ["admissionControl", "userHeartbeatDs", "vmConfig"])
    create_data_type("vim.fault.InvalidDasRestartPriorityForFtVm", "InvalidDasRestartPriorityForFtVm", "vmodl.fault.InvalidArgument", "vim.version.version6", [["vm", "vim.VirtualMachine", "vim.version.version6"], ["vmName", "string", "vim.version.version6"]])
    create_data_type("vim.fault.InvalidDrsBehaviorForFtVm", "InvalidDrsBehaviorForFtVm", "vmodl.fault.InvalidArgument", "vim.version.version5", [["vm", "vim.VirtualMachine", "vim.version.version5"], ["vmName", "string", "vim.version.version5"]])
    create_data_type("vim.fault.InvalidEditionLicense", "InvalidEditionLicense", "vmodl.fault.NotEnoughLicenses", "vim.version.version2", [["feature", "string", "vim.version.version2"]])
    create_data_type("vim.fault.InvalidIndexArgument", "InvalidIndexArgument", "vmodl.fault.InvalidArgument", "vim.version.version5", [["key", "string", "vim.version.version5"]])
    create_data_type("vim.fault.InvalidProfileReferenceHost", "InvalidProfileReferenceHost", "vmodl.RuntimeFault", "vim.version.version7", [["reason", "string", "vim.version.version7", {:optional => true}], ["host", "vim.HostSystem", "vim.version.version7", {:optional => true}], ["profile", "vim.profile.Profile", "vim.version.version7", {:optional => true}]])
    create_enum_type("vim.fault.InvalidProfileReferenceHost.Reason", "InvalidProfileReferenceHostReason", "vim.version.version7", ["incompatibleVersion", "missingReferenceHost"])
    create_data_type("vim.fault.InventoryHasStandardAloneHosts", "InventoryHasStandardAloneHosts", "vmodl.fault.NotEnoughLicenses", "vim.version.version5", [["hosts", "string[]", "vim.version.version5"]])
    create_data_type("vim.fault.LicenseAssignmentFailed", "LicenseAssignmentFailed", "vmodl.RuntimeFault", "vim.version.version5", [["reason", "string", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.fault.LicenseAssignmentFailed.Reason", "LicenseAssignmentFailedReason", "vim.version.version5", ["keyEntityMismatch", "downgradeDisallowed", "inventoryNotManageableByVirtualCenter", "hostsUnmanageableByVirtualCenterWithoutLicenseServer"])
    create_data_type("vim.fault.LicenseDowngradeDisallowed", "LicenseDowngradeDisallowed", "vmodl.fault.NotEnoughLicenses", "vim.version.version5", [["edition", "string", "vim.version.version5"], ["entityId", "string", "vim.version.version5"], ["features", "vmodl.KeyAnyValue[]", "vim.version.version5"]])
    create_data_type("vim.fault.LicenseExpired", "LicenseExpired", "vmodl.fault.NotEnoughLicenses", "vim.version.version5", [["licenseKey", "string", "vim.version.version5"]])
    create_data_type("vim.fault.LicenseKeyEntityMismatch", "LicenseKeyEntityMismatch", "vmodl.fault.NotEnoughLicenses", "vim.version.version5", nil)
    create_data_type("vim.fault.LicenseRestricted", "LicenseRestricted", "vmodl.fault.NotEnoughLicenses", "vim.version.version2", nil)
    create_data_type("vim.fault.LicenseSourceUnavailable", "LicenseSourceUnavailable", "vmodl.fault.NotEnoughLicenses", "vim.version.version2", [["licenseSource", "vim.LicenseManager.LicenseSource", "vim.version.version2"]])
    create_data_type("vim.fault.MethodAlreadyDisabledFault", "MethodAlreadyDisabledFault", "vmodl.RuntimeFault", "vim.version.version6", [["sourceId", "string", "vim.version.version6"]])
    create_data_type("vim.fault.MethodDisabled", "MethodDisabled", "vmodl.RuntimeFault", "vim.version.version2", [["source", "string", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.fault.NoLicenseServerConfigured", "NoLicenseServerConfigured", "vmodl.fault.NotEnoughLicenses", "vim.version.version5", nil)
    create_data_type("vim.fault.NoPermission", "NoPermission", "vmodl.fault.SecurityError", "vim.version.version1", [["object", "vmodl.ManagedObject", "vim.version.version1"], ["privilegeId", "string", "vim.version.version1"]])
    create_data_type("vim.fault.NotAuthenticated", "NotAuthenticated", "vim.fault.NoPermission", "vim.version.version2", nil)
    create_data_type("vim.fault.OperationDisallowedOnHost", "OperationDisallowedOnHost", "vmodl.RuntimeFault", "vim.version.version7", nil)
    create_data_type("vim.fault.RestrictedVersion", "RestrictedVersion", "vmodl.fault.SecurityError", "vim.version.version2", nil)
    create_data_type("vim.fault.ThirdPartyLicenseAssignmentFailed", "ThirdPartyLicenseAssignmentFailed", "vmodl.RuntimeFault", "vim.version.version7", [["host", "vim.HostSystem", "vim.version.version7"], ["module", "string", "vim.version.version7"], ["reason", "string", "vim.version.version7", {:optional => true}]])
    create_enum_type("vim.fault.ThirdPartyLicenseAssignmentFailed.Reason", "ThirdPartyLicenseAssignmentFailedReason", "vim.version.version7", ["licenseAssignmentFailed", "moduleNotInstalled"])
    create_data_type("vim.fault.VAppOperationInProgress", "VAppOperationInProgress", "vmodl.RuntimeFault", "vim.version.version7", nil)
    create_data_type("vim.fault.VimFault", "VimFault", "vmodl.MethodFault", "vim.version.version1", nil)
    create_data_type("vim.fault.VmConfigFault", "VmConfigFault", "vim.fault.VimFault", "vim.version.version1", nil)
    create_data_type("vim.fault.VmConfigIncompatibleForFaultTolerance", "VmConfigIncompatibleForFaultTolerance", "vim.fault.VmConfigFault", "vim.version.version5", [["fault", "vmodl.MethodFault", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.fault.VmConfigIncompatibleForRecordReplay", "VmConfigIncompatibleForRecordReplay", "vim.fault.VmConfigFault", "vim.version.version5", [["fault", "vmodl.MethodFault", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.fault.VmFaultToleranceIssue", "VmFaultToleranceIssue", "vim.fault.VimFault", "vim.version.version5", nil)
    create_data_type("vim.fault.VmFaultToleranceOpIssuesList", "VmFaultToleranceOpIssuesList", "vim.fault.VmFaultToleranceIssue", "vim.version.version5", [["errors", "vmodl.MethodFault[]", "vim.version.version5", {:optional => true}], ["warnings", "vmodl.MethodFault[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.fault.VmHostAffinityRuleViolation", "VmHostAffinityRuleViolation", "vim.fault.VmConfigFault", "vim.version.version6", [["vmName", "string", "vim.version.version6"], ["hostName", "string", "vim.version.version6"]])
    create_data_type("vim.fault.VmLimitLicense", "VmLimitLicense", "vmodl.fault.NotEnoughLicenses", "vim.version.version1", [["limit", "int", "vim.version.version1"]])
    create_data_type("vim.fault.VmMetadataManagerFault", "VmMetadataManagerFault", "vim.fault.VimFault", "vim.version.version9", nil)
    create_data_type("vim.fault.VmMonitorIncompatibleForFaultTolerance", "VmMonitorIncompatibleForFaultTolerance", "vim.fault.VimFault", "vim.version.version6", nil)
    create_data_type("vim.fault.VmToolsUpgradeFault", "VmToolsUpgradeFault", "vim.fault.VimFault", "vim.version.version1", nil)
    create_data_type("vim.fault.VmValidateMaxDevice", "VmValidateMaxDevice", "vim.fault.VimFault", "vim.version.version5", [["device", "string", "vim.version.version5"], ["max", "int", "vim.version.version5"], ["count", "int", "vim.version.version5"]])
    create_data_type("vim.fault.VramLimitLicense", "VramLimitLicense", "vmodl.fault.NotEnoughLicenses", "vim.version.version7", [["limit", "int", "vim.version.version7"]])
    create_data_type("vim.fault.VsanFault", "VsanFault", "vim.fault.VimFault", "vim.version.version9", nil)
    create_data_type("vim.fault.WipeDiskFault", "WipeDiskFault", "vim.fault.VimFault", "vim.version.version8", nil)
    create_data_type("vim.host.ActiveDirectorySpec", "HostActiveDirectory", "vmodl.DynamicData", "vim.version.version6", [["changeOperation", "string", "vim.version.version6"], ["spec", "vim.host.ActiveDirectorySpec.Specification", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.host.ActiveDirectorySpec.Specification", "HostActiveDirectorySpec", "vmodl.DynamicData", "vim.version.version6", [["domainName", "string", "vim.version.version6", {:optional => true}], ["userName", "string", "vim.version.version6", {:optional => true}], ["password", "string", "vim.version.version6", {:optional => true}], ["camServer", "string", "vim.version.version7", {:optional => true}], ["thumbprint", "string", "vim.version.version7", {:optional => true}]])
    create_managed_type("vim.host.AuthenticationManager", "HostAuthenticationManager", "vmodl.ManagedObject", "vim.version.version6", [["info", "vim.host.AuthenticationManagerInfo", "vim.version.version6", {}, nil], ["supportedStore", "vim.host.AuthenticationStore[]", "vim.version.version6", {}, nil]], nil)
    create_data_type("vim.host.AuthenticationManagerInfo", "HostAuthenticationManagerInfo", "vmodl.DynamicData", "vim.version.version6", [["authConfig", "vim.host.AuthenticationStoreInfo[]", "vim.version.version6"]])
    create_managed_type("vim.host.AuthenticationStore", "HostAuthenticationStore", "vmodl.ManagedObject", "vim.version.version6", [["info", "vim.host.AuthenticationStoreInfo", "vim.version.version6", {}, nil]], nil)
    create_data_type("vim.host.AuthenticationStoreInfo", "HostAuthenticationStoreInfo", "vmodl.DynamicData", "vim.version.version6", [["enabled", "boolean", "vim.version.version6"]])
    create_managed_type("vim.host.AutoStartManager", "HostAutoStartManager", "vmodl.ManagedObject", "vim.version.version1", [["config", "vim.host.AutoStartManager.Config", "vim.version.version1", {}, nil]], [["reconfigure", "ReconfigureAutostart", "vim.version.version1", [["spec", "vim.host.AutoStartManager.Config", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.AutoStart", nil], ["autoPowerOn", "AutoStartPowerOn", "vim.version.version1", [], [{}, "void", "void"], "Host.Config.AutoStart", nil], ["autoPowerOff", "AutoStartPowerOff", "vim.version.version1", [], [{}, "void", "void"], "Host.Config.AutoStart", nil]])
    create_enum_type("vim.host.AutoStartManager.Action", "AutoStartAction", "vim.version.version1", ["none", "systemDefault", "powerOn", "powerOff", "guestShutdown", "suspend"])
    create_data_type("vim.host.AutoStartManager.SystemDefaults", "AutoStartDefaults", "vmodl.DynamicData", "vim.version.version1", [["enabled", "boolean", "vim.version.version1", {:optional => true}], ["startDelay", "int", "vim.version.version1", {:optional => true}], ["stopDelay", "int", "vim.version.version1", {:optional => true}], ["waitForHeartbeat", "boolean", "vim.version.version1", {:optional => true}], ["stopAction", "string", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.AutoStartManager.AutoPowerInfo", "AutoStartPowerInfo", "vmodl.DynamicData", "vim.version.version1", [["key", "vim.VirtualMachine", "vim.version.version1"], ["startOrder", "int", "vim.version.version1"], ["startDelay", "int", "vim.version.version1"], ["waitForHeartbeat", "vim.host.AutoStartManager.AutoPowerInfo.WaitHeartbeatSetting", "vim.version.version1"], ["startAction", "string", "vim.version.version1"], ["stopDelay", "int", "vim.version.version1"], ["stopAction", "string", "vim.version.version1"]])
    create_enum_type("vim.host.AutoStartManager.AutoPowerInfo.WaitHeartbeatSetting", "AutoStartWaitHeartbeatSetting", "vim.version.version1", ["yes", "no", "systemDefault"])
    create_data_type("vim.host.AutoStartManager.Config", "HostAutoStartManagerConfig", "vmodl.DynamicData", "vim.version.version1", [["defaults", "vim.host.AutoStartManager.SystemDefaults", "vim.version.version1", {:optional => true}], ["powerInfo", "vim.host.AutoStartManager.AutoPowerInfo[]", "vim.version.version1", {:optional => true}]])
    create_managed_type("vim.host.BootDeviceSystem", "HostBootDeviceSystem", "vmodl.ManagedObject", "vim.version.version2", nil, [["queryBootDevices", "QueryBootDevices", "vim.version.version2", [], [{:optional => true}, "vim.host.BootDeviceInfo", "vim.host.BootDeviceInfo"], "System.Read", nil], ["updateBootDevice", "UpdateBootDevice", "vim.version.version2", [["key", "string", "vim.version.version2", {}, nil]], [{}, "void", "void"], "Host.Config.Maintenance", nil]])
    create_data_type("vim.host.BootDeviceSystem.BootDevice", "HostBootDevice", "vmodl.DynamicData", "vim.version.version2", [["key", "string", "vim.version.version2"], ["description", "string", "vim.version.version2"]])
    create_managed_type("vim.host.CacheConfigurationManager", "HostCacheConfigurationManager", "vmodl.ManagedObject", "vim.version.version7", [["cacheConfigurationInfo", "vim.host.CacheConfigurationManager.CacheConfigurationInfo[]", "vim.version.version7", {:optional => true}, "Host.Config.AdvancedConfig"]], [["configureCache", "ConfigureHostCache_Task", "vim.version.version7", [["spec", "vim.host.CacheConfigurationManager.CacheConfigurationSpec", "vim.version.version7", {}, nil]], [{}, "vim.Task", "void"], "Host.Config.AdvancedConfig", nil]])
    create_data_type("vim.host.CacheConfigurationManager.CacheConfigurationSpec", "HostCacheConfigurationSpec", "vmodl.DynamicData", "vim.version.version7", [["datastore", "vim.Datastore", "vim.version.version7"], ["swapSize", "long", "vim.version.version7"]])
    create_data_type("vim.host.CacheConfigurationManager.CacheConfigurationInfo", "HostCacheConfigurationInfo", "vmodl.DynamicData", "vim.version.version7", [["key", "vim.Datastore", "vim.version.version7"], ["swapSize", "long", "vim.version.version7"]])
    create_data_type("vim.host.Capability", "HostCapability", "vmodl.DynamicData", "vim.version.version1", [["recursiveResourcePoolsSupported", "boolean", "vim.version.version1"], ["cpuMemoryResourceConfigurationSupported", "boolean", "vim.version.version2"], ["rebootSupported", "boolean", "vim.version.version1"], ["shutdownSupported", "boolean", "vim.version.version1"], ["vmotionSupported", "boolean", "vim.version.version1"], ["standbySupported", "boolean", "vim.version.version2"], ["ipmiSupported", "boolean", "vim.version.version5", {:optional => true}], ["maxSupportedVMs", "int", "vim.version.version1", {:optional => true}], ["maxRunningVMs", "int", "vim.version.version1", {:optional => true}], ["maxSupportedVcpus", "int", "vim.version.version1", {:optional => true}], ["maxRegisteredVMs", "int", "vim.version.version8", {:optional => true}], ["datastorePrincipalSupported", "boolean", "vim.version.version1"], ["sanSupported", "boolean", "vim.version.version1"], ["nfsSupported", "boolean", "vim.version.version1"], ["iscsiSupported", "boolean", "vim.version.version1"], ["vlanTaggingSupported", "boolean", "vim.version.version1"], ["nicTeamingSupported", "boolean", "vim.version.version1"], ["highGuestMemSupported", "boolean", "vim.version.version1"], ["maintenanceModeSupported", "boolean", "vim.version.version1"], ["suspendedRelocateSupported", "boolean", "vim.version.version1"], ["restrictedSnapshotRelocateSupported", "boolean", "vim.version.version2"], ["perVmSwapFiles", "boolean", "vim.version.version2"], ["localSwapDatastoreSupported", "boolean", "vim.version.version2"], ["unsharedSwapVMotionSupported", "boolean", "vim.version.version2"], ["backgroundSnapshotsSupported", "boolean", "vim.version.version2"], ["preAssignedPCIUnitNumbersSupported", "boolean", "vim.version.version2"], ["screenshotSupported", "boolean", "vim.version.version2"], ["scaledScreenshotSupported", "boolean", "vim.version.version2"], ["storageVMotionSupported", "boolean", "vim.version.version5"], ["vmotionWithStorageVMotionSupported", "boolean", "vim.version.version5"], ["vmotionAcrossNetworkSupported", "boolean", "vim.version.version9", {:optional => true}], ["hbrNicSelectionSupported", "boolean", "vim.version.version8"], ["recordReplaySupported", "boolean", "vim.version.version5"], ["ftSupported", "boolean", "vim.version.version5"], ["replayUnsupportedReason", "string", "vim.version.version5", {:optional => true}], ["replayCompatibilityIssues", "string[]", "vim.version.version6", {:optional => true}], ["ftCompatibilityIssues", "string[]", "vim.version.version6", {:optional => true}], ["loginBySSLThumbprintSupported", "boolean", "vim.version.version5", {:optional => true}], ["cloneFromSnapshotSupported", "boolean", "vim.version.version5"], ["deltaDiskBackingsSupported", "boolean", "vim.version.version5"], ["perVMNetworkTrafficShapingSupported", "boolean", "vim.version.version4"], ["tpmSupported", "boolean", "vim.version.version5"], ["supportedCpuFeature", "vim.host.CpuIdInfo[]", "vim.version.version5", {:optional => true}], ["virtualExecUsageSupported", "boolean", "vim.version.version5"], ["storageIORMSupported", "boolean", "vim.version.version6"], ["vmDirectPathGen2Supported", "boolean", "vim.version.version6"], ["vmDirectPathGen2UnsupportedReason", "string[]", "vim.version.version6", {:optional => true}], ["vmDirectPathGen2UnsupportedReasonExtended", "string", "vim.version.version6", {:optional => true}], ["supportedVmfsMajorVersion", "int[]", "vim.version.version7", {:optional => true}], ["vStorageCapable", "boolean", "vim.version.version6"], ["snapshotRelayoutSupported", "boolean", "vim.version.version7"], ["firewallIpRulesSupported", "boolean", "vim.version.version7", {:optional => true}], ["servicePackageInfoSupported", "boolean", "vim.version.version7", {:optional => true}], ["maxHostRunningVms", "int", "vim.version.version7", {:optional => true}], ["maxHostSupportedVcpus", "int", "vim.version.version7", {:optional => true}], ["vmfsDatastoreMountCapable", "boolean", "vim.version.version7"], ["eightPlusHostVmfsSharedAccessSupported", "boolean", "vim.version.version8"], ["nestedHVSupported", "boolean", "vim.version.version8"], ["vPMCSupported", "boolean", "vim.version.version8"], ["interVMCommunicationThroughVMCISupported", "boolean", "vim.version.version8"], ["scheduledHardwareUpgradeSupported", "boolean", "vim.version.version8", {:optional => true}], ["featureCapabilitiesSupported", "boolean", "vim.version.version8"], ["latencySensitivitySupported", "boolean", "vim.version.version8"], ["storagePolicySupported", "boolean", "vim.version.version9", {:optional => true}], ["accel3dSupported", "boolean", "vim.version.version8"], ["reliableMemoryAware", "boolean", "vim.version.version9", {:optional => true}], ["multipleNetworkStackInstanceSupported", "boolean", "vim.version.version9", {:optional => true}], ["vsanSupported", "boolean", "vim.version.version9", {:optional => true}], ["vFlashSupported", "boolean", "vim.version.version9", {:optional => true}]])
    create_enum_type("vim.host.Capability.ReplayUnsupportedReason", "HostReplayUnsupportedReason", "vim.version.version5", ["incompatibleProduct", "incompatibleCpu", "hvDisabled", "cpuidLimitSet", "oldBIOS", "unknown"])
    create_enum_type("vim.host.Capability.FtUnsupportedReason", "HostCapabilityFtUnsupportedReason", "vim.version.version6", ["vMotionNotLicensed", "missingVMotionNic", "missingFTLoggingNic", "ftNotLicensed", "haAgentIssue", "unsupportedProduct", "cpuHvUnsupported", "cpuHwmmuUnsupported", "cpuHvDisabled"])
    create_enum_type("vim.host.Capability.VmDirectPathGen2UnsupportedReason", "HostCapabilityVmDirectPathGen2UnsupportedReason", "vim.version.version6", ["hostNptIncompatibleProduct", "hostNptIncompatibleHardware", "hostNptDisabled"])
    create_data_type("vim.host.ConfigChange", "HostConfigChange", "vmodl.DynamicData", "vim.version.version1", nil)
    create_enum_type("vim.host.ConfigChange.Mode", "HostConfigChangeMode", "vim.version.version1", ["modify", "replace"])
    create_enum_type("vim.host.ConfigChange.Operation", "HostConfigChangeOperation", "vim.version.version1", ["add", "remove", "edit"])
    create_data_type("vim.host.ConfigManager", "HostConfigManager", "vmodl.DynamicData", "vim.version.version1", [["cpuScheduler", "vim.host.CpuSchedulerSystem", "vim.version.version1", {:optional => true}], ["datastoreSystem", "vim.host.DatastoreSystem", "vim.version.version1", {:optional => true}], ["memoryManager", "vim.host.MemoryManagerSystem", "vim.version.version1", {:optional => true}], ["storageSystem", "vim.host.StorageSystem", "vim.version.version1", {:optional => true}], ["networkSystem", "vim.host.NetworkSystem", "vim.version.version1", {:optional => true}], ["vmotionSystem", "vim.host.VMotionSystem", "vim.version.version1", {:optional => true}], ["virtualNicManager", "vim.host.VirtualNicManager", "vim.version.version5", {:optional => true}], ["serviceSystem", "vim.host.ServiceSystem", "vim.version.version1", {:optional => true}], ["firewallSystem", "vim.host.FirewallSystem", "vim.version.version1", {:optional => true}], ["advancedOption", "vim.option.OptionManager", "vim.version.version1", {:optional => true}], ["diagnosticSystem", "vim.host.DiagnosticSystem", "vim.version.version1", {:optional => true}], ["autoStartManager", "vim.host.AutoStartManager", "vim.version.version1", {:optional => true}], ["snmpSystem", "vim.host.SnmpSystem", "vim.version.version1", {:optional => true}], ["dateTimeSystem", "vim.host.DateTimeSystem", "vim.version.version2", {:optional => true}], ["patchManager", "vim.host.PatchManager", "vim.version.version2", {:optional => true}], ["imageConfigManager", "vim.host.ImageConfigManager", "vim.version.version7", {:optional => true}], ["bootDeviceSystem", "vim.host.BootDeviceSystem", "vim.version.version2", {:optional => true}], ["firmwareSystem", "vim.host.FirmwareSystem", "vim.version.version2", {:optional => true}], ["healthStatusSystem", "vim.host.HealthStatusSystem", "vim.version.version2", {:optional => true}], ["pciPassthruSystem", "vim.host.PciPassthruSystem", "vim.version.version5", {:optional => true}], ["licenseManager", "vim.LicenseManager", "vim.version.version5", {:optional => true}], ["kernelModuleSystem", "vim.host.KernelModuleSystem", "vim.version.version5", {:optional => true}], ["authenticationManager", "vim.host.AuthenticationManager", "vim.version.version6", {:optional => true}], ["powerSystem", "vim.host.PowerSystem", "vim.version.version6", {:optional => true}], ["cacheConfigurationManager", "vim.host.CacheConfigurationManager", "vim.version.version7", {:optional => true}], ["esxAgentHostManager", "vim.host.EsxAgentHostManager", "vim.version.version7", {:optional => true}], ["iscsiManager", "vim.host.IscsiManager", "vim.version.version7", {:optional => true}], ["vFlashManager", "vim.host.VFlashManager", "vim.version.version9", {:optional => true}], ["vsanSystem", "vim.host.VsanSystem", "vim.version.version9", {:optional => true}], ["graphicsManager", "vim.host.GraphicsManager", "vim.version.version9", {:optional => true}], ["vsanInternalSystem", "vim.host.VsanInternalSystem", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.host.ConnectSpec", "HostConnectSpec", "vmodl.DynamicData", "vim.version.version1", [["hostName", "string", "vim.version.version1", {:optional => true}], ["port", "int", "vim.version.version1", {:optional => true}], ["sslThumbprint", "string", "vim.version.version2", {:optional => true}], ["userName", "string", "vim.version.version1", {:optional => true}], ["password", "string", "vim.version.version1", {:optional => true}], ["vmFolder", "vim.Folder", "vim.version.version1", {:optional => true}], ["force", "boolean", "vim.version.version1"], ["vimAccountName", "string", "vim.version.version1", {:optional => true}], ["vimAccountPassword", "string", "vim.version.version1", {:optional => true}], ["managementIp", "string", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.CpuIdInfo", "HostCpuIdInfo", "vmodl.DynamicData", "vim.version.version1", [["level", "int", "vim.version.version1"], ["vendor", "string", "vim.version.version1", {:optional => true}], ["eax", "string", "vim.version.version1", {:optional => true}], ["ebx", "string", "vim.version.version1", {:optional => true}], ["ecx", "string", "vim.version.version1", {:optional => true}], ["edx", "string", "vim.version.version1", {:optional => true}]])
    create_managed_type("vim.host.CpuSchedulerSystem", "HostCpuSchedulerSystem", "vim.ExtensibleManagedObject", "vim.version.version1", [["hyperthreadInfo", "vim.host.CpuSchedulerSystem.HyperThreadScheduleInfo", "vim.version.version1", {:optional => true}, nil]], [["enableHyperThreading", "EnableHyperThreading", "vim.version.version1", [], [{}, "void", "void"], "Host.Config.HyperThreading", nil], ["disableHyperThreading", "DisableHyperThreading", "vim.version.version1", [], [{}, "void", "void"], "Host.Config.HyperThreading", nil]])
    create_data_type("vim.host.CpuSchedulerSystem.HyperThreadScheduleInfo", "HostHyperThreadScheduleInfo", "vmodl.DynamicData", "vim.version.version1", [["available", "boolean", "vim.version.version1"], ["active", "boolean", "vim.version.version1"], ["config", "boolean", "vim.version.version1"]])
    create_managed_type("vim.host.DatastoreBrowser", "HostDatastoreBrowser", "vmodl.ManagedObject", "vim.version.version1", [["datastore", "vim.Datastore[]", "vim.version.version1", {:optional => true}, "System.View"], ["supportedType", "vim.host.DatastoreBrowser.Query[]", "vim.version.version1", {:optional => true}, nil]], [["search", "SearchDatastore_Task", "vim.version.version1", [["datastorePath", "string", "vim.version.version1", {}, nil], ["searchSpec", "vim.host.DatastoreBrowser.SearchSpec", "vim.version.version1", {:optional => true}, nil]], [{}, "vim.Task", "vim.host.DatastoreBrowser.SearchResults"], nil, ["vim.fault.InvalidDatastore", "vim.fault.FileFault"]], ["searchSubFolders", "SearchDatastoreSubFolders_Task", "vim.version.version1", [["datastorePath", "string", "vim.version.version1", {}, nil], ["searchSpec", "vim.host.DatastoreBrowser.SearchSpec", "vim.version.version1", {:optional => true}, nil]], [{:optional => true}, "vim.Task", "vim.host.DatastoreBrowser.SearchResults[]"], nil, ["vim.fault.InvalidDatastore", "vim.fault.FileFault"]], ["deleteFile", "DeleteFile", "vim.version.version1", [["datastorePath", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Datastore.DeleteFile", ["vim.fault.InvalidDatastore", "vim.fault.FileFault"]]])
    create_data_type("vim.host.DatastoreBrowser.FileInfo", "FileInfo", "vmodl.DynamicData", "vim.version.version1", [["path", "string", "vim.version.version1"], ["fileSize", "long", "vim.version.version1", {:optional => true}], ["modification", "vmodl.DateTime", "vim.version.version1", {:optional => true}], ["owner", "string", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.DatastoreBrowser.FileInfo.Details", "FileQueryFlags", "vmodl.DynamicData", "vim.version.version1", [["fileType", "boolean", "vim.version.version1"], ["fileSize", "boolean", "vim.version.version1"], ["modification", "boolean", "vim.version.version1"], ["fileOwner", "boolean", "vim.version.version5"]])
    create_data_type("vim.host.DatastoreBrowser.Query", "FileQuery", "vmodl.DynamicData", "vim.version.version1", nil)
    create_data_type("vim.host.DatastoreBrowser.VmConfigQuery", "VmConfigFileQuery", "vim.host.DatastoreBrowser.Query", "vim.version.version1", [["filter", "vim.host.DatastoreBrowser.VmConfigQuery.Filter", "vim.version.version1", {:optional => true}], ["details", "vim.host.DatastoreBrowser.VmConfigQuery.Details", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.DatastoreBrowser.VmConfigQuery.Filter", "VmConfigFileQueryFilter", "vmodl.DynamicData", "vim.version.version1", [["matchConfigVersion", "int[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.DatastoreBrowser.VmConfigQuery.Details", "VmConfigFileQueryFlags", "vmodl.DynamicData", "vim.version.version1", [["configVersion", "boolean", "vim.version.version1"]])
    create_data_type("vim.host.DatastoreBrowser.TemplateVmConfigQuery", "TemplateConfigFileQuery", "vim.host.DatastoreBrowser.VmConfigQuery", "vim.version.version1", nil)
    create_data_type("vim.host.DatastoreBrowser.VmDiskQuery", "VmDiskFileQuery", "vim.host.DatastoreBrowser.Query", "vim.version.version1", [["filter", "vim.host.DatastoreBrowser.VmDiskQuery.Filter", "vim.version.version1", {:optional => true}], ["details", "vim.host.DatastoreBrowser.VmDiskQuery.Details", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.DatastoreBrowser.VmDiskQuery.Filter", "VmDiskFileQueryFilter", "vmodl.DynamicData", "vim.version.version1", [["diskType", "vmodl.TypeName[]", "vim.version.version1", {:optional => true}], ["matchHardwareVersion", "int[]", "vim.version.version1", {:optional => true}], ["controllerType", "vmodl.TypeName[]", "vim.version.version2", {:optional => true}], ["thin", "boolean", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.DatastoreBrowser.VmDiskQuery.Details", "VmDiskFileQueryFlags", "vmodl.DynamicData", "vim.version.version1", [["diskType", "boolean", "vim.version.version1"], ["capacityKb", "boolean", "vim.version.version1"], ["hardwareVersion", "boolean", "vim.version.version1"], ["controllerType", "boolean", "vim.version.version2", {:optional => true}], ["diskExtents", "boolean", "vim.version.version2", {:optional => true}], ["thin", "boolean", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.DatastoreBrowser.FolderQuery", "FolderFileQuery", "vim.host.DatastoreBrowser.Query", "vim.version.version1", nil)
    create_data_type("vim.host.DatastoreBrowser.VmSnapshotQuery", "VmSnapshotFileQuery", "vim.host.DatastoreBrowser.Query", "vim.version.version1", nil)
    create_data_type("vim.host.DatastoreBrowser.IsoImageQuery", "IsoImageFileQuery", "vim.host.DatastoreBrowser.Query", "vim.version.version1", nil)
    create_data_type("vim.host.DatastoreBrowser.FloppyImageQuery", "FloppyImageFileQuery", "vim.host.DatastoreBrowser.Query", "vim.version.version1", nil)
    create_data_type("vim.host.DatastoreBrowser.VmNvramQuery", "VmNvramFileQuery", "vim.host.DatastoreBrowser.Query", "vim.version.version1", nil)
    create_data_type("vim.host.DatastoreBrowser.VmLogQuery", "VmLogFileQuery", "vim.host.DatastoreBrowser.Query", "vim.version.version1", nil)
    create_data_type("vim.host.DatastoreBrowser.VmConfigInfo", "VmConfigFileInfo", "vim.host.DatastoreBrowser.FileInfo", "vim.version.version1", [["configVersion", "int", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.DatastoreBrowser.TemplateVmConfigInfo", "TemplateConfigFileInfo", "vim.host.DatastoreBrowser.VmConfigInfo", "vim.version.version1", nil)
    create_data_type("vim.host.DatastoreBrowser.VmDiskInfo", "VmDiskFileInfo", "vim.host.DatastoreBrowser.FileInfo", "vim.version.version1", [["diskType", "vmodl.TypeName", "vim.version.version1", {:optional => true}], ["capacityKb", "long", "vim.version.version1", {:optional => true}], ["hardwareVersion", "int", "vim.version.version1", {:optional => true}], ["controllerType", "vmodl.TypeName", "vim.version.version2", {:optional => true}], ["diskExtents", "string[]", "vim.version.version2", {:optional => true}], ["thin", "boolean", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.DatastoreBrowser.FolderInfo", "FolderFileInfo", "vim.host.DatastoreBrowser.FileInfo", "vim.version.version1", nil)
    create_data_type("vim.host.DatastoreBrowser.VmSnapshotInfo", "VmSnapshotFileInfo", "vim.host.DatastoreBrowser.FileInfo", "vim.version.version1", nil)
    create_data_type("vim.host.DatastoreBrowser.IsoImageInfo", "IsoImageFileInfo", "vim.host.DatastoreBrowser.FileInfo", "vim.version.version1", nil)
    create_data_type("vim.host.DatastoreBrowser.FloppyImageInfo", "FloppyImageFileInfo", "vim.host.DatastoreBrowser.FileInfo", "vim.version.version1", nil)
    create_data_type("vim.host.DatastoreBrowser.VmNvramInfo", "VmNvramFileInfo", "vim.host.DatastoreBrowser.FileInfo", "vim.version.version1", nil)
    create_data_type("vim.host.DatastoreBrowser.VmLogInfo", "VmLogFileInfo", "vim.host.DatastoreBrowser.FileInfo", "vim.version.version1", nil)
    create_data_type("vim.host.DatastoreBrowser.SearchSpec", "HostDatastoreBrowserSearchSpec", "vmodl.DynamicData", "vim.version.version1", [["query", "vim.host.DatastoreBrowser.Query[]", "vim.version.version1", {:optional => true}], ["details", "vim.host.DatastoreBrowser.FileInfo.Details", "vim.version.version1", {:optional => true}], ["searchCaseInsensitive", "boolean", "vim.version.version1", {:optional => true}], ["matchPattern", "string[]", "vim.version.version1", {:optional => true}], ["sortFoldersFirst", "boolean", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.DatastoreBrowser.SearchResults", "HostDatastoreBrowserSearchResults", "vmodl.DynamicData", "vim.version.version1", [["datastore", "vim.Datastore", "vim.version.version1", {:optional => true}], ["folderPath", "string", "vim.version.version1", {:optional => true}], ["file", "vim.host.DatastoreBrowser.FileInfo[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.VmfsDatastoreSpec", "VmfsDatastoreSpec", "vmodl.DynamicData", "vim.version.version1", [["diskUuid", "string", "vim.version.version1"]])
    create_data_type("vim.host.DateTimeConfig", "HostDateTimeConfig", "vmodl.DynamicData", "vim.version.version2", [["timeZone", "string", "vim.version.version2", {:optional => true}], ["ntpConfig", "vim.host.NtpConfig", "vim.version.version2", {:optional => true}]])
    create_managed_type("vim.host.DateTimeSystem", "HostDateTimeSystem", "vmodl.ManagedObject", "vim.version.version2", [["dateTimeInfo", "vim.host.DateTimeInfo", "vim.version.version2", {}, "System.Read"]], [["updateConfig", "UpdateDateTimeConfig", "vim.version.version2", [["config", "vim.host.DateTimeConfig", "vim.version.version2", {}, nil]], [{}, "void", "void"], "Host.Config.DateTime", ["vim.fault.HostConfigFault"]], ["queryAvailableTimeZones", "QueryAvailableTimeZones", "vim.version.version2", [], [{:optional => true}, "vim.host.DateTimeSystem.TimeZone[]", "vim.host.DateTimeSystem.TimeZone[]"], "System.Read", nil], ["queryDateTime", "QueryDateTime", "vim.version.version2", [], [{}, "vmodl.DateTime", "vmodl.DateTime"], "System.Read", nil], ["updateDateTime", "UpdateDateTime", "vim.version.version2", [["dateTime", "vmodl.DateTime", "vim.version.version2", {}, nil]], [{}, "void", "void"], "Host.Config.DateTime", ["vim.fault.HostConfigFault"]], ["refresh", "RefreshDateTimeSystem", "vim.version.version2", [], [{}, "void", "void"], "Host.Config.DateTime", nil]])
    create_data_type("vim.host.DateTimeSystem.TimeZone", "HostDateTimeSystemTimeZone", "vmodl.DynamicData", "vim.version.version2", [["key", "string", "vim.version.version2"], ["name", "string", "vim.version.version2"], ["description", "string", "vim.version.version2"], ["gmtOffset", "int", "vim.version.version2"]])
    create_data_type("vim.host.Device", "HostDevice", "vmodl.DynamicData", "vim.version.version1", [["deviceName", "string", "vim.version.version1"], ["deviceType", "string", "vim.version.version1"]])
    create_data_type("vim.host.DhcpService", "HostDhcpService", "vmodl.DynamicData", "vim.version.version2", [["key", "string", "vim.version.version2"], ["spec", "vim.host.DhcpService.Specification", "vim.version.version2"]])
    create_data_type("vim.host.DhcpService.Specification", "HostDhcpServiceSpec", "vmodl.DynamicData", "vim.version.version2", [["virtualSwitch", "string", "vim.version.version2"], ["defaultLeaseDuration", "int", "vim.version.version2"], ["leaseBeginIp", "string", "vim.version.version2"], ["leaseEndIp", "string", "vim.version.version2"], ["maxLeaseDuration", "int", "vim.version.version2"], ["unlimitedLease", "boolean", "vim.version.version2"], ["ipSubnetAddr", "string", "vim.version.version2"], ["ipSubnetMask", "string", "vim.version.version2"]])
    create_data_type("vim.host.DhcpService.Config", "HostDhcpServiceConfig", "vmodl.DynamicData", "vim.version.version2", [["changeOperation", "string", "vim.version.version2", {:optional => true}], ["key", "string", "vim.version.version2"], ["spec", "vim.host.DhcpService.Specification", "vim.version.version2"]])
    create_managed_type("vim.host.DirectoryStore", "HostDirectoryStore", "vim.host.AuthenticationStore", "vim.version.version6", nil, nil)
    create_data_type("vim.host.DirectoryStoreInfo", "HostDirectoryStoreInfo", "vim.host.AuthenticationStoreInfo", "vim.version.version6", nil)
    create_data_type("vim.host.DiskConfigurationResult", "HostDiskConfigurationResult", "vmodl.DynamicData", "vim.version.version9", [["devicePath", "string", "vim.version.version9", {:optional => true}], ["success", "boolean", "vim.version.version9", {:optional => true}], ["fault", "vmodl.MethodFault", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.host.DiskDimensions", "HostDiskDimensions", "vmodl.DynamicData", "vim.version.version1", nil)
    create_data_type("vim.host.DiskDimensions.Chs", "HostDiskDimensionsChs", "vmodl.DynamicData", "vim.version.version1", [["cylinder", "long", "vim.version.version1"], ["head", "int", "vim.version.version1"], ["sector", "int", "vim.version.version1"]])
    create_data_type("vim.host.DiskDimensions.Lba", "HostDiskDimensionsLba", "vmodl.DynamicData", "vim.version.version1", [["blockSize", "int", "vim.version.version1"], ["block", "long", "vim.version.version1"]])
    create_data_type("vim.host.DiskPartitionInfo", "HostDiskPartitionInfo", "vmodl.DynamicData", "vim.version.version1", [["deviceName", "string", "vim.version.version1"], ["spec", "vim.host.DiskPartitionInfo.Specification", "vim.version.version1"], ["layout", "vim.host.DiskPartitionInfo.Layout", "vim.version.version1"]])
    create_enum_type("vim.host.DiskPartitionInfo.PartitionFormat", "HostDiskPartitionInfoPartitionFormat", "vim.version.version7", ["gpt", "mbr", "unknown"])
    create_enum_type("vim.host.DiskPartitionInfo.Type", "HostDiskPartitionInfoType", "vim.version.version1", ["none", "vmfs", "linuxNative", "linuxSwap", "extended", "ntfs", "vmkDiagnostic", "vffs"])
    create_data_type("vim.host.DiskPartitionInfo.Partition", "HostDiskPartitionAttributes", "vmodl.DynamicData", "vim.version.version1", [["partition", "int", "vim.version.version1"], ["startSector", "long", "vim.version.version1"], ["endSector", "long", "vim.version.version1"], ["type", "string", "vim.version.version1"], ["guid", "string", "vim.version.version7", {:optional => true}], ["logical", "boolean", "vim.version.version1"], ["attributes", "byte", "vim.version.version1"], ["partitionAlignment", "long", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.host.DiskPartitionInfo.BlockRange", "HostDiskPartitionBlockRange", "vmodl.DynamicData", "vim.version.version1", [["partition", "int", "vim.version.version1", {:optional => true}], ["type", "string", "vim.version.version1"], ["start", "vim.host.DiskDimensions.Lba", "vim.version.version1"], ["end", "vim.host.DiskDimensions.Lba", "vim.version.version1"]])
    create_data_type("vim.host.DiskPartitionInfo.Specification", "HostDiskPartitionSpec", "vmodl.DynamicData", "vim.version.version1", [["partitionFormat", "string", "vim.version.version7", {:optional => true}], ["chs", "vim.host.DiskDimensions.Chs", "vim.version.version1", {:optional => true}], ["totalSectors", "long", "vim.version.version1", {:optional => true}], ["partition", "vim.host.DiskPartitionInfo.Partition[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.DiskPartitionInfo.Layout", "HostDiskPartitionLayout", "vmodl.DynamicData", "vim.version.version1", [["total", "vim.host.DiskDimensions.Lba", "vim.version.version1", {:optional => true}], ["partition", "vim.host.DiskPartitionInfo.BlockRange[]", "vim.version.version1"]])
    create_data_type("vim.host.DnsConfig", "HostDnsConfig", "vmodl.DynamicData", "vim.version.version1", [["dhcp", "boolean", "vim.version.version1"], ["virtualNicDevice", "string", "vim.version.version1", {:optional => true}], ["hostName", "string", "vim.version.version1"], ["domainName", "string", "vim.version.version1"], ["address", "string[]", "vim.version.version1", {:optional => true}], ["searchDomain", "string[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.DnsConfigSpec", "HostDnsConfigSpec", "vim.host.DnsConfig", "vim.version.version5", [["virtualNicConnection", "vim.host.VirtualNicConnection", "vim.version.version5", {:optional => true}]])
    create_managed_type("vim.host.EsxAgentHostManager", "HostEsxAgentHostManager", "vmodl.ManagedObject", "vim.version.version7", [["configInfo", "vim.host.EsxAgentHostManager.ConfigInfo", "vim.version.version7", {}, "Host.Config.Settings"]], [["updateConfig", "EsxAgentHostManagerUpdateConfig", "vim.version.version7", [["configInfo", "vim.host.EsxAgentHostManager.ConfigInfo", "vim.version.version7", {}, nil]], [{}, "void", "void"], "Host.Config.Settings", ["vim.fault.HostConfigFault"]]])
    create_data_type("vim.host.EsxAgentHostManager.ConfigInfo", "HostEsxAgentHostManagerConfigInfo", "vmodl.DynamicData", "vim.version.version7", [["agentVmDatastore", "vim.Datastore", "vim.version.version7", {:optional => true}], ["agentVmNetwork", "vim.Network", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.host.FcoeConfig", "FcoeConfig", "vmodl.DynamicData", "vim.version.version7", [["priorityClass", "int", "vim.version.version7"], ["sourceMac", "string", "vim.version.version7"], ["vlanRange", "vim.host.FcoeConfig.VlanRange[]", "vim.version.version7"], ["capabilities", "vim.host.FcoeConfig.FcoeCapabilities", "vim.version.version7"], ["fcoeActive", "boolean", "vim.version.version7"]])
    create_data_type("vim.host.FcoeConfig.VlanRange", "FcoeConfigVlanRange", "vmodl.DynamicData", "vim.version.version7", [["vlanLow", "int", "vim.version.version7"], ["vlanHigh", "int", "vim.version.version7"]])
    create_data_type("vim.host.FcoeConfig.FcoeCapabilities", "FcoeConfigFcoeCapabilities", "vmodl.DynamicData", "vim.version.version7", [["priorityClass", "boolean", "vim.version.version7"], ["sourceMacAddress", "boolean", "vim.version.version7"], ["vlanRange", "boolean", "vim.version.version7"]])
    create_data_type("vim.host.FcoeConfig.FcoeSpecification", "FcoeConfigFcoeSpecification", "vmodl.DynamicData", "vim.version.version7", [["underlyingPnic", "string", "vim.version.version7"], ["priorityClass", "int", "vim.version.version7", {:optional => true}], ["sourceMac", "string", "vim.version.version7", {:optional => true}], ["vlanRange", "vim.host.FcoeConfig.VlanRange[]", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.host.FeatureCapability", "HostFeatureCapability", "vmodl.DynamicData", "vim.version.version8", [["key", "string", "vim.version.version8"], ["featureName", "string", "vim.version.version8"], ["value", "string", "vim.version.version8"]])
    create_data_type("vim.host.FeatureMask", "HostFeatureMask", "vmodl.DynamicData", "vim.version.version8", [["key", "string", "vim.version.version8"], ["featureName", "string", "vim.version.version8"], ["value", "string", "vim.version.version8"]])
    create_data_type("vim.host.FeatureVersionInfo", "HostFeatureVersionInfo", "vmodl.DynamicData", "vim.version.version6", [["key", "string", "vim.version.version6"], ["value", "string", "vim.version.version6"]])
    create_enum_type("vim.host.FeatureVersionInfo.FeatureVersionKey", "HostFeatureVersionKey", "vim.version.version6", ["faultTolerance"])
    create_data_type("vim.host.FileAccess", "HostFileAccess", "vmodl.DynamicData", "vim.version.version1", [["who", "string", "vim.version.version1"], ["what", "string", "vim.version.version1"]])
    create_data_type("vim.host.FileAccess.Modes", "ModeInfo", "vmodl.DynamicData", "vim.version.version1", [["browse", "string", "vim.version.version1", {:optional => true}], ["read", "string", "vim.version.version1"], ["modify", "string", "vim.version.version1"], ["use", "string", "vim.version.version1"], ["admin", "string", "vim.version.version1", {:optional => true}], ["full", "string", "vim.version.version1"]])
    create_data_type("vim.host.FileSystemVolumeInfo", "HostFileSystemVolumeInfo", "vmodl.DynamicData", "vim.version.version1", [["volumeTypeList", "string[]", "vim.version.version1", {:optional => true}], ["mountInfo", "vim.host.FileSystemMountInfo[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.FileSystemMountInfo", "HostFileSystemMountInfo", "vmodl.DynamicData", "vim.version.version1", [["mountInfo", "vim.host.MountInfo", "vim.version.version1"], ["volume", "vim.host.FileSystemVolume", "vim.version.version1"], ["vStorageSupport", "string", "vim.version.version6", {:optional => true}]])
    create_enum_type("vim.host.FileSystemMountInfo.VStorageSupportStatus", "FileSystemMountInfoVStorageSupportStatus", "vim.version.version6", ["vStorageSupported", "vStorageUnsupported", "vStorageUnknown"])
    create_data_type("vim.host.FileSystemVolume", "HostFileSystemVolume", "vmodl.DynamicData", "vim.version.version1", [["type", "string", "vim.version.version1"], ["name", "string", "vim.version.version1"], ["capacity", "long", "vim.version.version1"]])
    create_data_type("vim.host.NasVolume", "HostNasVolume", "vim.host.FileSystemVolume", "vim.version.version1", [["remoteHost", "string", "vim.version.version1"], ["remotePath", "string", "vim.version.version1"], ["userName", "string", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.host.NasVolume.Specification", "HostNasVolumeSpec", "vmodl.DynamicData", "vim.version.version1", [["remoteHost", "string", "vim.version.version1"], ["remotePath", "string", "vim.version.version1"], ["localPath", "string", "vim.version.version1"], ["accessMode", "string", "vim.version.version1"], ["type", "string", "vim.version.version2", {:optional => true}], ["userName", "string", "vim.version.version2", {:optional => true}], ["password", "string", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.host.NasVolume.Config", "HostNasVolumeConfig", "vmodl.DynamicData", "vim.version.version5", [["changeOperation", "string", "vim.version.version5", {:optional => true}], ["spec", "vim.host.NasVolume.Specification", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.LocalFileSystemVolume", "HostLocalFileSystemVolume", "vim.host.FileSystemVolume", "vim.version.version1", [["device", "string", "vim.version.version1"]])
    create_data_type("vim.host.LocalFileSystemVolume.Specification", "HostLocalFileSystemVolumeSpec", "vmodl.DynamicData", "vim.version.version1", [["device", "string", "vim.version.version1"], ["localPath", "string", "vim.version.version1"]])
    create_data_type("vim.host.VfatVolume", "HostVfatVolume", "vim.host.FileSystemVolume", "vim.version.version7", nil)
    create_data_type("vim.host.FirewallInfo", "HostFirewallInfo", "vmodl.DynamicData", "vim.version.version1", [["defaultPolicy", "vim.host.FirewallInfo.DefaultPolicy", "vim.version.version1"], ["ruleset", "vim.host.Ruleset[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.FirewallInfo.DefaultPolicy", "HostFirewallDefaultPolicy", "vmodl.DynamicData", "vim.version.version1", [["incomingBlocked", "boolean", "vim.version.version1", {:optional => true}], ["outgoingBlocked", "boolean", "vim.version.version1", {:optional => true}]])
    create_managed_type("vim.host.FirmwareSystem", "HostFirmwareSystem", "vmodl.ManagedObject", "vim.version.version2", nil, [["resetToFactoryDefaults", "ResetFirmwareToFactoryDefaults", "vim.version.version2", [], [{}, "void", "void"], "Host.Config.Firmware", ["vim.fault.InvalidState"]], ["backupConfiguration", "BackupFirmwareConfiguration", "vim.version.version2", [], [{}, "string", "string"], "Host.Config.Firmware", nil], ["queryConfigUploadURL", "QueryFirmwareConfigUploadURL", "vim.version.version2", [], [{}, "string", "string"], "Host.Config.Firmware", nil], ["restoreConfiguration", "RestoreFirmwareConfiguration", "vim.version.version2", [["force", "boolean", "vim.version.version2", {}, nil]], [{}, "void", "void"], "Host.Config.Firmware", ["vim.fault.InvalidState", "vim.fault.FileFault", "vim.fault.MismatchedBundle", "vim.fault.InvalidBundle"]]])
    create_data_type("vim.host.FlagInfo", "HostFlagInfo", "vmodl.DynamicData", "vim.version.version2", [["backgroundSnapshotsEnabled", "boolean", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.host.ForceMountedInfo", "HostForceMountedInfo", "vmodl.DynamicData", "vim.version.version5", [["persist", "boolean", "vim.version.version5"], ["mounted", "boolean", "vim.version.version5"]])
    create_data_type("vim.host.GraphicsInfo", "HostGraphicsInfo", "vmodl.DynamicData", "vim.version.version9", [["deviceName", "string", "vim.version.version9"], ["vendorName", "string", "vim.version.version9"], ["pciId", "string", "vim.version.version9"], ["graphicsType", "string", "vim.version.version9"], ["memorySizeInKB", "long", "vim.version.version9"], ["vm", "vim.VirtualMachine[]", "vim.version.version9", {:optional => true}]])
    create_enum_type("vim.host.GraphicsInfo.GraphicsType", "HostGraphicsInfoGraphicsType", "vim.version.version9", ["basic", "shared", "direct"])
    create_managed_type("vim.host.GraphicsManager", "HostGraphicsManager", "vim.ExtensibleManagedObject", "vim.version.version9", [["graphicsInfo", "vim.host.GraphicsInfo[]", "vim.version.version9", {:optional => true}, "System.Read"]], [["refresh", "RefreshGraphicsManager", "vim.version.version9", [], [{}, "void", "void"], "Host.Config.Settings", nil], ["isSharedGraphicsActive", "IsSharedGraphicsActive", "vim.version.version9", [], [{}, "boolean", "boolean"], "System.Read", nil]])
    create_data_type("vim.host.HardwareInfo", "HostHardwareInfo", "vmodl.DynamicData", "vim.version.version1", [["systemInfo", "vim.host.SystemInfo", "vim.version.version1"], ["cpuPowerManagementInfo", "vim.host.CpuPowerManagementInfo", "vim.version.version5", {:optional => true}], ["cpuInfo", "vim.host.CpuInfo", "vim.version.version1"], ["cpuPkg", "vim.host.CpuPackage[]", "vim.version.version1"], ["memorySize", "long", "vim.version.version1"], ["numaInfo", "vim.host.NumaInfo", "vim.version.version1", {:optional => true}], ["smcPresent", "boolean", "vim.version.version7"], ["pciDevice", "vim.host.PciDevice[]", "vim.version.version1", {:optional => true}], ["cpuFeature", "vim.host.CpuIdInfo[]", "vim.version.version1", {:optional => true}], ["biosInfo", "vim.host.BIOSInfo", "vim.version.version2", {:optional => true}], ["reliableMemoryInfo", "vim.host.ReliableMemoryInfo", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.host.SystemInfo", "HostSystemInfo", "vmodl.DynamicData", "vim.version.version1", [["vendor", "string", "vim.version.version1"], ["model", "string", "vim.version.version1"], ["uuid", "string", "vim.version.version1"], ["otherIdentifyingInfo", "vim.host.SystemIdentificationInfo[]", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.host.CpuPowerManagementInfo", "HostCpuPowerManagementInfo", "vmodl.DynamicData", "vim.version.version5", [["currentPolicy", "string", "vim.version.version5", {:optional => true}], ["hardwareSupport", "string", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.host.CpuPowerManagementInfo.PolicyType", "HostCpuPowerManagementInfoPolicyType", "vim.version.version5", ["off", "staticPolicy", "dynamicPolicy"])
    create_data_type("vim.host.CpuInfo", "HostCpuInfo", "vmodl.DynamicData", "vim.version.version1", [["numCpuPackages", "short", "vim.version.version1"], ["numCpuCores", "short", "vim.version.version1"], ["numCpuThreads", "short", "vim.version.version1"], ["hz", "long", "vim.version.version1"]])
    create_data_type("vim.host.CpuPackage", "HostCpuPackage", "vmodl.DynamicData", "vim.version.version1", [["index", "short", "vim.version.version1"], ["vendor", "string", "vim.version.version1"], ["hz", "long", "vim.version.version1"], ["busHz", "long", "vim.version.version1"], ["description", "string", "vim.version.version1"], ["threadId", "short[]", "vim.version.version1"], ["cpuFeature", "vim.host.CpuIdInfo[]", "vim.version.version1", {:optional => true}]])
    create_enum_type("vim.host.CpuPackage.Vendor", "HostCpuPackageVendor", "vim.version.version1", ["unknown", "intel", "amd"])
    create_data_type("vim.host.NumaInfo", "HostNumaInfo", "vmodl.DynamicData", "vim.version.version1", [["type", "string", "vim.version.version1"], ["numNodes", "int", "vim.version.version1"], ["numaNode", "vim.host.NumaNode[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.NumaNode", "HostNumaNode", "vmodl.DynamicData", "vim.version.version1", [["typeId", "byte", "vim.version.version1"], ["cpuID", "short[]", "vim.version.version1"], ["memoryRangeBegin", "long", "vim.version.version1"], ["memoryRangeLength", "long", "vim.version.version1"]])
    create_data_type("vim.host.BIOSInfo", "HostBIOSInfo", "vmodl.DynamicData", "vim.version.version2", [["biosVersion", "string", "vim.version.version2", {:optional => true}], ["releaseDate", "vmodl.DateTime", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.host.ReliableMemoryInfo", "HostReliableMemoryInfo", "vmodl.DynamicData", "vim.version.version9", [["memorySize", "long", "vim.version.version9"]])
    create_data_type("vim.host.HardwareStatusInfo", "HostHardwareStatusInfo", "vmodl.DynamicData", "vim.version.version2", [["memoryStatusInfo", "vim.host.HardwareStatusInfo.HardwareElementInfo[]", "vim.version.version2", {:optional => true}], ["cpuStatusInfo", "vim.host.HardwareStatusInfo.HardwareElementInfo[]", "vim.version.version2", {:optional => true}], ["storageStatusInfo", "vim.host.HardwareStatusInfo.StorageStatusInfo[]", "vim.version.version2", {:optional => true}]])
    create_enum_type("vim.host.HardwareStatusInfo.Status", "HostHardwareElementStatus", "vim.version.version2", ["Unknown", "Green", "Yellow", "Red"])
    create_data_type("vim.host.HardwareStatusInfo.HardwareElementInfo", "HostHardwareElementInfo", "vmodl.DynamicData", "vim.version.version2", [["name", "string", "vim.version.version2"], ["status", "vim.ElementDescription", "vim.version.version2"]])
    create_data_type("vim.host.HardwareStatusInfo.StorageStatusInfo", "HostStorageElementInfo", "vim.host.HardwareStatusInfo.HardwareElementInfo", "vim.version.version2", [["operationalInfo", "vim.host.HardwareStatusInfo.StorageStatusInfo.OperationalInfo[]", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.host.HardwareStatusInfo.StorageStatusInfo.OperationalInfo", "HostStorageOperationalInfo", "vmodl.DynamicData", "vim.version.version2", [["property", "string", "vim.version.version2"], ["value", "string", "vim.version.version2"]])
    create_managed_type("vim.host.HealthStatusSystem", "HostHealthStatusSystem", "vmodl.ManagedObject", "vim.version.version2", [["runtime", "vim.host.HealthStatusSystem.Runtime", "vim.version.version2", {}, nil]], [["refresh", "RefreshHealthStatusSystem", "vim.version.version2", [], [{}, "void", "void"], "System.Read", nil], ["resetSystemHealthInfo", "ResetSystemHealthInfo", "vim.version.version2", [], [{}, "void", "void"], "Host.Config.Settings", nil]])
    create_data_type("vim.host.HealthStatusSystem.Runtime", "HealthSystemRuntime", "vmodl.DynamicData", "vim.version.version2", [["systemHealthInfo", "vim.host.SystemHealthInfo", "vim.version.version2", {:optional => true}], ["hardwareStatusInfo", "vim.host.HardwareStatusInfo", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.host.HostBusAdapter", "HostHostBusAdapter", "vmodl.DynamicData", "vim.version.version1", [["key", "string", "vim.version.version1", {:optional => true}], ["device", "string", "vim.version.version1"], ["bus", "int", "vim.version.version1"], ["status", "string", "vim.version.version1"], ["model", "string", "vim.version.version1"], ["driver", "string", "vim.version.version1", {:optional => true}], ["pci", "string", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.ParallelScsiHba", "HostParallelScsiHba", "vim.host.HostBusAdapter", "vim.version.version1", nil)
    create_data_type("vim.host.BlockHba", "HostBlockHba", "vim.host.HostBusAdapter", "vim.version.version1", nil)
    create_data_type("vim.host.FibreChannelHba", "HostFibreChannelHba", "vim.host.HostBusAdapter", "vim.version.version1", [["portWorldWideName", "long", "vim.version.version1"], ["nodeWorldWideName", "long", "vim.version.version1"], ["portType", "vim.host.FibreChannelHba.PortType", "vim.version.version1"], ["speed", "long", "vim.version.version1"]])
    create_enum_type("vim.host.FibreChannelHba.PortType", "FibreChannelPortType", "vim.version.version1", ["fabric", "loop", "pointToPoint", "unknown"])
    create_data_type("vim.host.FibreChannelOverEthernetHba", "HostFibreChannelOverEthernetHba", "vim.host.FibreChannelHba", "vim.version.version7", [["underlyingNic", "string", "vim.version.version7"], ["linkInfo", "vim.host.FibreChannelOverEthernetHba.LinkInfo", "vim.version.version7"], ["isSoftwareFcoe", "boolean", "vim.version.version7"], ["markedForRemoval", "boolean", "vim.version.version7"]])
    create_data_type("vim.host.FibreChannelOverEthernetHba.LinkInfo", "HostFibreChannelOverEthernetHbaLinkInfo", "vmodl.DynamicData", "vim.version.version7", [["vnportMac", "string", "vim.version.version7"], ["fcfMac", "string", "vim.version.version7"], ["vlanId", "int", "vim.version.version7"]])
    create_data_type("vim.host.HostProxySwitch", "HostProxySwitch", "vmodl.DynamicData", "vim.version.version5", [["dvsUuid", "string", "vim.version.version5"], ["dvsName", "string", "vim.version.version5"], ["key", "string", "vim.version.version5"], ["numPorts", "int", "vim.version.version5"], ["configNumPorts", "int", "vim.version.version7", {:optional => true}], ["numPortsAvailable", "int", "vim.version.version5"], ["uplinkPort", "vim.KeyValue[]", "vim.version.version5", {:optional => true}], ["mtu", "int", "vim.version.version5", {:optional => true}], ["pnic", "vim.host.PhysicalNic[]", "vim.version.version5", {:link => true, :optional => true}], ["spec", "vim.host.HostProxySwitch.Specification", "vim.version.version5"], ["hostLag", "vim.host.HostProxySwitch.HostLagConfig[]", "vim.version.version9", {:optional => true}], ["networkReservationSupported", "boolean", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.host.HostProxySwitch.Specification", "HostProxySwitchSpec", "vmodl.DynamicData", "vim.version.version5", [["backing", "vim.dvs.HostMember.Backing", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.HostProxySwitch.Config", "HostProxySwitchConfig", "vmodl.DynamicData", "vim.version.version5", [["changeOperation", "string", "vim.version.version5", {:optional => true}], ["uuid", "string", "vim.version.version5"], ["spec", "vim.host.HostProxySwitch.Specification", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.HostProxySwitch.HostLagConfig", "HostProxySwitchHostLagConfig", "vmodl.DynamicData", "vim.version.version9", [["lagKey", "string", "vim.version.version9"], ["lagName", "string", "vim.version.version9", {:optional => true}], ["uplinkPort", "vim.KeyValue[]", "vim.version.version9", {:optional => true}]])
    create_managed_type("vim.host.ImageConfigManager", "HostImageConfigManager", "vmodl.ManagedObject", "vim.version.version7", nil, [["queryHostAcceptanceLevel", "HostImageConfigGetAcceptance", "vim.version.version7", [], [{}, "string", "string"], "System.Read", ["vim.fault.HostConfigFault"]], ["queryHostImageProfile", "HostImageConfigGetProfile", "vim.version.version7", [], [{}, "vim.host.ImageConfigManager.ImageProfileSummary", "vim.host.ImageConfigManager.ImageProfileSummary"], "System.Read", nil], ["updateAcceptanceLevel", "UpdateHostImageAcceptanceLevel", "vim.version.version7", [["newAcceptanceLevel", "string", "vim.version.version7", {}, nil]], [{}, "void", "void"], "Host.Config.Image", ["vim.fault.HostConfigFault"]]])
    create_enum_type("vim.host.ImageConfigManager.AcceptanceLevel", "HostImageAcceptanceLevel", "vim.version.version7", ["vmware_certified", "vmware_accepted", "partner", "community"])
    create_data_type("vim.host.ImageConfigManager.ImageProfileSummary", "HostImageProfileSummary", "vmodl.DynamicData", "vim.version.version7", [["name", "string", "vim.version.version7"], ["vendor", "string", "vim.version.version7"]])
    create_data_type("vim.host.IpConfig", "HostIpConfig", "vmodl.DynamicData", "vim.version.version1", [["dhcp", "boolean", "vim.version.version1"], ["ipAddress", "string", "vim.version.version1", {:optional => true}], ["subnetMask", "string", "vim.version.version1", {:optional => true}], ["ipV6Config", "vim.host.IpConfig.IpV6AddressConfiguration", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.host.IpConfig.IpV6AddressConfigType", "HostIpConfigIpV6AddressConfigType", "vim.version.version5", ["other", "manual", "dhcp", "linklayer", "random"])
    create_enum_type("vim.host.IpConfig.IpV6AddressStatus", "HostIpConfigIpV6AddressStatus", "vim.version.version5", ["preferred", "deprecated", "invalid", "inaccessible", "unknown", "tentative", "duplicate"])
    create_data_type("vim.host.IpConfig.IpV6Address", "HostIpConfigIpV6Address", "vmodl.DynamicData", "vim.version.version5", [["ipAddress", "string", "vim.version.version5"], ["prefixLength", "int", "vim.version.version5"], ["origin", "string", "vim.version.version5", {:optional => true}], ["dadState", "string", "vim.version.version5", {:optional => true}], ["lifetime", "vmodl.DateTime", "vim.version.version5", {:optional => true}], ["operation", "string", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.IpConfig.IpV6AddressConfiguration", "HostIpConfigIpV6AddressConfiguration", "vmodl.DynamicData", "vim.version.version5", [["ipV6Address", "vim.host.IpConfig.IpV6Address[]", "vim.version.version5", {:optional => true}], ["autoConfigurationEnabled", "boolean", "vim.version.version5", {:optional => true}], ["dhcpV6Enabled", "boolean", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.IpRouteConfig", "HostIpRouteConfig", "vmodl.DynamicData", "vim.version.version1", [["defaultGateway", "string", "vim.version.version1", {:optional => true}], ["gatewayDevice", "string", "vim.version.version1", {:optional => true}], ["ipV6DefaultGateway", "string", "vim.version.version5", {:optional => true}], ["ipV6GatewayDevice", "string", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.IpRouteConfigSpec", "HostIpRouteConfigSpec", "vim.host.IpRouteConfig", "vim.version.version5", [["gatewayDeviceConnection", "vim.host.VirtualNicConnection", "vim.version.version5", {:optional => true}], ["ipV6GatewayDeviceConnection", "vim.host.VirtualNicConnection", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.IpRouteEntry", "HostIpRouteEntry", "vmodl.DynamicData", "vim.version.version5", [["network", "string", "vim.version.version5"], ["prefixLength", "int", "vim.version.version5"], ["gateway", "string", "vim.version.version5"], ["deviceName", "string", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.host.IpRouteOp", "HostIpRouteOp", "vmodl.DynamicData", "vim.version.version5", [["changeOperation", "string", "vim.version.version5"], ["route", "vim.host.IpRouteEntry", "vim.version.version5"]])
    create_data_type("vim.host.IpRouteTableConfig", "HostIpRouteTableConfig", "vmodl.DynamicData", "vim.version.version5", [["ipRoute", "vim.host.IpRouteOp[]", "vim.version.version5", {:optional => true}], ["ipv6Route", "vim.host.IpRouteOp[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.IpRouteTableInfo", "HostIpRouteTableInfo", "vmodl.DynamicData", "vim.version.version5", [["ipRoute", "vim.host.IpRouteEntry[]", "vim.version.version5", {:optional => true}], ["ipv6Route", "vim.host.IpRouteEntry[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.IpmiInfo", "HostIpmiInfo", "vmodl.DynamicData", "vim.version.version5", [["bmcIpAddress", "string", "vim.version.version5", {:optional => true}], ["bmcMacAddress", "string", "vim.version.version5", {:optional => true}], ["login", "string", "vim.version.version5", {:optional => true}], ["password", "string", "vim.version.version5", {:optional => true}]])
    create_managed_type("vim.host.IscsiManager", "IscsiManager", "vmodl.ManagedObject", "vim.version.version7", nil, [["queryVnicStatus", "QueryVnicStatus", "vim.version.version7", [["vnicDevice", "string", "vim.version.version7", {}, nil]], [{}, "vim.host.IscsiManager.IscsiStatus", "vim.host.IscsiManager.IscsiStatus"], "Host.Config.Storage", ["vim.fault.IscsiFault"]], ["queryPnicStatus", "QueryPnicStatus", "vim.version.version7", [["pnicDevice", "string", "vim.version.version7", {}, nil]], [{}, "vim.host.IscsiManager.IscsiStatus", "vim.host.IscsiManager.IscsiStatus"], "Host.Config.Storage", ["vim.fault.IscsiFault"]], ["queryBoundVnics", "QueryBoundVnics", "vim.version.version7", [["iScsiHbaName", "string", "vim.version.version7", {}, nil]], [{:optional => true}, "vim.host.IscsiManager.IscsiPortInfo[]", "vim.host.IscsiManager.IscsiPortInfo[]"], "Host.Config.Storage", ["vim.fault.IscsiFault", "vim.fault.NotFound"]], ["queryCandidateNics", "QueryCandidateNics", "vim.version.version7", [["iScsiHbaName", "string", "vim.version.version7", {}, nil]], [{:optional => true}, "vim.host.IscsiManager.IscsiPortInfo[]", "vim.host.IscsiManager.IscsiPortInfo[]"], "Host.Config.Storage", ["vim.fault.IscsiFault", "vim.fault.NotFound"]], ["bindVnic", "BindVnic", "vim.version.version7", [["iScsiHbaName", "string", "vim.version.version7", {}, nil], ["vnicDevice", "string", "vim.version.version7", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.IscsiFaultVnicAlreadyBound", "vim.fault.IscsiFaultVnicHasNoUplinks", "vim.fault.IscsiFaultVnicHasMultipleUplinks", "vim.fault.IscsiFaultVnicHasWrongUplink", "vim.fault.IscsiFaultVnicNotFound", "vim.fault.IscsiFaultInvalidVnic", "vim.fault.PlatformConfigFault", "vim.fault.IscsiFault", "vim.fault.NotFound"]], ["unbindVnic", "UnbindVnic", "vim.version.version7", [["iScsiHbaName", "string", "vim.version.version7", {}, nil], ["vnicDevice", "string", "vim.version.version7", {}, nil], ["force", "boolean", "vim.version.version7", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.IscsiFaultVnicNotBound", "vim.fault.IscsiFaultVnicHasActivePaths", "vim.fault.IscsiFaultVnicIsLastPath", "vim.fault.PlatformConfigFault", "vim.fault.IscsiFault", "vim.fault.NotFound"]], ["queryMigrationDependencies", "QueryMigrationDependencies", "vim.version.version7", [["pnicDevice", "string[]", "vim.version.version7", {}, nil]], [{}, "vim.host.IscsiManager.IscsiMigrationDependency", "vim.host.IscsiManager.IscsiMigrationDependency"], "Host.Config.Storage", nil]])
    create_data_type("vim.host.IscsiManager.IscsiStatus", "IscsiStatus", "vmodl.DynamicData", "vim.version.version7", [["reason", "vmodl.MethodFault[]", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.host.IscsiManager.IscsiPortInfo", "IscsiPortInfo", "vmodl.DynamicData", "vim.version.version7", [["vnicDevice", "string", "vim.version.version7", {:optional => true}], ["vnic", "vim.host.VirtualNic", "vim.version.version7", {:optional => true}], ["pnicDevice", "string", "vim.version.version7", {:optional => true}], ["pnic", "vim.host.PhysicalNic", "vim.version.version7", {:optional => true}], ["switchName", "string", "vim.version.version7", {:optional => true}], ["switchUuid", "string", "vim.version.version7", {:optional => true}], ["portgroupName", "string", "vim.version.version7", {:optional => true}], ["portgroupKey", "string", "vim.version.version7", {:optional => true}], ["portKey", "string", "vim.version.version7", {:optional => true}], ["complianceStatus", "vim.host.IscsiManager.IscsiStatus", "vim.version.version7", {:optional => true}], ["pathStatus", "string", "vim.version.version7", {:optional => true}]])
    create_enum_type("vim.host.IscsiManager.IscsiPortInfo.PathStatus", "IscsiPortInfoPathStatus", "vim.version.version7", ["notUsed", "active", "standBy", "lastActive"])
    create_data_type("vim.host.IscsiManager.IscsiDependencyEntity", "IscsiDependencyEntity", "vmodl.DynamicData", "vim.version.version7", [["pnicDevice", "string", "vim.version.version7"], ["vnicDevice", "string", "vim.version.version7"], ["vmhbaName", "string", "vim.version.version7"]])
    create_data_type("vim.host.IscsiManager.IscsiMigrationDependency", "IscsiMigrationDependency", "vmodl.DynamicData", "vim.version.version7", [["migrationAllowed", "boolean", "vim.version.version7"], ["disallowReason", "vim.host.IscsiManager.IscsiStatus", "vim.version.version7", {:optional => true}], ["dependency", "vim.host.IscsiManager.IscsiDependencyEntity[]", "vim.version.version7", {:optional => true}]])
    create_managed_type("vim.host.KernelModuleSystem", "HostKernelModuleSystem", "vmodl.ManagedObject", "vim.version.version3", nil, [["queryModules", "QueryModules", "vim.version.version5", [], [{:optional => true}, "vim.host.KernelModuleSystem.ModuleInfo[]", "vim.host.KernelModuleSystem.ModuleInfo[]"], "Host.Config.Settings", nil], ["updateModuleOptionString", "UpdateModuleOptionString", "vim.version.version3", [["name", "string", "vim.version.version3", {}, nil], ["options", "string", "vim.version.version3", {}, nil]], [{}, "void", "void"], "Host.Config.Settings", ["vim.fault.NotFound"]], ["queryConfiguredModuleOptionString", "QueryConfiguredModuleOptionString", "vim.version.version3", [["name", "string", "vim.version.version3", {}, nil]], [{}, "string", "string"], "Host.Config.Settings", ["vim.fault.NotFound"]]])
    create_data_type("vim.host.KernelModuleSystem.ModuleInfo", "KernelModuleInfo", "vmodl.DynamicData", "vim.version.version5", [["id", "int", "vim.version.version5"], ["name", "string", "vim.version.version5"], ["version", "string", "vim.version.version5"], ["filename", "string", "vim.version.version5"], ["optionString", "string", "vim.version.version5"], ["loaded", "boolean", "vim.version.version5"], ["enabled", "boolean", "vim.version.version5"], ["useCount", "int", "vim.version.version5"], ["readOnlySection", "vim.host.KernelModuleSystem.ModuleInfo.SectionInfo", "vim.version.version5"], ["writableSection", "vim.host.KernelModuleSystem.ModuleInfo.SectionInfo", "vim.version.version5"], ["textSection", "vim.host.KernelModuleSystem.ModuleInfo.SectionInfo", "vim.version.version5"], ["dataSection", "vim.host.KernelModuleSystem.ModuleInfo.SectionInfo", "vim.version.version5"], ["bssSection", "vim.host.KernelModuleSystem.ModuleInfo.SectionInfo", "vim.version.version5"]])
    create_data_type("vim.host.KernelModuleSystem.ModuleInfo.SectionInfo", "KernelModuleSectionInfo", "vmodl.DynamicData", "vim.version.version5", [["address", "long", "vim.version.version5"], ["length", "int", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.LicenseSpec", "HostLicenseSpec", "vmodl.DynamicData", "vim.version.version5", [["source", "vim.LicenseManager.LicenseSource", "vim.version.version5", {:optional => true}], ["editionKey", "string", "vim.version.version5", {:optional => true}], ["disabledFeatureKey", "string[]", "vim.version.version5", {:optional => true}], ["enabledFeatureKey", "string[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.LinkDiscoveryProtocolConfig", "LinkDiscoveryProtocolConfig", "vmodl.DynamicData", "vim.version.version5", [["protocol", "string", "vim.version.version5"], ["operation", "string", "vim.version.version5"]])
    create_enum_type("vim.host.LinkDiscoveryProtocolConfig.ProtocolType", "LinkDiscoveryProtocolConfigProtocolType", "vim.version.version5", ["cdp", "lldp"])
    create_enum_type("vim.host.LinkDiscoveryProtocolConfig.OperationType", "LinkDiscoveryProtocolConfigOperationType", "vim.version.version5", ["none", "listen", "advertise", "both"])
    create_managed_type("vim.host.LocalAccountManager", "HostLocalAccountManager", "vmodl.ManagedObject", "vim.version.version1", nil, [["createUser", "CreateUser", "vim.version.version1", [["user", "vim.host.LocalAccountManager.AccountSpecification", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Local.ManageUserGroups", ["vim.fault.AlreadyExists"]], ["updateUser", "UpdateUser", "vim.version.version1", [["user", "vim.host.LocalAccountManager.AccountSpecification", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Local.ManageUserGroups", ["vim.fault.UserNotFound", "vim.fault.AlreadyExists"]], ["createGroup", "CreateGroup", "vim.version.version1", [["group", "vim.host.LocalAccountManager.AccountSpecification", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Local.ManageUserGroups", ["vim.fault.AlreadyExists"]], ["removeUser", "RemoveUser", "vim.version.version1", [["userName", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Local.ManageUserGroups", ["vim.fault.UserNotFound"]], ["removeGroup", "RemoveGroup", "vim.version.version1", [["groupName", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Local.ManageUserGroups", ["vim.fault.UserNotFound"]], ["assignUserToGroup", "AssignUserToGroup", "vim.version.version1", [["user", "string", "vim.version.version1", {}, nil], ["group", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Local.ManageUserGroups", ["vim.fault.UserNotFound", "vim.fault.AlreadyExists"]], ["unassignUserFromGroup", "UnassignUserFromGroup", "vim.version.version1", [["user", "string", "vim.version.version1", {}, nil], ["group", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Local.ManageUserGroups", ["vim.fault.UserNotFound"]]])
    create_data_type("vim.host.LocalAccountManager.AccountSpecification", "HostAccountSpec", "vmodl.DynamicData", "vim.version.version1", [["id", "string", "vim.version.version1"], ["password", "string", "vim.version.version1", {:optional => true}], ["description", "string", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.LocalAccountManager.PosixAccountSpecification", "HostPosixAccountSpec", "vim.host.LocalAccountManager.AccountSpecification", "vim.version.version1", [["posixId", "int", "vim.version.version1", {:optional => true}], ["shellAccess", "boolean", "vim.version.version1", {:optional => true}]])
    create_managed_type("vim.host.LocalAuthentication", "HostLocalAuthentication", "vim.host.AuthenticationStore", "vim.version.version6", nil, nil)
    create_data_type("vim.host.LocalAuthenticationInfo", "HostLocalAuthenticationInfo", "vim.host.AuthenticationStoreInfo", "vim.version.version6", nil)
    create_data_type("vim.host.LowLevelProvisioningManager.VmRecoveryInfo", "HostLowLevelProvisioningManagerVmRecoveryInfo", "vmodl.DynamicData", "vim.version.version8", [["version", "string", "vim.version.version8"], ["biosUUID", "string", "vim.version.version8"], ["instanceUUID", "string", "vim.version.version8"], ["ftInfo", "vim.vm.FaultToleranceConfigInfo", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.host.LowLevelProvisioningManager.VmMigrationStatus", "HostLowLevelProvisioningManagerVmMigrationStatus", "vmodl.DynamicData", "vim.version.version8", [["migrationId", "long", "vim.version.version8"], ["type", "string", "vim.version.version8"], ["source", "boolean", "vim.version.version8"], ["consideredSuccessful", "boolean", "vim.version.version8"]])
    create_enum_type("vim.host.LowLevelProvisioningManager.ReloadTarget", "HostLowLevelProvisioningManagerReloadTarget", "vim.version.version5", ["currentConfig", "snapshotConfig"])
    create_data_type("vim.host.LowLevelProvisioningManager.DiskLayoutSpec", "HostLowLevelProvisioningManagerDiskLayoutSpec", "vmodl.DynamicData", "vim.version.version7", [["controllerType", "vmodl.TypeName", "vim.version.version7"], ["busNumber", "int", "vim.version.version7"], ["unitNumber", "int", "vim.version.version7"], ["srcFilename", "string", "vim.version.version7"], ["dstFilename", "string", "vim.version.version7"]])
    create_data_type("vim.host.LowLevelProvisioningManager.SnapshotLayoutSpec", "HostLowLevelProvisioningManagerSnapshotLayoutSpec", "vmodl.DynamicData", "vim.version.version7", [["id", "int", "vim.version.version7"], ["srcFilename", "string", "vim.version.version7"], ["dstFilename", "string", "vim.version.version7"], ["disk", "vim.host.LowLevelProvisioningManager.DiskLayoutSpec[]", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.host.MaintenanceSpec", "HostMaintenanceSpec", "vmodl.DynamicData", "vim.version.version9", [["vsanMode", "vim.vsan.host.DecommissionMode", "vim.version.version9", {:optional => true}]])
    create_managed_type("vim.host.MemoryManagerSystem", "HostMemorySystem", "vim.ExtensibleManagedObject", "vim.version.version1", [["consoleReservationInfo", "vim.host.MemoryManagerSystem.ServiceConsoleReservationInfo", "vim.version.version1", {:optional => true}, nil], ["virtualMachineReservationInfo", "vim.host.MemoryManagerSystem.VirtualMachineReservationInfo", "vim.version.version2", {:optional => true}, nil]], [["reconfigureServiceConsoleReservation", "ReconfigureServiceConsoleReservation", "vim.version.version1", [["cfgBytes", "long", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.Memory", nil], ["reconfigureVirtualMachineReservation", "ReconfigureVirtualMachineReservation", "vim.version.version2", [["spec", "vim.host.MemoryManagerSystem.VirtualMachineReservationSpec", "vim.version.version2", {}, nil]], [{}, "void", "void"], "Host.Config.Memory", nil]])
    create_data_type("vim.host.MemoryManagerSystem.ServiceConsoleReservationInfo", "ServiceConsoleReservationInfo", "vmodl.DynamicData", "vim.version.version1", [["serviceConsoleReservedCfg", "long", "vim.version.version1"], ["serviceConsoleReserved", "long", "vim.version.version1"], ["unreserved", "long", "vim.version.version1"]])
    create_data_type("vim.host.MemoryManagerSystem.VirtualMachineReservationInfo", "VirtualMachineMemoryReservationInfo", "vmodl.DynamicData", "vim.version.version2", [["virtualMachineMin", "long", "vim.version.version2"], ["virtualMachineMax", "long", "vim.version.version2"], ["virtualMachineReserved", "long", "vim.version.version2"], ["allocationPolicy", "string", "vim.version.version2"]])
    create_enum_type("vim.host.MemoryManagerSystem.VirtualMachineReservationInfo.AllocationPolicy", "VirtualMachineMemoryAllocationPolicy", "vim.version.version2", ["swapNone", "swapSome", "swapMost"])
    create_data_type("vim.host.MemoryManagerSystem.VirtualMachineReservationSpec", "VirtualMachineMemoryReservationSpec", "vmodl.DynamicData", "vim.version.version2", [["virtualMachineReserved", "long", "vim.version.version2", {:optional => true}], ["allocationPolicy", "string", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.host.MemorySpec", "HostMemorySpec", "vmodl.DynamicData", "vim.version.version5", [["serviceConsoleReservation", "long", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.MountInfo", "HostMountInfo", "vmodl.DynamicData", "vim.version.version1", [["path", "string", "vim.version.version1", {:optional => true}], ["accessMode", "string", "vim.version.version1"], ["mounted", "boolean", "vim.version.version7", {:optional => true}], ["accessible", "boolean", "vim.version.version2", {:optional => true}], ["inaccessibleReason", "string", "vim.version.version8", {:optional => true}]])
    create_enum_type("vim.host.MountInfo.AccessMode", "HostMountMode", "vim.version.version1", ["readWrite", "readOnly"])
    create_enum_type("vim.host.MountInfo.InaccessibleReason", "HostMountInfoInaccessibleReason", "vim.version.version8", ["AllPathsDown_Start", "AllPathsDown_Timeout", "PermanentDeviceLoss"])
    create_data_type("vim.host.MultipathInfo", "HostMultipathInfo", "vmodl.DynamicData", "vim.version.version1", [["lun", "vim.host.MultipathInfo.LogicalUnit[]", "vim.version.version1", {:linkable => true, :optional => true}]])
    create_enum_type("vim.host.MultipathInfo.PathState", "MultipathState", "vim.version.version1", ["standby", "active", "disabled", "dead", "unknown"])
    create_data_type("vim.host.MultipathInfo.LogicalUnitPolicy", "HostMultipathInfoLogicalUnitPolicy", "vmodl.DynamicData", "vim.version.version1", [["policy", "string", "vim.version.version1"]])
    create_data_type("vim.host.MultipathInfo.LogicalUnitStorageArrayTypePolicy", "HostMultipathInfoLogicalUnitStorageArrayTypePolicy", "vmodl.DynamicData", "vim.version.version5", [["policy", "string", "vim.version.version5"]])
    create_data_type("vim.host.MultipathInfo.FixedLogicalUnitPolicy", "HostMultipathInfoFixedLogicalUnitPolicy", "vim.host.MultipathInfo.LogicalUnitPolicy", "vim.version.version1", [["prefer", "string", "vim.version.version1"]])
    create_data_type("vim.host.MultipathInfo.LogicalUnit", "HostMultipathInfoLogicalUnit", "vmodl.DynamicData", "vim.version.version1", [["key", "string", "vim.version.version1"], ["id", "string", "vim.version.version1"], ["lun", "vim.host.ScsiLun", "vim.version.version1", {:link => true}], ["path", "vim.host.MultipathInfo.Path[]", "vim.version.version1"], ["policy", "vim.host.MultipathInfo.LogicalUnitPolicy", "vim.version.version1"], ["storageArrayTypePolicy", "vim.host.MultipathInfo.LogicalUnitStorageArrayTypePolicy", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.MultipathInfo.Path", "HostMultipathInfoPath", "vmodl.DynamicData", "vim.version.version1", [["key", "string", "vim.version.version1"], ["name", "string", "vim.version.version1"], ["pathState", "string", "vim.version.version1"], ["state", "string", "vim.version.version5", {:optional => true}], ["isWorkingPath", "boolean", "vim.version.version5", {:optional => true}], ["adapter", "vim.host.HostBusAdapter", "vim.version.version1", {:link => true}], ["lun", "vim.host.MultipathInfo.LogicalUnit", "vim.version.version1", {:link => true}], ["transport", "vim.host.TargetTransport", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.MultipathStateInfo", "HostMultipathStateInfo", "vmodl.DynamicData", "vim.version.version5", [["path", "vim.host.MultipathStateInfo.Path[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.MultipathStateInfo.Path", "HostMultipathStateInfoPath", "vmodl.DynamicData", "vim.version.version5", [["name", "string", "vim.version.version5"], ["pathState", "string", "vim.version.version5"]])
    create_data_type("vim.host.NatService", "HostNatService", "vmodl.DynamicData", "vim.version.version2", [["key", "string", "vim.version.version2"], ["spec", "vim.host.NatService.Specification", "vim.version.version2"]])
    create_data_type("vim.host.NatService.PortForwardSpecification", "HostNatServicePortForwardSpec", "vmodl.DynamicData", "vim.version.version2", [["type", "string", "vim.version.version2"], ["name", "string", "vim.version.version2"], ["hostPort", "int", "vim.version.version2"], ["guestPort", "int", "vim.version.version2"], ["guestIpAddress", "string", "vim.version.version2"]])
    create_data_type("vim.host.NatService.NameServiceSpec", "HostNatServiceNameServiceSpec", "vmodl.DynamicData", "vim.version.version2", [["dnsAutoDetect", "boolean", "vim.version.version2"], ["dnsPolicy", "string", "vim.version.version2"], ["dnsRetries", "int", "vim.version.version2"], ["dnsTimeout", "int", "vim.version.version2"], ["dnsNameServer", "string[]", "vim.version.version2", {:optional => true}], ["nbdsTimeout", "int", "vim.version.version2"], ["nbnsRetries", "int", "vim.version.version2"], ["nbnsTimeout", "int", "vim.version.version2"]])
    create_data_type("vim.host.NatService.Specification", "HostNatServiceSpec", "vmodl.DynamicData", "vim.version.version2", [["virtualSwitch", "string", "vim.version.version2"], ["activeFtp", "boolean", "vim.version.version2"], ["allowAnyOui", "boolean", "vim.version.version2"], ["configPort", "boolean", "vim.version.version2"], ["ipGatewayAddress", "string", "vim.version.version2"], ["udpTimeout", "int", "vim.version.version2"], ["portForward", "vim.host.NatService.PortForwardSpecification[]", "vim.version.version2", {:optional => true}], ["nameService", "vim.host.NatService.NameServiceSpec", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.host.NatService.Config", "HostNatServiceConfig", "vmodl.DynamicData", "vim.version.version2", [["changeOperation", "string", "vim.version.version2", {:optional => true}], ["key", "string", "vim.version.version2"], ["spec", "vim.host.NatService.Specification", "vim.version.version2"]])
    create_data_type("vim.host.NetCapabilities", "HostNetCapabilities", "vmodl.DynamicData", "vim.version.version1", [["canSetPhysicalNicLinkSpeed", "boolean", "vim.version.version1"], ["supportsNicTeaming", "boolean", "vim.version.version1"], ["nicTeamingPolicy", "string[]", "vim.version.version1", {:optional => true}], ["supportsVlan", "boolean", "vim.version.version1"], ["usesServiceConsoleNic", "boolean", "vim.version.version1"], ["supportsNetworkHints", "boolean", "vim.version.version1"], ["maxPortGroupsPerVswitch", "int", "vim.version.version2", {:optional => true}], ["vswitchConfigSupported", "boolean", "vim.version.version2"], ["vnicConfigSupported", "boolean", "vim.version.version2"], ["ipRouteConfigSupported", "boolean", "vim.version.version2"], ["dnsConfigSupported", "boolean", "vim.version.version2"], ["dhcpOnVnicSupported", "boolean", "vim.version.version2"], ["ipV6Supported", "boolean", "vim.version.version5"]])
    create_data_type("vim.host.NetOffloadCapabilities", "HostNetOffloadCapabilities", "vmodl.DynamicData", "vim.version.version1", [["csumOffload", "boolean", "vim.version.version1", {:optional => true}], ["tcpSegmentation", "boolean", "vim.version.version1", {:optional => true}], ["zeroCopyXmit", "boolean", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.NetStackInstance", "HostNetStackInstance", "vmodl.DynamicData", "vim.version.version9", [["key", "string", "vim.version.version9", {:optional => true}], ["name", "string", "vim.version.version9", {:optional => true}], ["dnsConfig", "vim.host.DnsConfig", "vim.version.version9", {:optional => true}], ["ipRouteConfig", "vim.host.IpRouteConfig", "vim.version.version9", {:optional => true}], ["requestedMaxNumberOfConnections", "int", "vim.version.version9", {:optional => true}], ["congestionControlAlgorithm", "string", "vim.version.version9", {:optional => true}], ["ipV6Enabled", "boolean", "vim.version.version9", {:optional => true}], ["routeTableConfig", "vim.host.IpRouteTableConfig", "vim.version.version9", {:optional => true}]])
    create_enum_type("vim.host.NetStackInstance.SystemStackKey", "HostNetStackInstanceSystemStackKey", "vim.version.version9", ["defaultTcpipStack"])
    create_enum_type("vim.host.NetStackInstance.CongestionControlAlgorithmType", "HostNetStackInstanceCongestionControlAlgorithmType", "vim.version.version9", ["newreno", "cubic"])
    create_data_type("vim.host.NetworkInfo", "HostNetworkInfo", "vmodl.DynamicData", "vim.version.version1", [["vswitch", "vim.host.VirtualSwitch[]", "vim.version.version1", {:linkable => true, :optional => true}], ["proxySwitch", "vim.host.HostProxySwitch[]", "vim.version.version5", {:optional => true}], ["portgroup", "vim.host.PortGroup[]", "vim.version.version1", {:linkable => true, :optional => true}], ["pnic", "vim.host.PhysicalNic[]", "vim.version.version1", {:linkable => true, :optional => true}], ["vnic", "vim.host.VirtualNic[]", "vim.version.version1", {:optional => true}], ["consoleVnic", "vim.host.VirtualNic[]", "vim.version.version1", {:optional => true}], ["dnsConfig", "vim.host.DnsConfig", "vim.version.version1", {:optional => true}], ["ipRouteConfig", "vim.host.IpRouteConfig", "vim.version.version1", {:optional => true}], ["consoleIpRouteConfig", "vim.host.IpRouteConfig", "vim.version.version1", {:optional => true}], ["routeTableInfo", "vim.host.IpRouteTableInfo", "vim.version.version5", {:optional => true}], ["dhcp", "vim.host.DhcpService[]", "vim.version.version2", {:optional => true}], ["nat", "vim.host.NatService[]", "vim.version.version2", {:optional => true}], ["ipV6Enabled", "boolean", "vim.version.version5", {:optional => true}], ["atBootIpV6Enabled", "boolean", "vim.version.version6", {:optional => true}], ["netStackInstance", "vim.host.NetStackInstance[]", "vim.version.version9", {:optional => true}], ["opaqueSwitch", "vim.host.OpaqueSwitch[]", "vim.version.version9", {:optional => true}], ["opaqueNetwork", "vim.host.OpaqueNetworkInfo[]", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.host.NetworkPolicy", "HostNetworkPolicy", "vmodl.DynamicData", "vim.version.version1", [["security", "vim.host.NetworkPolicy.SecurityPolicy", "vim.version.version1", {:optional => true}], ["nicTeaming", "vim.host.NetworkPolicy.NicTeamingPolicy", "vim.version.version1", {:optional => true}], ["offloadPolicy", "vim.host.NetOffloadCapabilities", "vim.version.version1", {:optional => true}], ["shapingPolicy", "vim.host.NetworkPolicy.TrafficShapingPolicy", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.NetworkPolicy.SecurityPolicy", "HostNetworkSecurityPolicy", "vmodl.DynamicData", "vim.version.version1", [["allowPromiscuous", "boolean", "vim.version.version1", {:optional => true}], ["macChanges", "boolean", "vim.version.version1", {:optional => true}], ["forgedTransmits", "boolean", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.NetworkPolicy.TrafficShapingPolicy", "HostNetworkTrafficShapingPolicy", "vmodl.DynamicData", "vim.version.version1", [["enabled", "boolean", "vim.version.version1", {:optional => true}], ["averageBandwidth", "long", "vim.version.version1", {:optional => true}], ["peakBandwidth", "long", "vim.version.version1", {:optional => true}], ["burstSize", "long", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.NetworkPolicy.NicFailureCriteria", "HostNicFailureCriteria", "vmodl.DynamicData", "vim.version.version1", [["checkSpeed", "string", "vim.version.version1", {:optional => true}], ["speed", "int", "vim.version.version1", {:optional => true}], ["checkDuplex", "boolean", "vim.version.version1", {:optional => true}], ["fullDuplex", "boolean", "vim.version.version1", {:optional => true}], ["checkErrorPercent", "boolean", "vim.version.version1", {:optional => true}], ["percentage", "int", "vim.version.version1", {:optional => true}], ["checkBeacon", "boolean", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.NetworkPolicy.NicOrderPolicy", "HostNicOrderPolicy", "vmodl.DynamicData", "vim.version.version1", [["activeNic", "string[]", "vim.version.version1", {:optional => true}], ["standbyNic", "string[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.NetworkPolicy.NicTeamingPolicy", "HostNicTeamingPolicy", "vmodl.DynamicData", "vim.version.version1", [["policy", "string", "vim.version.version1", {:optional => true}], ["reversePolicy", "boolean", "vim.version.version1", {:optional => true}], ["notifySwitches", "boolean", "vim.version.version1", {:optional => true}], ["rollingOrder", "boolean", "vim.version.version1", {:optional => true}], ["failureCriteria", "vim.host.NetworkPolicy.NicFailureCriteria", "vim.version.version1", {:optional => true}], ["nicOrder", "vim.host.NetworkPolicy.NicOrderPolicy", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.NtpConfig", "HostNtpConfig", "vmodl.DynamicData", "vim.version.version2", [["server", "string[]", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.host.NumericSensorInfo", "HostNumericSensorInfo", "vmodl.DynamicData", "vim.version.version2", [["name", "string", "vim.version.version2"], ["healthState", "vim.ElementDescription", "vim.version.version2", {:optional => true}], ["currentReading", "long", "vim.version.version2"], ["unitModifier", "int", "vim.version.version2"], ["baseUnits", "string", "vim.version.version2"], ["rateUnits", "string", "vim.version.version2", {:optional => true}], ["sensorType", "string", "vim.version.version2"]])
    create_enum_type("vim.host.NumericSensorInfo.HealthState", "HostNumericSensorHealthState", "vim.version.version2", ["unknown", "green", "yellow", "red"])
    create_enum_type("vim.host.NumericSensorInfo.SensorType", "HostNumericSensorType", "vim.version.version2", ["fan", "power", "temperature", "voltage", "other"])
    create_data_type("vim.host.OpaqueNetworkInfo", "HostOpaqueNetworkInfo", "vmodl.DynamicData", "vim.version.version9", [["opaqueNetworkId", "string", "vim.version.version9"], ["opaqueNetworkName", "string", "vim.version.version9"], ["opaqueNetworkType", "string", "vim.version.version9"]])
    create_data_type("vim.host.OpaqueSwitch", "HostOpaqueSwitch", "vmodl.DynamicData", "vim.version.version9", [["key", "string", "vim.version.version9"], ["name", "string", "vim.version.version9", {:optional => true}], ["pnic", "vim.host.PhysicalNic[]", "vim.version.version9", {:link => true, :optional => true}]])
    create_managed_type("vim.host.PatchManager", "HostPatchManager", "vmodl.ManagedObject", "vim.version.version1", nil, [["Check", "CheckHostPatch_Task", "vim.version.version5", [["metaUrls", "string[]", "vim.version.version5", {:optional => true}, nil], ["bundleUrls", "string[]", "vim.version.version5", {:optional => true}, nil], ["spec", "vim.host.PatchManager.PatchManagerOperationSpec", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.Task", "vim.host.PatchManager.Result"], "System.Read", ["vmodl.fault.RequestCanceled", "vim.fault.InvalidState", "vim.fault.TaskInProgress", "vim.fault.PlatformConfigFault"]], ["Scan", "ScanHostPatch_Task", "vim.version.version1", [["repository", "vim.host.PatchManager.Locator", "vim.version.version1", {}, nil], ["updateID", "string[]", "vim.version.version1", {:optional => true}, nil]], [{:optional => true}, "vim.Task", "vim.host.PatchManager.Status[]"], "System.Read", ["vmodl.fault.RequestCanceled", "vim.fault.PatchMetadataInvalid", "vim.fault.PlatformConfigFault"]], ["ScanV2", "ScanHostPatchV2_Task", "vim.version.version5", [["metaUrls", "string[]", "vim.version.version5", {:optional => true}, nil], ["bundleUrls", "string[]", "vim.version.version5", {:optional => true}, nil], ["spec", "vim.host.PatchManager.PatchManagerOperationSpec", "vim.version.version5", {:optional => true}, nil]], [{:optional => true}, "vim.Task", "vim.host.PatchManager.Result"], "System.Read", ["vmodl.fault.RequestCanceled", "vim.fault.InvalidState", "vim.fault.TaskInProgress", "vim.fault.PlatformConfigFault"]], ["Stage", "StageHostPatch_Task", "vim.version.version5", [["metaUrls", "string[]", "vim.version.version5", {:optional => true}, nil], ["bundleUrls", "string[]", "vim.version.version5", {:optional => true}, nil], ["vibUrls", "string[]", "vim.version.version5", {:optional => true}, nil], ["spec", "vim.host.PatchManager.PatchManagerOperationSpec", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.Task", "vim.host.PatchManager.Result"], "Host.Config.Patch", ["vmodl.fault.RequestCanceled", "vim.fault.InvalidState", "vim.fault.TaskInProgress", "vim.fault.PlatformConfigFault"]], ["Install", "InstallHostPatch_Task", "vim.version.version1", [["repository", "vim.host.PatchManager.Locator", "vim.version.version1", {}, nil], ["updateID", "string", "vim.version.version1", {}, nil], ["force", "boolean", "vim.version.version1", {:optional => true}, nil]], [{}, "vim.Task", "void"], "Host.Config.Patch", ["vim.fault.PatchMetadataInvalid", "vim.fault.PatchBinariesNotFound", "vim.fault.PatchNotApplicable", "vim.fault.NoDiskSpace", "vim.fault.PatchInstallFailed", "vim.fault.RebootRequired", "vim.fault.InvalidState", "vim.fault.TaskInProgress"]], ["InstallV2", "InstallHostPatchV2_Task", "vim.version.version5", [["metaUrls", "string[]", "vim.version.version5", {:optional => true}, nil], ["bundleUrls", "string[]", "vim.version.version5", {:optional => true}, nil], ["vibUrls", "string[]", "vim.version.version5", {:optional => true}, nil], ["spec", "vim.host.PatchManager.PatchManagerOperationSpec", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.Task", "vim.host.PatchManager.Result"], "Host.Config.Patch", ["vmodl.fault.RequestCanceled", "vim.fault.InvalidState", "vim.fault.TaskInProgress", "vim.fault.PlatformConfigFault"]], ["Uninstall", "UninstallHostPatch_Task", "vim.version.version5", [["bulletinIds", "string[]", "vim.version.version5", {:optional => true}, nil], ["spec", "vim.host.PatchManager.PatchManagerOperationSpec", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.Task", "vim.host.PatchManager.Result"], "Host.Config.Patch", ["vim.fault.InvalidState", "vim.fault.TaskInProgress", "vim.fault.PlatformConfigFault"]], ["Query", "QueryHostPatch_Task", "vim.version.version5", [["spec", "vim.host.PatchManager.PatchManagerOperationSpec", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.Task", "vim.host.PatchManager.Result"], "System.Read", ["vmodl.fault.RequestCanceled", "vim.fault.InvalidState", "vim.fault.TaskInProgress", "vim.fault.PlatformConfigFault"]]])
    create_data_type("vim.host.PatchManager.Result", "HostPatchManagerResult", "vmodl.DynamicData", "vim.version.version5", [["version", "string", "vim.version.version5"], ["status", "vim.host.PatchManager.Status[]", "vim.version.version5", {:optional => true}], ["xmlResult", "string", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.PatchManager.Status", "HostPatchManagerStatus", "vmodl.DynamicData", "vim.version.version1", [["id", "string", "vim.version.version1"], ["applicable", "boolean", "vim.version.version1"], ["reason", "string[]", "vim.version.version1", {:optional => true}], ["integrity", "string", "vim.version.version1", {:optional => true}], ["installed", "boolean", "vim.version.version1"], ["installState", "string[]", "vim.version.version1", {:optional => true}], ["prerequisitePatch", "vim.host.PatchManager.Status.PrerequisitePatch[]", "vim.version.version1", {:optional => true}], ["restartRequired", "boolean", "vim.version.version1"], ["reconnectRequired", "boolean", "vim.version.version1"], ["vmOffRequired", "boolean", "vim.version.version1"], ["supersededPatchIds", "string[]", "vim.version.version1", {:optional => true}]])
    create_enum_type("vim.host.PatchManager.Status.Reason", "HostPatchManagerReason", "vim.version.version1", ["obsoleted", "missingPatch", "missingLib", "hasDependentPatch", "conflictPatch", "conflictLib"])
    create_enum_type("vim.host.PatchManager.Status.Integrity", "HostPatchManagerIntegrityStatus", "vim.version.version1", ["validated", "keyNotFound", "keyRevoked", "keyExpired", "digestMismatch", "notEnoughSignatures", "validationError"])
    create_enum_type("vim.host.PatchManager.Status.InstallState", "HostPatchManagerInstallState", "vim.version.version1", ["hostRestarted", "imageActive"])
    create_data_type("vim.host.PatchManager.Status.PrerequisitePatch", "HostPatchManagerStatusPrerequisitePatch", "vmodl.DynamicData", "vim.version.version1", [["id", "string", "vim.version.version1"], ["installState", "string[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.PatchManager.Locator", "HostPatchManagerLocator", "vmodl.DynamicData", "vim.version.version1", [["url", "string", "vim.version.version1"], ["proxy", "string", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.PatchManager.PatchManagerOperationSpec", "HostPatchManagerPatchManagerOperationSpec", "vmodl.DynamicData", "vim.version.version5", [["proxy", "string", "vim.version.version5", {:optional => true}], ["port", "int", "vim.version.version5", {:optional => true}], ["userName", "string", "vim.version.version5", {:optional => true}], ["password", "string", "vim.version.version5", {:optional => true}], ["cmdOption", "string", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.PathSelectionPolicyOption", "HostPathSelectionPolicyOption", "vmodl.DynamicData", "vim.version.version5", [["policy", "vim.ElementDescription", "vim.version.version5"]])
    create_data_type("vim.host.PciDevice", "HostPciDevice", "vmodl.DynamicData", "vim.version.version1", [["id", "string", "vim.version.version1"], ["classId", "short", "vim.version.version1"], ["bus", "byte", "vim.version.version1"], ["slot", "byte", "vim.version.version1"], ["function", "byte", "vim.version.version1"], ["vendorId", "short", "vim.version.version1"], ["subVendorId", "short", "vim.version.version1"], ["vendorName", "string", "vim.version.version1"], ["deviceId", "short", "vim.version.version1"], ["subDeviceId", "short", "vim.version.version1"], ["parentBridge", "string", "vim.version.version5", {:optional => true}], ["deviceName", "string", "vim.version.version1"]])
    create_data_type("vim.host.PciPassthruConfig", "HostPciPassthruConfig", "vmodl.DynamicData", "vim.version.version5", [["id", "string", "vim.version.version5"], ["passthruEnabled", "boolean", "vim.version.version5"]])
    create_data_type("vim.host.PciPassthruInfo", "HostPciPassthruInfo", "vmodl.DynamicData", "vim.version.version5", [["id", "string", "vim.version.version5"], ["dependentDevice", "string", "vim.version.version5"], ["passthruEnabled", "boolean", "vim.version.version5"], ["passthruCapable", "boolean", "vim.version.version5"], ["passthruActive", "boolean", "vim.version.version5"]])
    create_managed_type("vim.host.PciPassthruSystem", "HostPciPassthruSystem", "vim.ExtensibleManagedObject", "vim.version.version5", [["pciPassthruInfo", "vim.host.PciPassthruInfo[]", "vim.version.version5", {}, "System.Read"]], [["refresh", "Refresh", "vim.version.version5", [], [{}, "void", "void"], "Host.Config.Settings", nil], ["updatePassthruConfig", "UpdatePassthruConfig", "vim.version.version5", [["config", "vim.host.PciPassthruConfig[]", "vim.version.version5", {}, nil]], [{}, "void", "void"], "Host.Config.PciPassthru", ["vim.fault.HostConfigFault"]]])
    create_data_type("vim.host.PhysicalNic", "PhysicalNic", "vmodl.DynamicData", "vim.version.version1", [["key", "string", "vim.version.version1", {:optional => true}], ["device", "string", "vim.version.version1"], ["pci", "string", "vim.version.version1"], ["driver", "string", "vim.version.version1", {:optional => true}], ["linkSpeed", "vim.host.PhysicalNic.LinkSpeedDuplex", "vim.version.version1", {:optional => true}], ["validLinkSpecification", "vim.host.PhysicalNic.LinkSpeedDuplex[]", "vim.version.version1", {:optional => true}], ["spec", "vim.host.PhysicalNic.Specification", "vim.version.version1"], ["wakeOnLanSupported", "boolean", "vim.version.version2"], ["mac", "string", "vim.version.version2"], ["fcoeConfiguration", "vim.host.FcoeConfig", "vim.version.version7", {:optional => true}], ["vmDirectPathGen2Supported", "boolean", "vim.version.version6", {:optional => true}], ["vmDirectPathGen2SupportedMode", "string", "vim.version.version6", {:optional => true}], ["resourcePoolSchedulerAllowed", "boolean", "vim.version.version6", {:optional => true}], ["resourcePoolSchedulerDisallowedReason", "string[]", "vim.version.version6", {:optional => true}], ["autoNegotiateSupported", "boolean", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.host.PhysicalNic.Specification", "PhysicalNicSpec", "vmodl.DynamicData", "vim.version.version1", [["ip", "vim.host.IpConfig", "vim.version.version1", {:optional => true}], ["linkSpeed", "vim.host.PhysicalNic.LinkSpeedDuplex", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.PhysicalNic.Config", "PhysicalNicConfig", "vmodl.DynamicData", "vim.version.version1", [["device", "string", "vim.version.version1"], ["spec", "vim.host.PhysicalNic.Specification", "vim.version.version1"]])
    create_data_type("vim.host.PhysicalNic.LinkSpeedDuplex", "PhysicalNicLinkInfo", "vmodl.DynamicData", "vim.version.version1", [["speedMb", "int", "vim.version.version1"], ["duplex", "boolean", "vim.version.version1"]])
    create_data_type("vim.host.PhysicalNic.NetworkHint", "PhysicalNicHintInfo", "vmodl.DynamicData", "vim.version.version1", [["device", "string", "vim.version.version1"], ["subnet", "vim.host.PhysicalNic.NetworkHint.IpNetwork[]", "vim.version.version1", {:optional => true}], ["network", "vim.host.PhysicalNic.NetworkHint.NamedNetwork[]", "vim.version.version1", {:optional => true}], ["connectedSwitchPort", "vim.host.PhysicalNic.CdpInfo", "vim.version.version2", {:optional => true}], ["lldpInfo", "vim.host.PhysicalNic.LldpInfo", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.host.PhysicalNic.NetworkHint.HintElement", "PhysicalNicHint", "vmodl.DynamicData", "vim.version.version1", [["vlanId", "int", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.PhysicalNic.NetworkHint.IpNetwork", "PhysicalNicIpHint", "vim.host.PhysicalNic.NetworkHint.HintElement", "vim.version.version1", [["ipSubnet", "string", "vim.version.version1"]])
    create_data_type("vim.host.PhysicalNic.NetworkHint.NamedNetwork", "PhysicalNicNameHint", "vim.host.PhysicalNic.NetworkHint.HintElement", "vim.version.version1", [["network", "string", "vim.version.version1"]])
    create_data_type("vim.host.PhysicalNic.CdpDeviceCapability", "PhysicalNicCdpDeviceCapability", "vmodl.DynamicData", "vim.version.version2", [["router", "boolean", "vim.version.version2"], ["transparentBridge", "boolean", "vim.version.version2"], ["sourceRouteBridge", "boolean", "vim.version.version2"], ["networkSwitch", "boolean", "vim.version.version2"], ["host", "boolean", "vim.version.version2"], ["igmpEnabled", "boolean", "vim.version.version2"], ["repeater", "boolean", "vim.version.version2"]])
    create_data_type("vim.host.PhysicalNic.CdpInfo", "PhysicalNicCdpInfo", "vmodl.DynamicData", "vim.version.version2", [["cdpVersion", "int", "vim.version.version2", {:optional => true}], ["timeout", "int", "vim.version.version2", {:optional => true}], ["ttl", "int", "vim.version.version2", {:optional => true}], ["samples", "int", "vim.version.version2", {:optional => true}], ["devId", "string", "vim.version.version2", {:optional => true}], ["address", "string", "vim.version.version2", {:optional => true}], ["portId", "string", "vim.version.version2", {:optional => true}], ["deviceCapability", "vim.host.PhysicalNic.CdpDeviceCapability", "vim.version.version2", {:optional => true}], ["softwareVersion", "string", "vim.version.version2", {:optional => true}], ["hardwarePlatform", "string", "vim.version.version2", {:optional => true}], ["ipPrefix", "string", "vim.version.version2", {:optional => true}], ["ipPrefixLen", "int", "vim.version.version2", {:optional => true}], ["vlan", "int", "vim.version.version2", {:optional => true}], ["fullDuplex", "boolean", "vim.version.version2", {:optional => true}], ["mtu", "int", "vim.version.version2", {:optional => true}], ["systemName", "string", "vim.version.version2", {:optional => true}], ["systemOID", "string", "vim.version.version2", {:optional => true}], ["mgmtAddr", "string", "vim.version.version2", {:optional => true}], ["location", "string", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.host.PhysicalNic.LldpInfo", "LinkLayerDiscoveryProtocolInfo", "vmodl.DynamicData", "vim.version.version7", [["chassisId", "string", "vim.version.version7"], ["portId", "string", "vim.version.version7"], ["timeToLive", "int", "vim.version.version7"], ["parameter", "vmodl.KeyAnyValue[]", "vim.version.version7", {:optional => true}]])
    create_enum_type("vim.host.PhysicalNic.VmDirectPathGen2SupportedMode", "PhysicalNicVmDirectPathGen2SupportedMode", "vim.version.version6", ["upt", "cdpt"])
    create_enum_type("vim.host.PhysicalNic.ResourcePoolSchedulerDisallowedReason", "PhysicalNicResourcePoolSchedulerDisallowedReason", "vim.version.version6", ["userOptOut", "hardwareUnsupported"])
    create_data_type("vim.host.PlugStoreTopology", "HostPlugStoreTopology", "vmodl.DynamicData", "vim.version.version5", [["adapter", "vim.host.PlugStoreTopology.Adapter[]", "vim.version.version5", {:linkable => true, :optional => true}], ["path", "vim.host.PlugStoreTopology.Path[]", "vim.version.version5", {:linkable => true, :optional => true}], ["target", "vim.host.PlugStoreTopology.Target[]", "vim.version.version5", {:linkable => true, :optional => true}], ["device", "vim.host.PlugStoreTopology.Device[]", "vim.version.version5", {:linkable => true, :optional => true}], ["plugin", "vim.host.PlugStoreTopology.Plugin[]", "vim.version.version5", {:linkable => true, :optional => true}]])
    create_data_type("vim.host.PlugStoreTopology.Adapter", "HostPlugStoreTopologyAdapter", "vmodl.DynamicData", "vim.version.version5", [["key", "string", "vim.version.version5"], ["adapter", "vim.host.HostBusAdapter", "vim.version.version5", {:link => true}], ["path", "vim.host.PlugStoreTopology.Path[]", "vim.version.version5", {:link => true, :optional => true}]])
    create_data_type("vim.host.PlugStoreTopology.Path", "HostPlugStoreTopologyPath", "vmodl.DynamicData", "vim.version.version5", [["key", "string", "vim.version.version5"], ["name", "string", "vim.version.version5"], ["channelNumber", "int", "vim.version.version5", {:optional => true}], ["targetNumber", "int", "vim.version.version5", {:optional => true}], ["lunNumber", "int", "vim.version.version5", {:optional => true}], ["adapter", "vim.host.PlugStoreTopology.Adapter", "vim.version.version5", {:link => true, :optional => true}], ["target", "vim.host.PlugStoreTopology.Target", "vim.version.version5", {:link => true, :optional => true}], ["device", "vim.host.PlugStoreTopology.Device", "vim.version.version5", {:link => true, :optional => true}]])
    create_data_type("vim.host.PlugStoreTopology.Device", "HostPlugStoreTopologyDevice", "vmodl.DynamicData", "vim.version.version5", [["key", "string", "vim.version.version5"], ["lun", "vim.host.ScsiLun", "vim.version.version5", {:link => true}], ["path", "vim.host.PlugStoreTopology.Path[]", "vim.version.version5", {:link => true, :optional => true}]])
    create_data_type("vim.host.PlugStoreTopology.Plugin", "HostPlugStoreTopologyPlugin", "vmodl.DynamicData", "vim.version.version5", [["key", "string", "vim.version.version5"], ["name", "string", "vim.version.version5"], ["device", "vim.host.PlugStoreTopology.Device[]", "vim.version.version5", {:link => true, :optional => true}], ["claimedPath", "vim.host.PlugStoreTopology.Path[]", "vim.version.version5", {:link => true, :optional => true}]])
    create_data_type("vim.host.PlugStoreTopology.Target", "HostPlugStoreTopologyTarget", "vmodl.DynamicData", "vim.version.version5", [["key", "string", "vim.version.version5"], ["transport", "vim.host.TargetTransport", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.PortGroup", "HostPortGroup", "vmodl.DynamicData", "vim.version.version1", [["key", "string", "vim.version.version1", {:optional => true}], ["port", "vim.host.PortGroup.Port[]", "vim.version.version1", {:linkable => true, :optional => true}], ["vswitch", "vim.host.VirtualSwitch", "vim.version.version1", {:link => true, :optional => true}], ["computedPolicy", "vim.host.NetworkPolicy", "vim.version.version1"], ["spec", "vim.host.PortGroup.Specification", "vim.version.version1"]])
    create_enum_type("vim.host.PortGroup.PortConnecteeType", "PortGroupConnecteeType", "vim.version.version1", ["virtualMachine", "systemManagement", "host", "unknown"])
    create_data_type("vim.host.PortGroup.Specification", "HostPortGroupSpec", "vmodl.DynamicData", "vim.version.version1", [["name", "string", "vim.version.version1"], ["vlanId", "int", "vim.version.version1"], ["vswitchName", "string", "vim.version.version1"], ["policy", "vim.host.NetworkPolicy", "vim.version.version1"]])
    create_data_type("vim.host.PortGroup.Config", "HostPortGroupConfig", "vmodl.DynamicData", "vim.version.version1", [["changeOperation", "string", "vim.version.version1", {:optional => true}], ["spec", "vim.host.PortGroup.Specification", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.PortGroup.Port", "HostPortGroupPort", "vmodl.DynamicData", "vim.version.version1", [["key", "string", "vim.version.version1", {:optional => true}], ["mac", "string[]", "vim.version.version1", {:optional => true}], ["type", "string", "vim.version.version1"]])
    create_managed_type("vim.host.PowerSystem", "HostPowerSystem", "vmodl.ManagedObject", "vim.version.version6", [["capability", "vim.host.PowerSystem.Capability", "vim.version.version6", {}, "Host.Config.Power"], ["info", "vim.host.PowerSystem.Info", "vim.version.version6", {}, "Host.Config.Power"]], [["configurePolicy", "ConfigurePowerPolicy", "vim.version.version6", [["key", "int", "vim.version.version6", {}, nil]], [{}, "void", "void"], "Host.Config.Power", ["vim.fault.HostConfigFault"]]])
    create_data_type("vim.host.PowerSystem.PowerPolicy", "HostPowerPolicy", "vmodl.DynamicData", "vim.version.version6", [["key", "int", "vim.version.version6"], ["name", "string", "vim.version.version6"], ["shortName", "string", "vim.version.version6"], ["description", "string", "vim.version.version6"]])
    create_data_type("vim.host.PowerSystem.Capability", "PowerSystemCapability", "vmodl.DynamicData", "vim.version.version6", [["availablePolicy", "vim.host.PowerSystem.PowerPolicy[]", "vim.version.version6"]])
    create_data_type("vim.host.PowerSystem.Info", "PowerSystemInfo", "vmodl.DynamicData", "vim.version.version6", [["currentPolicy", "vim.host.PowerSystem.PowerPolicy", "vim.version.version6"]])
    create_data_type("vim.host.ResignatureRescanResult", "HostResignatureRescanResult", "vmodl.DynamicData", "vim.version.version5", [["rescan", "vim.host.VmfsRescanResult[]", "vim.version.version5", {:optional => true}], ["result", "vim.Datastore", "vim.version.version5"]])
    create_data_type("vim.host.Ruleset", "HostFirewallRuleset", "vmodl.DynamicData", "vim.version.version1", [["key", "string", "vim.version.version1"], ["label", "string", "vim.version.version1"], ["required", "boolean", "vim.version.version1"], ["rule", "vim.host.Ruleset.Rule[]", "vim.version.version1"], ["service", "string", "vim.version.version1", {:optional => true}], ["enabled", "boolean", "vim.version.version1"], ["allowedHosts", "vim.host.Ruleset.IpList", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.host.Ruleset.IpNetwork", "HostFirewallRulesetIpNetwork", "vmodl.DynamicData", "vim.version.version7", [["network", "string", "vim.version.version7"], ["prefixLength", "int", "vim.version.version7"]])
    create_data_type("vim.host.Ruleset.IpList", "HostFirewallRulesetIpList", "vmodl.DynamicData", "vim.version.version7", [["ipAddress", "string[]", "vim.version.version7", {:optional => true}], ["ipNetwork", "vim.host.Ruleset.IpNetwork[]", "vim.version.version7", {:optional => true}], ["allIp", "boolean", "vim.version.version7"]])
    create_data_type("vim.host.Ruleset.RulesetSpec", "HostFirewallRulesetRulesetSpec", "vmodl.DynamicData", "vim.version.version7", [["allowedHosts", "vim.host.Ruleset.IpList", "vim.version.version7"]])
    create_data_type("vim.host.Ruleset.Rule", "HostFirewallRule", "vmodl.DynamicData", "vim.version.version1", [["port", "int", "vim.version.version1"], ["endPort", "int", "vim.version.version1", {:optional => true}], ["direction", "vim.host.Ruleset.Rule.Direction", "vim.version.version1"], ["portType", "vim.host.Ruleset.Rule.PortType", "vim.version.version7", {:optional => true}], ["protocol", "string", "vim.version.version1"]])
    create_enum_type("vim.host.Ruleset.Rule.Direction", "HostFirewallRuleDirection", "vim.version.version1", ["inbound", "outbound"])
    create_enum_type("vim.host.Ruleset.Rule.PortType", "HostFirewallRulePortType", "vim.version.version7", ["src", "dst"])
    create_enum_type("vim.host.Ruleset.Rule.Protocol", "HostFirewallRuleProtocol", "vim.version.version1", ["tcp", "udp"])
    create_data_type("vim.host.ScsiLun", "ScsiLun", "vim.host.Device", "vim.version.version1", [["key", "string", "vim.version.version1", {:optional => true}], ["uuid", "string", "vim.version.version1"], ["descriptor", "vim.host.ScsiLun.Descriptor[]", "vim.version.version5", {:optional => true}], ["canonicalName", "string", "vim.version.version1", {:optional => true}], ["displayName", "string", "vim.version.version5", {:optional => true}], ["lunType", "string", "vim.version.version1"], ["vendor", "string", "vim.version.version1", {:optional => true}], ["model", "string", "vim.version.version1", {:optional => true}], ["revision", "string", "vim.version.version1", {:optional => true}], ["scsiLevel", "int", "vim.version.version1", {:optional => true}], ["serialNumber", "string", "vim.version.version1", {:optional => true}], ["durableName", "vim.host.ScsiLun.DurableName", "vim.version.version1", {:optional => true}], ["alternateName", "vim.host.ScsiLun.DurableName[]", "vim.version.version2", {:optional => true}], ["standardInquiry", "byte[]", "vim.version.version2", {:optional => true}], ["queueDepth", "int", "vim.version.version1", {:optional => true}], ["operationalState", "string[]", "vim.version.version1"], ["capabilities", "vim.host.ScsiLun.Capabilities", "vim.version.version5", {:optional => true}], ["vStorageSupport", "string", "vim.version.version6", {:optional => true}]])
    create_enum_type("vim.host.ScsiLun.ScsiLunType", "ScsiLunType", "vim.version.version1", ["disk", "tape", "printer", "processor", "worm", "cdrom", "scanner", "opticalDevice", "mediaChanger", "communications", "storageArrayController", "enclosure", "unknown"])
    create_data_type("vim.host.ScsiLun.Capabilities", "ScsiLunCapabilities", "vmodl.DynamicData", "vim.version.version5", [["updateDisplayNameSupported", "boolean", "vim.version.version5"]])
    create_data_type("vim.host.ScsiLun.DurableName", "ScsiLunDurableName", "vmodl.DynamicData", "vim.version.version1", [["namespace", "string", "vim.version.version1"], ["namespaceId", "byte", "vim.version.version1"], ["data", "byte[]", "vim.version.version1", {:optional => true}]])
    create_enum_type("vim.host.ScsiLun.State", "ScsiLunState", "vim.version.version1", ["unknownState", "ok", "error", "off", "quiesced", "degraded", "lostCommunication", "timeout"])
    create_enum_type("vim.host.ScsiLun.DescriptorQuality", "ScsiLunDescriptorQuality", "vim.version.version5", ["highQuality", "mediumQuality", "lowQuality", "unknownQuality"])
    create_data_type("vim.host.ScsiLun.Descriptor", "ScsiLunDescriptor", "vmodl.DynamicData", "vim.version.version5", [["quality", "string", "vim.version.version5"], ["id", "string", "vim.version.version5"]])
    create_enum_type("vim.host.ScsiLun.VStorageSupportStatus", "ScsiLunVStorageSupportStatus", "vim.version.version6", ["vStorageSupported", "vStorageUnsupported", "vStorageUnknown"])
    create_data_type("vim.host.ScsiTopology", "HostScsiTopology", "vmodl.DynamicData", "vim.version.version1", [["adapter", "vim.host.ScsiTopology.Interface[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.ScsiTopology.Interface", "HostScsiTopologyInterface", "vmodl.DynamicData", "vim.version.version1", [["key", "string", "vim.version.version1"], ["adapter", "vim.host.HostBusAdapter", "vim.version.version1", {:link => true}], ["target", "vim.host.ScsiTopology.Target[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.ScsiTopology.Target", "HostScsiTopologyTarget", "vmodl.DynamicData", "vim.version.version1", [["key", "string", "vim.version.version1"], ["target", "int", "vim.version.version1"], ["lun", "vim.host.ScsiTopology.Lun[]", "vim.version.version1", {:optional => true}], ["transport", "vim.host.TargetTransport", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.ScsiTopology.Lun", "HostScsiTopologyLun", "vmodl.DynamicData", "vim.version.version1", [["key", "string", "vim.version.version1"], ["lun", "int", "vim.version.version1"], ["scsiLun", "vim.host.ScsiLun", "vim.version.version1", {:link => true}]])
    create_data_type("vim.host.Service", "HostService", "vmodl.DynamicData", "vim.version.version1", [["key", "string", "vim.version.version1"], ["label", "string", "vim.version.version1"], ["required", "boolean", "vim.version.version1"], ["uninstallable", "boolean", "vim.version.version1"], ["running", "boolean", "vim.version.version1"], ["ruleset", "string[]", "vim.version.version1", {:optional => true}], ["policy", "string", "vim.version.version1"], ["sourcePackage", "vim.host.Service.SourcePackage", "vim.version.version7", {:optional => true}]])
    create_enum_type("vim.host.Service.Policy", "HostServicePolicy", "vim.version.version1", ["on", "automatic", "off"])
    create_data_type("vim.host.Service.SourcePackage", "HostServiceSourcePackage", "vmodl.DynamicData", "vim.version.version7", [["sourcePackageName", "string", "vim.version.version7"], ["description", "string", "vim.version.version7"]])
    create_data_type("vim.host.ServiceConfig", "HostServiceConfig", "vmodl.DynamicData", "vim.version.version5", [["serviceId", "string", "vim.version.version5"], ["startupPolicy", "string", "vim.version.version5"]])
    create_data_type("vim.host.ServiceInfo", "HostServiceInfo", "vmodl.DynamicData", "vim.version.version1", [["service", "vim.host.Service[]", "vim.version.version1", {:optional => true}]])
    create_managed_type("vim.host.ServiceSystem", "HostServiceSystem", "vim.ExtensibleManagedObject", "vim.version.version1", [["serviceInfo", "vim.host.ServiceInfo", "vim.version.version1", {}, nil]], [["updatePolicy", "UpdateServicePolicy", "vim.version.version1", [["id", "string", "vim.version.version1", {}, nil], ["policy", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.NetService", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["start", "StartService", "vim.version.version1", [["id", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.NetService", ["vim.fault.InvalidState", "vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["stop", "StopService", "vim.version.version1", [["id", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.NetService", ["vim.fault.InvalidState", "vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["restart", "RestartService", "vim.version.version1", [["id", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.NetService", ["vim.fault.InvalidState", "vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["uninstall", "UninstallService", "vim.version.version1", [["id", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.NetService", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["refresh", "RefreshServices", "vim.version.version1", [], [{}, "void", "void"], "Host.Config.NetService", nil]])
    create_enum_type("vim.host.SignatureInfo.SigningMethodType", "HostSignatureInfoSigningMethodType", "vim.version.version5", ["DSA_SHA1", "RSA_SHA1", "RSA_MD5"])
    create_managed_type("vim.host.SnmpSystem", "HostSnmpSystem", "vmodl.ManagedObject", "vim.version.version1", [["configuration", "vim.host.SnmpSystem.SnmpConfigSpec", "vim.version.version2", {}, "Global.Settings"], ["limits", "vim.host.SnmpSystem.AgentLimits", "vim.version.version2", {}, "Global.Settings"]], [["reconfigureSnmpAgent", "ReconfigureSnmpAgent", "vim.version.version2", [["spec", "vim.host.SnmpSystem.SnmpConfigSpec", "vim.version.version2", {}, nil]], [{}, "void", "void"], "Global.Settings", ["vim.fault.NotFound", "vim.fault.InsufficientResourcesFault"]], ["sendTestNotification", "SendTestNotification", "vim.version.version2", [], [{}, "void", "void"], "Global.Settings", ["vim.fault.NotFound", "vim.fault.InsufficientResourcesFault"]]])
    create_data_type("vim.host.SnmpSystem.SnmpConfigSpec", "HostSnmpConfigSpec", "vmodl.DynamicData", "vim.version.version2", [["enabled", "boolean", "vim.version.version2", {:optional => true}], ["port", "int", "vim.version.version2", {:optional => true}], ["readOnlyCommunities", "string[]", "vim.version.version2", {:optional => true}], ["trapTargets", "vim.host.SnmpSystem.SnmpConfigSpec.Destination[]", "vim.version.version2", {:optional => true}], ["option", "vim.KeyValue[]", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.host.SnmpSystem.SnmpConfigSpec.Destination", "HostSnmpDestination", "vmodl.DynamicData", "vim.version.version1", [["hostName", "string", "vim.version.version1"], ["port", "int", "vim.version.version1"], ["community", "string", "vim.version.version1"]])
    create_data_type("vim.host.SnmpSystem.AgentLimits", "HostSnmpSystemAgentLimits", "vmodl.DynamicData", "vim.version.version2", [["maxReadOnlyCommunities", "int", "vim.version.version2"], ["maxTrapDestinations", "int", "vim.version.version2"], ["maxCommunityLength", "int", "vim.version.version2"], ["maxBufferSize", "int", "vim.version.version2"], ["capability", "vim.host.SnmpSystem.AgentLimits.Capability", "vim.version.version5"]])
    create_enum_type("vim.host.SnmpSystem.AgentLimits.Capability", "HostSnmpAgentCapability", "vim.version.version5", ["COMPLETE", "DIAGNOSTICS", "CONFIGURATION"])
    create_data_type("vim.host.SriovConfig", "HostSriovConfig", "vim.host.PciPassthruConfig", "vim.version.version9", [["sriovEnabled", "boolean", "vim.version.version9"], ["numVirtualFunction", "int", "vim.version.version9"]])
    create_data_type("vim.host.SriovInfo", "HostSriovInfo", "vim.host.PciPassthruInfo", "vim.version.version9", [["sriovEnabled", "boolean", "vim.version.version9"], ["sriovCapable", "boolean", "vim.version.version9"], ["sriovActive", "boolean", "vim.version.version9"], ["numVirtualFunctionRequested", "int", "vim.version.version9"], ["numVirtualFunction", "int", "vim.version.version9"], ["maxVirtualFunctionSupported", "int", "vim.version.version9"]])
    create_data_type("vim.host.SslThumbprintInfo", "HostSslThumbprintInfo", "vmodl.DynamicData", "vim.version.version5", [["principal", "string", "vim.version.version5"], ["ownerTag", "string", "vim.version.version7"], ["sslThumbprints", "string[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.StorageArrayTypePolicyOption", "HostStorageArrayTypePolicyOption", "vmodl.DynamicData", "vim.version.version5", [["policy", "vim.ElementDescription", "vim.version.version5"]])
    create_data_type("vim.host.StorageDeviceInfo", "HostStorageDeviceInfo", "vmodl.DynamicData", "vim.version.version1", [["hostBusAdapter", "vim.host.HostBusAdapter[]", "vim.version.version1", {:linkable => true, :optional => true}], ["scsiLun", "vim.host.ScsiLun[]", "vim.version.version1", {:linkable => true, :optional => true}], ["scsiTopology", "vim.host.ScsiTopology", "vim.version.version1", {:optional => true}], ["multipathInfo", "vim.host.MultipathInfo", "vim.version.version1", {:optional => true}], ["plugStoreTopology", "vim.host.PlugStoreTopology", "vim.version.version5", {:optional => true}], ["softwareInternetScsiEnabled", "boolean", "vim.version.version1"]])
    create_enum_type("vim.host.SystemDebugManager.ProcessKey", "HostSystemDebugManagerProcessKey", "vim.version.version5", ["hostd"])
    create_data_type("vim.host.SystemHealthInfo", "HostSystemHealthInfo", "vmodl.DynamicData", "vim.version.version2", [["numericSensorInfo", "vim.host.NumericSensorInfo[]", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.host.SystemIdentificationInfo", "HostSystemIdentificationInfo", "vmodl.DynamicData", "vim.version.version2", [["identifierValue", "string", "vim.version.version2"], ["identifierType", "vim.ElementDescription", "vim.version.version2"]])
    create_enum_type("vim.host.SystemIdentificationInfo.Identifier", "HostSystemIdentificationInfoIdentifier", "vim.version.version2", ["AssetTag", "ServiceTag", "OemSpecificString"])
    create_data_type("vim.host.SystemResourceInfo", "HostSystemResourceInfo", "vmodl.DynamicData", "vim.version.version1", [["key", "string", "vim.version.version1"], ["config", "vim.ResourceConfigSpec", "vim.version.version1", {:optional => true}], ["child", "vim.host.SystemResourceInfo[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.SystemSwapConfiguration", "HostSystemSwapConfiguration", "vmodl.DynamicData", "vim.version.version8", [["option", "vim.host.SystemSwapConfiguration.SystemSwapOption[]", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.host.SystemSwapConfiguration.SystemSwapOption", "HostSystemSwapConfigurationSystemSwapOption", "vmodl.DynamicData", "vim.version.version8", [["key", "int", "vim.version.version8"]])
    create_data_type("vim.host.SystemSwapConfiguration.DisabledOption", "HostSystemSwapConfigurationDisabledOption", "vim.host.SystemSwapConfiguration.SystemSwapOption", "vim.version.version8", nil)
    create_data_type("vim.host.SystemSwapConfiguration.HostCacheOption", "HostSystemSwapConfigurationHostCacheOption", "vim.host.SystemSwapConfiguration.SystemSwapOption", "vim.version.version8", nil)
    create_data_type("vim.host.SystemSwapConfiguration.HostLocalSwapOption", "HostSystemSwapConfigurationHostLocalSwapOption", "vim.host.SystemSwapConfiguration.SystemSwapOption", "vim.version.version8", nil)
    create_data_type("vim.host.SystemSwapConfiguration.DatastoreOption", "HostSystemSwapConfigurationDatastoreOption", "vim.host.SystemSwapConfiguration.SystemSwapOption", "vim.version.version8", [["datastore", "string", "vim.version.version8"]])
    create_data_type("vim.host.TargetTransport", "HostTargetTransport", "vmodl.DynamicData", "vim.version.version1", nil)
    create_data_type("vim.host.ParallelScsiTargetTransport", "HostParallelScsiTargetTransport", "vim.host.TargetTransport", "vim.version.version1", nil)
    create_data_type("vim.host.BlockAdapterTargetTransport", "HostBlockAdapterTargetTransport", "vim.host.TargetTransport", "vim.version.version1", nil)
    create_data_type("vim.host.FibreChannelTargetTransport", "HostFibreChannelTargetTransport", "vim.host.TargetTransport", "vim.version.version1", [["portWorldWideName", "long", "vim.version.version1"], ["nodeWorldWideName", "long", "vim.version.version1"]])
    create_data_type("vim.host.InternetScsiTargetTransport", "HostInternetScsiTargetTransport", "vim.host.TargetTransport", "vim.version.version1", [["iScsiName", "string", "vim.version.version1"], ["iScsiAlias", "string", "vim.version.version1"], ["address", "string[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.FibreChannelOverEthernetTargetTransport", "HostFibreChannelOverEthernetTargetTransport", "vim.host.FibreChannelTargetTransport", "vim.version.version7", [["vnportMac", "string", "vim.version.version7"], ["fcfMac", "string", "vim.version.version7"], ["vlanId", "int", "vim.version.version7"]])
    create_data_type("vim.host.TpmAttestationReport", "HostTpmAttestationReport", "vmodl.DynamicData", "vim.version.version8", [["tpmPcrValues", "vim.host.TpmDigestInfo[]", "vim.version.version8"], ["tpmEvents", "vim.host.TpmEventLogEntry[]", "vim.version.version8"], ["tpmLogReliable", "boolean", "vim.version.version8"]])
    create_data_type("vim.host.DigestInfo", "HostDigestInfo", "vmodl.DynamicData", "vim.version.version5", [["digestMethod", "string", "vim.version.version5"], ["digestValue", "byte[]", "vim.version.version5"], ["objectName", "string", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.host.DigestInfo.DigestMethodType", "HostDigestInfoDigestMethodType", "vim.version.version5", ["SHA1", "MD5"])
    create_data_type("vim.host.TpmDigestInfo", "HostTpmDigestInfo", "vim.host.DigestInfo", "vim.version.version5", [["pcrNumber", "int", "vim.version.version5"]])
    create_data_type("vim.host.TpmEventDetails", "HostTpmEventDetails", "vmodl.DynamicData", "vim.version.version8", [["dataHash", "byte[]", "vim.version.version8"]])
    create_data_type("vim.host.TpmEventLogEntry", "HostTpmEventLogEntry", "vmodl.DynamicData", "vim.version.version8", [["pcrIndex", "int", "vim.version.version8"], ["eventDetails", "vim.host.TpmEventDetails", "vim.version.version8"]])
    create_data_type("vim.host.TpmOptionEventDetails", "HostTpmOptionEventDetails", "vim.host.TpmEventDetails", "vim.version.version8", [["optionsFileName", "string", "vim.version.version8"], ["bootOptions", "byte[]", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.host.TpmSoftwareComponentEventDetails", "HostTpmSoftwareComponentEventDetails", "vim.host.TpmEventDetails", "vim.version.version8", [["componentName", "string", "vim.version.version8"], ["vibName", "string", "vim.version.version8"], ["vibVersion", "string", "vim.version.version8"], ["vibVendor", "string", "vim.version.version8"]])
    create_data_type("vim.host.UnresolvedVmfsResignatureSpec", "HostUnresolvedVmfsResignatureSpec", "vmodl.DynamicData", "vim.version.version5", [["extentDevicePath", "string[]", "vim.version.version5"]])
    create_data_type("vim.host.UnresolvedVmfsResolutionResult", "HostUnresolvedVmfsResolutionResult", "vmodl.DynamicData", "vim.version.version5", [["spec", "vim.host.UnresolvedVmfsResolutionSpec", "vim.version.version5"], ["vmfs", "vim.host.VmfsVolume", "vim.version.version5", {:optional => true}], ["fault", "vmodl.MethodFault", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.UnresolvedVmfsResolutionSpec", "HostUnresolvedVmfsResolutionSpec", "vmodl.DynamicData", "vim.version.version5", [["extentDevicePath", "string[]", "vim.version.version5"], ["uuidResolution", "string", "vim.version.version5"]])
    create_enum_type("vim.host.UnresolvedVmfsResolutionSpec.VmfsUuidResolution", "HostUnresolvedVmfsResolutionSpecVmfsUuidResolution", "vim.version.version5", ["resignature", "forceMount"])
    create_data_type("vim.host.UnresolvedVmfsVolume", "HostUnresolvedVmfsVolume", "vmodl.DynamicData", "vim.version.version5", [["extent", "vim.host.UnresolvedVmfsExtent[]", "vim.version.version5"], ["vmfsLabel", "string", "vim.version.version5"], ["vmfsUuid", "string", "vim.version.version5"], ["totalBlocks", "int", "vim.version.version5"], ["resolveStatus", "vim.host.UnresolvedVmfsVolume.ResolveStatus", "vim.version.version5"]])
    create_data_type("vim.host.UnresolvedVmfsVolume.ResolveStatus", "HostUnresolvedVmfsVolumeResolveStatus", "vmodl.DynamicData", "vim.version.version5", [["resolvable", "boolean", "vim.version.version5"], ["incompleteExtents", "boolean", "vim.version.version5", {:optional => true}], ["multipleCopies", "boolean", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.VFlashResourceConfigurationResult", "HostVFlashResourceConfigurationResult", "vmodl.DynamicData", "vim.version.version9", [["devicePath", "string[]", "vim.version.version9", {:optional => true}], ["vffs", "vim.host.VffsVolume", "vim.version.version9", {:optional => true}], ["diskConfigurationResult", "vim.host.DiskConfigurationResult[]", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.host.VMotionConfig", "HostVMotionConfig", "vmodl.DynamicData", "vim.version.version1", [["vmotionNicKey", "string", "vim.version.version1", {:optional => true}], ["enabled", "boolean", "vim.version.version1"]])
    create_managed_type("vim.host.VMotionSystem", "HostVMotionSystem", "vim.ExtensibleManagedObject", "vim.version.version1", [["netConfig", "vim.host.VMotionSystem.NetConfig", "vim.version.version1", {:optional => true}, nil], ["ipConfig", "vim.host.IpConfig", "vim.version.version1", {:optional => true}, nil]], [["updateIpConfig", "UpdateIpConfig", "vim.version.version1", [["ipConfig", "vim.host.IpConfig", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.Network", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["selectVnic", "SelectVnic", "vim.version.version1", [["device", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.Network", ["vim.fault.HostConfigFault"]], ["deselectVnic", "DeselectVnic", "vim.version.version1", [], [{}, "void", "void"], "Host.Config.Network", ["vim.fault.HostConfigFault"]]])
    create_data_type("vim.host.VMotionSystem.NetConfig", "HostVMotionNetConfig", "vmodl.DynamicData", "vim.version.version1", [["candidateVnic", "vim.host.VirtualNic[]", "vim.version.version1", {:linkable => true, :optional => true}], ["selectedVnic", "vim.host.VirtualNic", "vim.version.version1", {:link => true, :optional => true}]])
    create_data_type("vim.host.VirtualNic", "HostVirtualNic", "vmodl.DynamicData", "vim.version.version1", [["device", "string", "vim.version.version1"], ["key", "string", "vim.version.version1"], ["portgroup", "string", "vim.version.version1"], ["spec", "vim.host.VirtualNic.Specification", "vim.version.version1"], ["port", "vim.host.PortGroup.Port", "vim.version.version1", {:link => true, :optional => true}]])
    create_data_type("vim.host.VirtualNic.Specification", "HostVirtualNicSpec", "vmodl.DynamicData", "vim.version.version1", [["ip", "vim.host.IpConfig", "vim.version.version1", {:optional => true}], ["mac", "string", "vim.version.version1", {:optional => true}], ["distributedVirtualPort", "vim.dvs.PortConnection", "vim.version.version5", {:optional => true}], ["portgroup", "string", "vim.version.version5", {:optional => true}], ["mtu", "int", "vim.version.version5", {:optional => true}], ["tsoEnabled", "boolean", "vim.version.version5", {:optional => true}], ["netStackInstanceKey", "string", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.host.VirtualNic.Config", "HostVirtualNicConfig", "vmodl.DynamicData", "vim.version.version1", [["changeOperation", "string", "vim.version.version1", {:optional => true}], ["device", "string", "vim.version.version1", {:optional => true}], ["portgroup", "string", "vim.version.version1"], ["spec", "vim.host.VirtualNic.Specification", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.VirtualNicConnection", "HostVirtualNicConnection", "vmodl.DynamicData", "vim.version.version5", [["portgroup", "string", "vim.version.version5", {:optional => true}], ["dvPort", "vim.dvs.PortConnection", "vim.version.version5", {:optional => true}]])
    create_managed_type("vim.host.VirtualNicManager", "HostVirtualNicManager", "vim.ExtensibleManagedObject", "vim.version.version5", [["info", "vim.host.VirtualNicManagerInfo", "vim.version.version5", {}, nil]], [["queryNetConfig", "QueryNetConfig", "vim.version.version5", [["nicType", "string", "vim.version.version5", {}, nil]], [{:optional => true}, "vim.host.VirtualNicManager.NetConfig", "vim.host.VirtualNicManager.NetConfig"], "Host.Config.Network", ["vim.fault.HostConfigFault", "vmodl.fault.InvalidArgument"]], ["selectVnic", "SelectVnicForNicType", "vim.version.version5", [["nicType", "string", "vim.version.version5", {}, nil], ["device", "string", "vim.version.version5", {}, nil]], [{}, "void", "void"], "Host.Config.Network", ["vim.fault.HostConfigFault", "vmodl.fault.InvalidArgument"]], ["deselectVnic", "DeselectVnicForNicType", "vim.version.version5", [["nicType", "string", "vim.version.version5", {}, nil], ["device", "string", "vim.version.version5", {}, nil]], [{}, "void", "void"], "Host.Config.Network", ["vim.fault.HostConfigFault", "vmodl.fault.InvalidArgument"]]])
    create_enum_type("vim.host.VirtualNicManager.NicType", "HostVirtualNicManagerNicType", "vim.version.version5", ["vmotion", "faultToleranceLogging", "vSphereReplication", "vSphereReplicationNFC", "management", "vsan"])
    create_data_type("vim.host.VirtualNicManager.NicTypeSelection", "HostVirtualNicManagerNicTypeSelection", "vmodl.DynamicData", "vim.version.version5", [["vnic", "vim.host.VirtualNicConnection", "vim.version.version5"], ["nicType", "string[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.VirtualNicManager.NetConfig", "VirtualNicManagerNetConfig", "vmodl.DynamicData", "vim.version.version5", [["nicType", "string", "vim.version.version5"], ["multiSelectAllowed", "boolean", "vim.version.version5"], ["candidateVnic", "vim.host.VirtualNic[]", "vim.version.version5", {:linkable => true, :optional => true}], ["selectedVnic", "vim.host.VirtualNic[]", "vim.version.version5", {:link => true, :optional => true}]])
    create_data_type("vim.host.VirtualNicManagerInfo", "HostVirtualNicManagerInfo", "vmodl.DynamicData", "vim.version.version5", [["netConfig", "vim.host.VirtualNicManager.NetConfig[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.VirtualSwitch", "HostVirtualSwitch", "vmodl.DynamicData", "vim.version.version1", [["name", "string", "vim.version.version1"], ["key", "string", "vim.version.version1"], ["numPorts", "int", "vim.version.version1"], ["numPortsAvailable", "int", "vim.version.version1"], ["mtu", "int", "vim.version.version2", {:optional => true}], ["portgroup", "vim.host.PortGroup[]", "vim.version.version1", {:link => true, :optional => true}], ["pnic", "vim.host.PhysicalNic[]", "vim.version.version1", {:link => true, :optional => true}], ["spec", "vim.host.VirtualSwitch.Specification", "vim.version.version1"]])
    create_data_type("vim.host.VirtualSwitch.Bridge", "HostVirtualSwitchBridge", "vmodl.DynamicData", "vim.version.version1", nil)
    create_data_type("vim.host.VirtualSwitch.AutoBridge", "HostVirtualSwitchAutoBridge", "vim.host.VirtualSwitch.Bridge", "vim.version.version1", [["excludedNicDevice", "string[]", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.host.VirtualSwitch.SimpleBridge", "HostVirtualSwitchSimpleBridge", "vim.host.VirtualSwitch.Bridge", "vim.version.version1", [["nicDevice", "string", "vim.version.version1"]])
    create_data_type("vim.host.VirtualSwitch.BondBridge", "HostVirtualSwitchBondBridge", "vim.host.VirtualSwitch.Bridge", "vim.version.version1", [["nicDevice", "string[]", "vim.version.version1"], ["beacon", "vim.host.VirtualSwitch.BeaconConfig", "vim.version.version1", {:optional => true}], ["linkDiscoveryProtocolConfig", "vim.host.LinkDiscoveryProtocolConfig", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.VirtualSwitch.BeaconConfig", "HostVirtualSwitchBeaconConfig", "vmodl.DynamicData", "vim.version.version1", [["interval", "int", "vim.version.version1"]])
    create_data_type("vim.host.VirtualSwitch.Specification", "HostVirtualSwitchSpec", "vmodl.DynamicData", "vim.version.version1", [["numPorts", "int", "vim.version.version1"], ["bridge", "vim.host.VirtualSwitch.Bridge", "vim.version.version1", {:optional => true}], ["policy", "vim.host.NetworkPolicy", "vim.version.version1", {:optional => true}], ["mtu", "int", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.host.VirtualSwitch.Config", "HostVirtualSwitchConfig", "vmodl.DynamicData", "vim.version.version1", [["changeOperation", "string", "vim.version.version1", {:optional => true}], ["name", "string", "vim.version.version1"], ["spec", "vim.host.VirtualSwitch.Specification", "vim.version.version1", {:optional => true}]])
    create_enum_type("vim.host.VmciAccessManager.Mode", "HostVmciAccessManagerMode", "vim.version.version7", ["grant", "replace", "revoke"])
    create_data_type("vim.host.VmciAccessManager.AccessSpec", "HostVmciAccessManagerAccessSpec", "vmodl.DynamicData", "vim.version.version7", [["vm", "vim.VirtualMachine", "vim.version.version7"], ["services", "string[]", "vim.version.version7", {:optional => true}], ["mode", "string", "vim.version.version7"]])
    create_data_type("vim.host.VmfsRescanResult", "HostVmfsRescanResult", "vmodl.DynamicData", "vim.version.version5", [["host", "vim.HostSystem", "vim.version.version5"], ["fault", "vmodl.MethodFault", "vim.version.version5", {:optional => true}]])
    create_managed_type("vim.host.VsanInternalSystem", "HostVsanInternalSystem", "vmodl.ManagedObject", "vim.version.version9", nil, [["queryCmmds", "QueryCmmds", "vim.version.version9", [["queries", "vim.host.VsanInternalSystem.CmmdsQuery[]", "vim.version.version9", {}, nil]], [{}, "string", "string"], "System.Read", nil], ["queryPhysicalVsanDisks", "QueryPhysicalVsanDisks", "vim.version.version9", [["props", "string[]", "vim.version.version9", {:optional => true}, nil]], [{}, "string", "string"], "System.Read", nil], ["queryVsanObjects", "QueryVsanObjects", "vim.version.version9", [["uuids", "string[]", "vim.version.version9", {:optional => true}, nil]], [{}, "string", "string"], "System.Read", nil], ["queryObjectsOnPhysicalVsanDisk", "QueryObjectsOnPhysicalVsanDisk", "vim.version.version9", [["disks", "string[]", "vim.version.version9", {}, nil]], [{}, "string", "string"], "System.Read", nil]])
    create_data_type("vim.host.VsanInternalSystem.CmmdsQuery", "HostVsanInternalSystemCmmdsQuery", "vmodl.DynamicData", "vim.version.version9", [["type", "string", "vim.version.version9", {:optional => true}], ["uuid", "string", "vim.version.version9", {:optional => true}], ["owner", "string", "vim.version.version9", {:optional => true}]])
    create_managed_type("vim.host.VsanSystem", "HostVsanSystem", "vmodl.ManagedObject", "vim.version.version9", [["config", "vim.vsan.host.ConfigInfo", "vim.version.version9", {}, "System.Read"]], [["queryDisksForVsan", "QueryDisksForVsan", "vim.version.version9", [["canonicalName", "string[]", "vim.version.version9", {:optional => true}, nil]], [{:optional => true}, "vim.vsan.host.DiskResult[]", "vim.vsan.host.DiskResult[]"], "System.Read", nil], ["addDisks", "AddDisks_Task", "vim.version.version9", [["disk", "vim.host.ScsiDisk[]", "vim.version.version9", {}, nil]], [{:optional => true}, "vim.Task", "vim.vsan.host.DiskMapResult[]"], "Host.Config.Storage", nil], ["initializeDisks", "InitializeDisks_Task", "vim.version.version9", [["mapping", "vim.vsan.host.DiskMapping[]", "vim.version.version9", {}, nil]], [{:optional => true}, "vim.Task", "vim.vsan.host.DiskMapResult[]"], "Host.Config.Storage", nil], ["removeDisk", "RemoveDisk_Task", "vim.version.version9", [["disk", "vim.host.ScsiDisk[]", "vim.version.version9", {}, nil]], [{:optional => true}, "vim.Task", "vim.vsan.host.DiskResult[]"], "Host.Config.Storage", nil], ["removeDiskMapping", "RemoveDiskMapping_Task", "vim.version.version9", [["mapping", "vim.vsan.host.DiskMapping[]", "vim.version.version9", {}, nil]], [{:optional => true}, "vim.Task", "vim.vsan.host.DiskMapResult[]"], "Host.Config.Storage", nil], ["update", "UpdateVsan_Task", "vim.version.version9", [["config", "vim.vsan.host.ConfigInfo", "vim.version.version9", {}, nil]], [{}, "vim.Task", "void"], "Host.Config.Storage", nil], ["queryHostStatus", "QueryHostStatus", "vim.version.version9", [], [{}, "vim.vsan.host.ClusterStatus", "vim.vsan.host.ClusterStatus"], "System.Read", nil]])
    create_data_type("vim.net.DhcpConfigInfo", "NetDhcpConfigInfo", "vmodl.DynamicData", "vim.version.version6", [["ipv6", "vim.net.DhcpConfigInfo.DhcpOptions", "vim.version.version6", {:optional => true}], ["ipv4", "vim.net.DhcpConfigInfo.DhcpOptions", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.net.DhcpConfigInfo.DhcpOptions", "NetDhcpConfigInfoDhcpOptions", "vmodl.DynamicData", "vim.version.version6", [["enable", "boolean", "vim.version.version6"], ["config", "vim.KeyValue[]", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.net.DhcpConfigSpec", "NetDhcpConfigSpec", "vmodl.DynamicData", "vim.version.version6", [["ipv6", "vim.net.DhcpConfigSpec.DhcpOptionsSpec", "vim.version.version6", {:optional => true}], ["ipv4", "vim.net.DhcpConfigSpec.DhcpOptionsSpec", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.net.DhcpConfigSpec.DhcpOptionsSpec", "NetDhcpConfigSpecDhcpOptionsSpec", "vmodl.DynamicData", "vim.version.version6", [["enable", "boolean", "vim.version.version6", {:optional => true}], ["config", "vim.KeyValue[]", "vim.version.version6"], ["operation", "string", "vim.version.version6"]])
    create_data_type("vim.net.DnsConfigInfo", "NetDnsConfigInfo", "vmodl.DynamicData", "vim.version.version6", [["dhcp", "boolean", "vim.version.version6"], ["hostName", "string", "vim.version.version6"], ["domainName", "string", "vim.version.version6"], ["ipAddress", "string[]", "vim.version.version6", {:optional => true}], ["searchDomain", "string[]", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.net.DnsConfigSpec", "NetDnsConfigSpec", "vmodl.DynamicData", "vim.version.version6", [["dhcp", "boolean", "vim.version.version6", {:optional => true}], ["hostName", "string", "vim.version.version6", {:optional => true}], ["domainName", "string", "vim.version.version6", {:optional => true}], ["ipAddress", "string[]", "vim.version.version6", {:optional => true}], ["searchDomain", "string[]", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.net.IpConfigInfo", "NetIpConfigInfo", "vmodl.DynamicData", "vim.version.version6", [["ipAddress", "vim.net.IpConfigInfo.IpAddress[]", "vim.version.version6", {:optional => true}], ["dhcp", "vim.net.DhcpConfigInfo", "vim.version.version6", {:optional => true}], ["autoConfigurationEnabled", "boolean", "vim.version.version6", {:optional => true}]])
    create_enum_type("vim.net.IpConfigInfo.IpAddressOrigin", "NetIpConfigInfoIpAddressOrigin", "vim.version.version6", ["other", "manual", "dhcp", "linklayer", "random"])
    create_enum_type("vim.net.IpConfigInfo.IpAddressStatus", "NetIpConfigInfoIpAddressStatus", "vim.version.version6", ["preferred", "deprecated", "invalid", "inaccessible", "unknown", "tentative", "duplicate"])
    create_data_type("vim.net.IpConfigInfo.IpAddress", "NetIpConfigInfoIpAddress", "vmodl.DynamicData", "vim.version.version6", [["ipAddress", "string", "vim.version.version6"], ["prefixLength", "int", "vim.version.version6"], ["origin", "string", "vim.version.version6", {:optional => true}], ["state", "string", "vim.version.version6", {:optional => true}], ["lifetime", "vmodl.DateTime", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.net.IpConfigSpec", "NetIpConfigSpec", "vmodl.DynamicData", "vim.version.version6", [["ipAddress", "vim.net.IpConfigSpec.IpAddressSpec[]", "vim.version.version6", {:optional => true}], ["dhcp", "vim.net.DhcpConfigSpec", "vim.version.version6", {:optional => true}], ["autoConfigurationEnabled", "boolean", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.net.IpConfigSpec.IpAddressSpec", "NetIpConfigSpecIpAddressSpec", "vmodl.DynamicData", "vim.version.version6", [["ipAddress", "string", "vim.version.version6"], ["prefixLength", "int", "vim.version.version6"], ["operation", "string", "vim.version.version6"]])
    create_data_type("vim.net.IpRouteConfigInfo", "NetIpRouteConfigInfo", "vmodl.DynamicData", "vim.version.version6", [["ipRoute", "vim.net.IpRouteConfigInfo.IpRoute[]", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.net.IpRouteConfigInfo.Gateway", "NetIpRouteConfigInfoGateway", "vmodl.DynamicData", "vim.version.version6", [["ipAddress", "string", "vim.version.version6", {:optional => true}], ["device", "string", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.net.IpRouteConfigInfo.IpRoute", "NetIpRouteConfigInfoIpRoute", "vmodl.DynamicData", "vim.version.version6", [["network", "string", "vim.version.version6"], ["prefixLength", "int", "vim.version.version6"], ["gateway", "vim.net.IpRouteConfigInfo.Gateway", "vim.version.version6"]])
    create_data_type("vim.net.IpRouteConfigSpec", "NetIpRouteConfigSpec", "vmodl.DynamicData", "vim.version.version6", [["ipRoute", "vim.net.IpRouteConfigSpec.IpRouteSpec[]", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.net.IpRouteConfigSpec.GatewaySpec", "NetIpRouteConfigSpecGatewaySpec", "vmodl.DynamicData", "vim.version.version6", [["ipAddress", "string", "vim.version.version6", {:optional => true}], ["device", "string", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.net.IpRouteConfigSpec.IpRouteSpec", "NetIpRouteConfigSpecIpRouteSpec", "vmodl.DynamicData", "vim.version.version6", [["network", "string", "vim.version.version6"], ["prefixLength", "int", "vim.version.version6"], ["gateway", "vim.net.IpRouteConfigSpec.GatewaySpec", "vim.version.version6"], ["operation", "string", "vim.version.version6"]])
    create_data_type("vim.net.IpStackInfo", "NetIpStackInfo", "vmodl.DynamicData", "vim.version.version6", [["neighbor", "vim.net.IpStackInfo.NetToMedia[]", "vim.version.version6", {:optional => true}], ["defaultRouter", "vim.net.IpStackInfo.DefaultRouter[]", "vim.version.version6", {:optional => true}]])
    create_enum_type("vim.net.IpStackInfo.EntryType", "NetIpStackInfoEntryType", "vim.version.version6", ["other", "invalid", "dynamic", "manual"])
    create_enum_type("vim.net.IpStackInfo.Preference", "NetIpStackInfoPreference", "vim.version.version6", ["reserved", "low", "medium", "high"])
    create_data_type("vim.net.IpStackInfo.NetToMedia", "NetIpStackInfoNetToMedia", "vmodl.DynamicData", "vim.version.version6", [["ipAddress", "string", "vim.version.version6"], ["physicalAddress", "string", "vim.version.version6"], ["device", "string", "vim.version.version6"], ["type", "string", "vim.version.version6"]])
    create_data_type("vim.net.IpStackInfo.DefaultRouter", "NetIpStackInfoDefaultRouter", "vmodl.DynamicData", "vim.version.version6", [["ipAddress", "string", "vim.version.version6"], ["device", "string", "vim.version.version6"], ["lifetime", "vmodl.DateTime", "vim.version.version6"], ["preference", "string", "vim.version.version6"]])
    create_data_type("vim.net.NetBIOSConfigInfo", "NetBIOSConfigInfo", "vmodl.DynamicData", "vim.version.version6", [["mode", "string", "vim.version.version6"]])
    create_enum_type("vim.net.NetBIOSConfigInfo.Mode", "NetBIOSConfigInfoMode", "vim.version.version6", ["unknown", "enabled", "disabled", "enabledViaDHCP"])
    create_data_type("vim.net.WinNetBIOSConfigInfo", "WinNetBIOSConfigInfo", "vim.net.NetBIOSConfigInfo", "vim.version.version6", [["primaryWINS", "string", "vim.version.version6"], ["secondaryWINS", "string", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.option.ArrayUpdateSpec", "ArrayUpdateSpec", "vmodl.DynamicData", "vim.version.version1", [["operation", "vim.option.ArrayUpdateSpec.Operation", "vim.version.version1"], ["removeKey", "anyType", "vim.version.version1", {:optional => true}]])
    create_enum_type("vim.option.ArrayUpdateSpec.Operation", "ArrayUpdateOperation", "vim.version.version1", ["add", "remove", "edit"])
    create_data_type("vim.option.OptionDef", "OptionDef", "vim.ElementDescription", "vim.version.version1", [["optionType", "vim.option.OptionType", "vim.version.version1"]])
    create_managed_type("vim.option.OptionManager", "OptionManager", "vmodl.ManagedObject", "vim.version.version1", [["supportedOption", "vim.option.OptionDef[]", "vim.version.version1", {:optional => true}, nil], ["setting", "vim.option.OptionValue[]", "vim.version.version1", {:optional => true}, nil]], [["queryView", "QueryOptions", "vim.version.version1", [["name", "string", "vim.version.version1", {:optional => true}, nil]], [{:optional => true}, "vim.option.OptionValue[]", "vim.option.OptionValue[]"], "System.View", ["vim.fault.InvalidName"]], ["updateValues", "UpdateOptions", "vim.version.version1", [["changedValue", "vim.option.OptionValue[]", "vim.version.version1", {}, nil]], [{}, "void", "void"], nil, ["vim.fault.InvalidName"]]])
    create_data_type("vim.option.OptionType", "OptionType", "vmodl.DynamicData", "vim.version.version1", [["valueIsReadonly", "boolean", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.option.OptionValue", "OptionValue", "vmodl.DynamicData", "vim.version.version1", [["key", "string", "vim.version.version1"], ["value", "anyType", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.option.StringOption", "StringOption", "vim.option.OptionType", "vim.version.version1", [["defaultValue", "string", "vim.version.version1"], ["validCharacters", "string", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.profile.ApplyProfile", "ApplyProfile", "vmodl.DynamicData", "vim.version.version5", [["enabled", "boolean", "vim.version.version5"], ["policy", "vim.profile.Policy[]", "vim.version.version5", {:optional => true}], ["profileTypeName", "string", "vim.version.version7", {:optional => true}], ["profileVersion", "string", "vim.version.version7", {:optional => true}], ["property", "vim.profile.ApplyProfileProperty[]", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.profile.ApplyProfileElement", "ProfileApplyProfileElement", "vim.profile.ApplyProfile", "vim.version.version7", [["key", "string", "vim.version.version7"]])
    create_data_type("vim.profile.ApplyProfileProperty", "ProfileApplyProfileProperty", "vmodl.DynamicData", "vim.version.version7", [["propertyName", "string", "vim.version.version7"], ["array", "boolean", "vim.version.version7"], ["profile", "vim.profile.ApplyProfile[]", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.profile.ComplianceLocator", "ComplianceLocator", "vmodl.DynamicData", "vim.version.version5", [["expressionName", "string", "vim.version.version5"], ["applyPath", "vim.profile.ProfilePropertyPath", "vim.version.version5"]])
    create_managed_type("vim.profile.ComplianceManager", "ProfileComplianceManager", "vmodl.ManagedObject", "vim.version.version5", nil, [["checkCompliance", "CheckCompliance_Task", "vim.version.version5", [["profile", "vim.profile.Profile[]", "vim.version.version5", {:optional => true}, nil], ["entity", "vim.ManagedEntity[]", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.Task", "vim.profile.ComplianceResult[]"], "System.View", nil], ["queryComplianceStatus", "QueryComplianceStatus", "vim.version.version5", [["profile", "vim.profile.Profile[]", "vim.version.version5", {:optional => true}, nil], ["entity", "vim.ManagedEntity[]", "vim.version.version5", {:optional => true}, nil]], [{:optional => true}, "vim.profile.ComplianceResult[]", "vim.profile.ComplianceResult[]"], "System.View", nil], ["clearComplianceStatus", "ClearComplianceStatus", "vim.version.version5", [["profile", "vim.profile.Profile[]", "vim.version.version5", {:optional => true}, nil], ["entity", "vim.ManagedEntity[]", "vim.version.version5", {:optional => true}, nil]], [{}, "void", "void"], "Profile.Clear", nil], ["queryExpressionMetadata", "QueryExpressionMetadata", "vim.version.version5", [["expressionName", "string[]", "vim.version.version5", {:optional => true}, nil], ["profile", "vim.profile.Profile", "vim.version.version7", {:optional => true}, nil]], [{:optional => true}, "vim.profile.ExpressionMetadata[]", "vim.profile.ExpressionMetadata[]"], "System.View", nil]])
    create_data_type("vim.profile.ComplianceProfile", "ComplianceProfile", "vmodl.DynamicData", "vim.version.version5", [["expression", "vim.profile.Expression[]", "vim.version.version5"], ["rootExpression", "string", "vim.version.version5"]])
    create_data_type("vim.profile.ComplianceResult", "ComplianceResult", "vmodl.DynamicData", "vim.version.version5", [["profile", "vim.profile.Profile", "vim.version.version5", {:optional => true}], ["complianceStatus", "string", "vim.version.version5"], ["entity", "vim.ManagedEntity", "vim.version.version5", {:optional => true}], ["checkTime", "vmodl.DateTime", "vim.version.version5", {:optional => true}], ["failure", "vim.profile.ComplianceResult.ComplianceFailure[]", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.profile.ComplianceResult.Status", "ComplianceResultStatus", "vim.version.version5", ["compliant", "nonCompliant", "unknown"])
    create_data_type("vim.profile.ComplianceResult.ComplianceFailure", "ComplianceFailure", "vmodl.DynamicData", "vim.version.version5", [["failureType", "string", "vim.version.version5"], ["message", "vmodl.LocalizableMessage", "vim.version.version5"], ["expressionName", "string", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.profile.DeferredPolicyOptionParameter", "ProfileDeferredPolicyOptionParameter", "vmodl.DynamicData", "vim.version.version5", [["inputPath", "vim.profile.ProfilePropertyPath", "vim.version.version5"], ["parameter", "vmodl.KeyAnyValue[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.profile.Expression", "ProfileExpression", "vmodl.DynamicData", "vim.version.version5", [["id", "string", "vim.version.version5"], ["displayName", "string", "vim.version.version5"], ["negated", "boolean", "vim.version.version5"]])
    create_data_type("vim.profile.SimpleExpression", "ProfileSimpleExpression", "vim.profile.Expression", "vim.version.version5", [["expressionType", "string", "vim.version.version5"], ["parameter", "vmodl.KeyAnyValue[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.profile.CompositeExpression", "ProfileCompositeExpression", "vim.profile.Expression", "vim.version.version5", [["operator", "string", "vim.version.version5"], ["expressionName", "string[]", "vim.version.version5"]])
    create_data_type("vim.profile.ExpressionMetadata", "ProfileExpressionMetadata", "vmodl.DynamicData", "vim.version.version5", [["expressionId", "vim.ExtendedElementDescription", "vim.version.version5"], ["parameter", "vim.profile.ParameterMetadata[]", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.profile.NumericComparator", "ProfileNumericComparator", "vim.version.version5", ["lessThan", "lessThanEqual", "equal", "notEqual", "greaterThanEqual", "greaterThan"])
    create_data_type("vim.profile.ParameterMetadata", "ProfileParameterMetadata", "vmodl.DynamicData", "vim.version.version5", [["id", "vim.ExtendedElementDescription", "vim.version.version5"], ["type", "vmodl.TypeName", "vim.version.version5"], ["optional", "boolean", "vim.version.version5"], ["defaultValue", "anyType", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.profile.Policy", "ProfilePolicy", "vmodl.DynamicData", "vim.version.version5", [["id", "string", "vim.version.version5"], ["policyOption", "vim.profile.PolicyOption", "vim.version.version5"]])
    create_data_type("vim.profile.PolicyOptionMetadata", "ProfilePolicyOptionMetadata", "vmodl.DynamicData", "vim.version.version5", [["id", "vim.ExtendedElementDescription", "vim.version.version5"], ["parameter", "vim.profile.ParameterMetadata[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.profile.CompositePolicyOptionMetadata", "ProfileCompositePolicyOptionMetadata", "vim.profile.PolicyOptionMetadata", "vim.version.version5", [["option", "string[]", "vim.version.version5"]])
    create_data_type("vim.profile.UserInputRequiredParameterMetadata", "UserInputRequiredParameterMetadata", "vim.profile.PolicyOptionMetadata", "vim.version.version5", [["userInputParameter", "vim.profile.ParameterMetadata[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.profile.PolicyMetadata", "ProfilePolicyMetadata", "vmodl.DynamicData", "vim.version.version5", [["id", "vim.ExtendedElementDescription", "vim.version.version5"], ["possibleOption", "vim.profile.PolicyOptionMetadata[]", "vim.version.version5"]])
    create_data_type("vim.profile.PolicyOption", "PolicyOption", "vmodl.DynamicData", "vim.version.version5", [["id", "string", "vim.version.version5"], ["parameter", "vmodl.KeyAnyValue[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.profile.CompositePolicyOption", "CompositePolicyOption", "vim.profile.PolicyOption", "vim.version.version5", [["option", "vim.profile.PolicyOption[]", "vim.version.version5", {:optional => true}]])
    create_managed_type("vim.profile.Profile", "Profile", "vmodl.ManagedObject", "vim.version.version5", [["config", "vim.profile.Profile.ConfigInfo", "vim.version.version5", {}, "Profile.Edit"], ["description", "vim.profile.Profile.Description", "vim.version.version5", {:optional => true}, nil], ["name", "string", "vim.version.version5", {}, nil], ["createdTime", "vmodl.DateTime", "vim.version.version5", {}, nil], ["modifiedTime", "vmodl.DateTime", "vim.version.version5", {}, nil], ["entity", "vim.ManagedEntity[]", "vim.version.version5", {:optional => true}, nil], ["complianceStatus", "string", "vim.version.version5", {}, nil]], [["retrieveDescription", "RetrieveDescription", "vim.version.version7", [], [{:optional => true}, "vim.profile.Profile.Description", "vim.profile.Profile.Description"], "System.View", nil], ["destroy", "DestroyProfile", "vim.version.version5", [], [{}, "void", "void"], "Profile.Delete", nil], ["associateEntities", "AssociateProfile", "vim.version.version5", [["entity", "vim.ManagedEntity[]", "vim.version.version5", {}, nil]], [{}, "void", "void"], "Profile.Edit", nil], ["dissociateEntities", "DissociateProfile", "vim.version.version5", [["entity", "vim.ManagedEntity[]", "vim.version.version5", {:optional => true}, nil]], [{}, "void", "void"], "Profile.Edit", nil], ["checkCompliance", "CheckProfileCompliance_Task", "vim.version.version5", [["entity", "vim.ManagedEntity[]", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.Task", "vim.profile.ComplianceResult[]"], "System.View", nil], ["exportProfile", "ExportProfile", "vim.version.version5", [], [{}, "string", "string"], "Profile.Export", nil]])
    create_data_type("vim.profile.Profile.CreateSpec", "ProfileCreateSpec", "vmodl.DynamicData", "vim.version.version5", [["name", "string", "vim.version.version5", {:optional => true}], ["annotation", "string", "vim.version.version5", {:optional => true}], ["enabled", "boolean", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.profile.Profile.SerializedCreateSpec", "ProfileSerializedCreateSpec", "vim.profile.Profile.CreateSpec", "vim.version.version5", [["profileConfigString", "string", "vim.version.version5"]])
    create_data_type("vim.profile.Profile.ConfigInfo", "ProfileConfigInfo", "vmodl.DynamicData", "vim.version.version5", [["name", "string", "vim.version.version5"], ["annotation", "string", "vim.version.version5", {:optional => true}], ["enabled", "boolean", "vim.version.version5"]])
    create_data_type("vim.profile.Profile.Description", "ProfileDescription", "vmodl.DynamicData", "vim.version.version5", [["section", "vim.profile.Profile.Description.Section[]", "vim.version.version5"]])
    create_data_type("vim.profile.Profile.Description.Section", "ProfileDescriptionSection", "vmodl.DynamicData", "vim.version.version5", [["description", "vim.ExtendedElementDescription", "vim.version.version5"], ["message", "vmodl.LocalizableMessage[]", "vim.version.version5", {:optional => true}]])
    create_managed_type("vim.profile.ProfileManager", "ProfileManager", "vmodl.ManagedObject", "vim.version.version5", [["profile", "vim.profile.Profile[]", "vim.version.version5", {:optional => true}, "Profile.View"]], [["createProfile", "CreateProfile", "vim.version.version5", [["createSpec", "vim.profile.Profile.CreateSpec", "vim.version.version5", {}, nil]], [{}, "vim.profile.Profile", "vim.profile.Profile"], "Profile.Create", ["vim.fault.DuplicateName"]], ["queryPolicyMetadata", "QueryPolicyMetadata", "vim.version.version5", [["policyName", "string[]", "vim.version.version5", {:optional => true}, nil], ["profile", "vim.profile.Profile", "vim.version.version7", {:optional => true}, nil]], [{:optional => true}, "vim.profile.PolicyMetadata[]", "vim.profile.PolicyMetadata[]"], "System.View", nil], ["findAssociatedProfile", "FindAssociatedProfile", "vim.version.version5", [["entity", "vim.ManagedEntity", "vim.version.version5", {}, nil]], [{:optional => true}, "vim.profile.Profile[]", "vim.profile.Profile[]"], "System.View", nil]])
    create_data_type("vim.profile.ProfileMetadata", "ProfileMetadata", "vmodl.DynamicData", "vim.version.version5", [["key", "vmodl.TypeName", "vim.version.version5"], ["profileTypeName", "string", "vim.version.version7", {:optional => true}], ["description", "vim.ExtendedDescription", "vim.version.version5", {:optional => true}], ["sortSpec", "vim.profile.ProfileMetadata.ProfileSortSpec[]", "vim.version.version7", {:optional => true}], ["profileCategory", "string", "vim.version.version8", {:optional => true}], ["profileComponent", "string", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.profile.ProfileMetadata.ProfileSortSpec", "ProfileMetadataProfileSortSpec", "vmodl.DynamicData", "vim.version.version7", [["policyId", "string", "vim.version.version7"], ["parameter", "string", "vim.version.version7"]])
    create_data_type("vim.profile.ProfilePropertyPath", "ProfilePropertyPath", "vmodl.DynamicData", "vim.version.version5", [["profilePath", "vmodl.PropertyPath", "vim.version.version5"], ["policyId", "string", "vim.version.version5", {:optional => true}], ["parameterId", "string", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.profile.ProfileStructure", "ProfileProfileStructure", "vmodl.DynamicData", "vim.version.version7", [["profileTypeName", "string", "vim.version.version7"], ["child", "vim.profile.ProfileStructureProperty[]", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.profile.ProfileStructureProperty", "ProfileProfileStructureProperty", "vmodl.DynamicData", "vim.version.version7", [["propertyName", "string", "vim.version.version7"], ["array", "boolean", "vim.version.version7"], ["element", "vim.profile.ProfileStructure", "vim.version.version7"]])
    create_managed_type("vim.profile.cluster.ClusterProfile", "ClusterProfile", "vim.profile.Profile", "vim.version.version5", nil, [["update", "UpdateClusterProfile", "vim.version.version5", [["config", "vim.profile.cluster.ClusterProfile.ConfigSpec", "vim.version.version5", {}, nil]], [{}, "void", "void"], "Profile.Edit", ["vim.fault.DuplicateName"]]])
    create_data_type("vim.profile.cluster.ClusterProfile.ConfigInfo", "ClusterProfileConfigInfo", "vim.profile.Profile.ConfigInfo", "vim.version.version5", [["complyProfile", "vim.profile.ComplianceProfile", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.profile.cluster.ClusterProfile.CreateSpec", "ClusterProfileCreateSpec", "vim.profile.Profile.CreateSpec", "vim.version.version5", nil)
    create_data_type("vim.profile.cluster.ClusterProfile.ConfigSpec", "ClusterProfileConfigSpec", "vim.profile.cluster.ClusterProfile.CreateSpec", "vim.version.version5", nil)
    create_data_type("vim.profile.cluster.ClusterProfile.CompleteConfigSpec", "ClusterProfileCompleteConfigSpec", "vim.profile.cluster.ClusterProfile.ConfigSpec", "vim.version.version5", [["complyProfile", "vim.profile.ComplianceProfile", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.profile.cluster.ClusterProfile.ServiceType", "ClusterProfileServiceType", "vim.version.version5", ["DRS", "HA", "DPM", "FT"])
    create_data_type("vim.profile.cluster.ClusterProfile.ConfigServiceCreateSpec", "ClusterProfileConfigServiceCreateSpec", "vim.profile.cluster.ClusterProfile.ConfigSpec", "vim.version.version5", [["serviceType", "string[]", "vim.version.version5", {:optional => true}]])
    create_managed_type("vim.profile.cluster.ProfileManager", "ClusterProfileManager", "vim.profile.ProfileManager", "vim.version.version5", nil, nil)
    create_data_type("vim.profile.host.AnswerFile", "AnswerFile", "vmodl.DynamicData", "vim.version.version7", [["userInput", "vim.profile.DeferredPolicyOptionParameter[]", "vim.version.version7", {:optional => true}], ["createdTime", "vmodl.DateTime", "vim.version.version7"], ["modifiedTime", "vmodl.DateTime", "vim.version.version7"]])
    create_data_type("vim.profile.host.AnswerFileStatusResult", "AnswerFileStatusResult", "vmodl.DynamicData", "vim.version.version7", [["checkedTime", "vmodl.DateTime", "vim.version.version7"], ["host", "vim.HostSystem", "vim.version.version7"], ["status", "string", "vim.version.version7"], ["error", "vim.profile.host.AnswerFileStatusResult.AnswerFileStatusError[]", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.profile.host.AnswerFileStatusResult.AnswerFileStatusError", "AnswerFileStatusError", "vmodl.DynamicData", "vim.version.version7", [["userInputPath", "vim.profile.ProfilePropertyPath", "vim.version.version7"], ["errMsg", "vmodl.LocalizableMessage", "vim.version.version7"]])
    create_data_type("vim.profile.host.ExecuteResult", "ProfileExecuteResult", "vmodl.DynamicData", "vim.version.version5", [["status", "string", "vim.version.version5"], ["configSpec", "vim.host.ConfigSpec", "vim.version.version5", {:optional => true}], ["inapplicablePath", "vmodl.PropertyPath[]", "vim.version.version5", {:optional => true}], ["requireInput", "vim.profile.DeferredPolicyOptionParameter[]", "vim.version.version5", {:optional => true}], ["error", "vim.profile.host.ExecuteResult.ExecuteError[]", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.profile.host.ExecuteResult.Status", "ProfileExecuteResultStatus", "vim.version.version5", ["success", "needInput", "error"])
    create_data_type("vim.profile.host.ExecuteResult.ExecuteError", "ProfileExecuteError", "vmodl.DynamicData", "vim.version.version5", [["path", "vim.profile.ProfilePropertyPath", "vim.version.version5", {:optional => true}], ["message", "vmodl.LocalizableMessage", "vim.version.version5"]])
    create_data_type("vim.profile.host.HostApplyProfile", "HostApplyProfile", "vim.profile.ApplyProfile", "vim.version.version5", [["memory", "vim.profile.host.HostMemoryProfile", "vim.version.version5", {:optional => true}], ["storage", "vim.profile.host.StorageProfile", "vim.version.version5", {:optional => true}], ["network", "vim.profile.host.NetworkProfile", "vim.version.version5", {:optional => true}], ["datetime", "vim.profile.host.DateTimeProfile", "vim.version.version5", {:optional => true}], ["firewall", "vim.profile.host.FirewallProfile", "vim.version.version5", {:optional => true}], ["security", "vim.profile.host.SecurityProfile", "vim.version.version5", {:optional => true}], ["service", "vim.profile.host.ServiceProfile[]", "vim.version.version5", {:optional => true}], ["option", "vim.profile.host.OptionProfile[]", "vim.version.version5", {:optional => true}], ["userAccount", "vim.profile.host.UserProfile[]", "vim.version.version5", {:optional => true}], ["usergroupAccount", "vim.profile.host.UserGroupProfile[]", "vim.version.version5", {:optional => true}], ["authentication", "vim.profile.host.AuthenticationProfile", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.profile.host.PhysicalNicProfile", "PhysicalNicProfile", "vim.profile.ApplyProfile", "vim.version.version5", [["key", "string", "vim.version.version5"]])
    create_data_type("vim.profile.host.HostMemoryProfile", "HostMemoryProfile", "vim.profile.ApplyProfile", "vim.version.version5", nil)
    create_data_type("vim.profile.host.UserProfile", "UserProfile", "vim.profile.ApplyProfile", "vim.version.version5", [["key", "string", "vim.version.version5"]])
    create_data_type("vim.profile.host.UserGroupProfile", "UserGroupProfile", "vim.profile.ApplyProfile", "vim.version.version5", [["key", "string", "vim.version.version5"]])
    create_data_type("vim.profile.host.SecurityProfile", "SecurityProfile", "vim.profile.ApplyProfile", "vim.version.version5", [["permission", "vim.profile.host.PermissionProfile[]", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.profile.host.OptionProfile", "OptionProfile", "vim.profile.ApplyProfile", "vim.version.version5", [["key", "string", "vim.version.version5"]])
    create_data_type("vim.profile.host.DateTimeProfile", "DateTimeProfile", "vim.profile.ApplyProfile", "vim.version.version5", nil)
    create_data_type("vim.profile.host.ServiceProfile", "ServiceProfile", "vim.profile.ApplyProfile", "vim.version.version5", [["key", "string", "vim.version.version5"]])
    create_data_type("vim.profile.host.FirewallProfile", "FirewallProfile", "vim.profile.ApplyProfile", "vim.version.version5", [["ruleset", "vim.profile.host.FirewallProfile.RulesetProfile[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.profile.host.FirewallProfile.RulesetProfile", "FirewallProfileRulesetProfile", "vim.profile.ApplyProfile", "vim.version.version5", [["key", "string", "vim.version.version5"]])
    create_data_type("vim.profile.host.NasStorageProfile", "NasStorageProfile", "vim.profile.ApplyProfile", "vim.version.version5", [["key", "string", "vim.version.version5"]])
    create_data_type("vim.profile.host.StorageProfile", "StorageProfile", "vim.profile.ApplyProfile", "vim.version.version5", [["nasStorage", "vim.profile.host.NasStorageProfile[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.profile.host.NetworkProfile", "NetworkProfile", "vim.profile.ApplyProfile", "vim.version.version5", [["vswitch", "vim.profile.host.VirtualSwitchProfile[]", "vim.version.version5", {:optional => true}], ["vmPortGroup", "vim.profile.host.VmPortGroupProfile[]", "vim.version.version5", {:optional => true}], ["hostPortGroup", "vim.profile.host.HostPortGroupProfile[]", "vim.version.version5", {:optional => true}], ["serviceConsolePortGroup", "vim.profile.host.ServiceConsolePortGroupProfile[]", "vim.version.version5", {:optional => true}], ["dnsConfig", "vim.profile.host.NetworkProfile.DnsConfigProfile", "vim.version.version5", {:optional => true}], ["ipRouteConfig", "vim.profile.host.IpRouteProfile", "vim.version.version5", {:optional => true}], ["consoleIpRouteConfig", "vim.profile.host.IpRouteProfile", "vim.version.version5", {:optional => true}], ["pnic", "vim.profile.host.PhysicalNicProfile[]", "vim.version.version5", {:optional => true}], ["dvswitch", "vim.profile.host.DvsProfile[]", "vim.version.version5", {:optional => true}], ["dvsServiceConsoleNic", "vim.profile.host.DvsServiceConsoleVNicProfile[]", "vim.version.version5", {:optional => true}], ["dvsHostNic", "vim.profile.host.DvsHostVNicProfile[]", "vim.version.version5", {:optional => true}], ["netStackInstance", "vim.profile.host.NetStackInstanceProfile[]", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.profile.host.NetworkProfile.DnsConfigProfile", "NetworkProfileDnsConfigProfile", "vim.profile.ApplyProfile", "vim.version.version5", nil)
    create_data_type("vim.profile.host.DvsVNicProfile", "DvsVNicProfile", "vim.profile.ApplyProfile", "vim.version.version5", [["key", "string", "vim.version.version5"], ["ipConfig", "vim.profile.host.IpAddressProfile", "vim.version.version5"]])
    create_data_type("vim.profile.host.DvsServiceConsoleVNicProfile", "DvsServiceConsoleVNicProfile", "vim.profile.host.DvsVNicProfile", "vim.version.version5", nil)
    create_data_type("vim.profile.host.DvsHostVNicProfile", "DvsHostVNicProfile", "vim.profile.host.DvsVNicProfile", "vim.version.version5", nil)
    create_data_type("vim.profile.host.DvsProfile", "DvsProfile", "vim.profile.ApplyProfile", "vim.version.version5", [["key", "string", "vim.version.version5"], ["name", "string", "vim.version.version5"], ["uplink", "vim.profile.host.PnicUplinkProfile[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.profile.host.PnicUplinkProfile", "PnicUplinkProfile", "vim.profile.ApplyProfile", "vim.version.version5", [["key", "string", "vim.version.version5"]])
    create_data_type("vim.profile.host.IpRouteProfile", "IpRouteProfile", "vim.profile.ApplyProfile", "vim.version.version5", [["staticRoute", "vim.profile.host.StaticRouteProfile[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.profile.host.StaticRouteProfile", "StaticRouteProfile", "vim.profile.ApplyProfile", "vim.version.version5", [["key", "string", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.profile.host.VirtualSwitchProfile", "VirtualSwitchProfile", "vim.profile.ApplyProfile", "vim.version.version5", [["key", "string", "vim.version.version5"], ["name", "string", "vim.version.version5"], ["link", "vim.profile.host.VirtualSwitchProfile.LinkProfile", "vim.version.version5"], ["numPorts", "vim.profile.host.VirtualSwitchProfile.NumPortsProfile", "vim.version.version5"], ["networkPolicy", "vim.profile.host.NetworkPolicyProfile", "vim.version.version5"]])
    create_data_type("vim.profile.host.VirtualSwitchProfile.LinkProfile", "LinkProfile", "vim.profile.ApplyProfile", "vim.version.version5", nil)
    create_data_type("vim.profile.host.VirtualSwitchProfile.NumPortsProfile", "NumPortsProfile", "vim.profile.ApplyProfile", "vim.version.version5", nil)
    create_data_type("vim.profile.host.NetStackInstanceProfile", "NetStackInstanceProfile", "vim.profile.ApplyProfile", "vim.version.version9", [["key", "string", "vim.version.version9"], ["dnsConfig", "vim.profile.host.NetworkProfile.DnsConfigProfile", "vim.version.version9"], ["ipRouteConfig", "vim.profile.host.IpRouteProfile", "vim.version.version9"]])
    create_data_type("vim.profile.host.PortGroupProfile", "PortGroupProfile", "vim.profile.ApplyProfile", "vim.version.version5", [["key", "string", "vim.version.version5"], ["name", "string", "vim.version.version5"], ["vlan", "vim.profile.host.PortGroupProfile.VlanProfile", "vim.version.version5"], ["vswitch", "vim.profile.host.PortGroupProfile.VirtualSwitchSelectionProfile", "vim.version.version5"], ["networkPolicy", "vim.profile.host.NetworkPolicyProfile", "vim.version.version5"]])
    create_data_type("vim.profile.host.PortGroupProfile.VlanProfile", "VlanProfile", "vim.profile.ApplyProfile", "vim.version.version5", nil)
    create_data_type("vim.profile.host.PortGroupProfile.VirtualSwitchSelectionProfile", "VirtualSwitchSelectionProfile", "vim.profile.ApplyProfile", "vim.version.version5", nil)
    create_data_type("vim.profile.host.VmPortGroupProfile", "VmPortGroupProfile", "vim.profile.host.PortGroupProfile", "vim.version.version5", nil)
    create_data_type("vim.profile.host.HostPortGroupProfile", "HostPortGroupProfile", "vim.profile.host.PortGroupProfile", "vim.version.version5", [["ipConfig", "vim.profile.host.IpAddressProfile", "vim.version.version5"]])
    create_data_type("vim.profile.host.ServiceConsolePortGroupProfile", "ServiceConsolePortGroupProfile", "vim.profile.host.PortGroupProfile", "vim.version.version5", [["ipConfig", "vim.profile.host.IpAddressProfile", "vim.version.version5"]])
    create_data_type("vim.profile.host.NetworkPolicyProfile", "NetworkPolicyProfile", "vim.profile.ApplyProfile", "vim.version.version5", nil)
    create_data_type("vim.profile.host.IpAddressProfile", "IpAddressProfile", "vim.profile.ApplyProfile", "vim.version.version5", nil)
    create_data_type("vim.profile.host.AuthenticationProfile", "AuthenticationProfile", "vim.profile.ApplyProfile", "vim.version.version6", [["activeDirectory", "vim.profile.host.ActiveDirectoryProfile", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.profile.host.ActiveDirectoryProfile", "ActiveDirectoryProfile", "vim.profile.ApplyProfile", "vim.version.version6", nil)
    create_data_type("vim.profile.host.PermissionProfile", "PermissionProfile", "vim.profile.ApplyProfile", "vim.version.version6", [["key", "string", "vim.version.version6"]])
    create_managed_type("vim.profile.host.HostProfile", "HostProfile", "vim.profile.Profile", "vim.version.version5", [["referenceHost", "vim.HostSystem", "vim.version.version5", {:optional => true}, nil]], [["updateReferenceHost", "UpdateReferenceHost", "vim.version.version5", [["host", "vim.HostSystem", "vim.version.version5", {:optional => true}, nil]], [{}, "void", "void"], "Profile.Edit", nil], ["update", "UpdateHostProfile", "vim.version.version5", [["config", "vim.profile.host.HostProfile.ConfigSpec", "vim.version.version5", {}, nil]], [{}, "void", "void"], "Profile.Edit", ["vim.fault.DuplicateName", "vim.fault.ProfileUpdateFailed"]], ["execute", "ExecuteHostProfile", "vim.version.version5", [["host", "vim.HostSystem", "vim.version.version5", {}, nil], ["deferredParam", "vim.profile.DeferredPolicyOptionParameter[]", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.profile.host.ExecuteResult", "vim.profile.host.ExecuteResult"], "System.View", nil]])
    create_data_type("vim.profile.host.HostProfile.ConfigInfo", "HostProfileConfigInfo", "vim.profile.Profile.ConfigInfo", "vim.version.version5", [["applyProfile", "vim.profile.host.HostApplyProfile", "vim.version.version5", {:optional => true}], ["defaultComplyProfile", "vim.profile.ComplianceProfile", "vim.version.version5", {:optional => true}], ["defaultComplyLocator", "vim.profile.ComplianceLocator[]", "vim.version.version5", {:optional => true}], ["customComplyProfile", "vim.profile.ComplianceProfile", "vim.version.version5", {:optional => true}], ["disabledExpressionList", "string[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.profile.host.HostProfile.ConfigSpec", "HostProfileConfigSpec", "vim.profile.Profile.CreateSpec", "vim.version.version5", nil)
    create_data_type("vim.profile.host.HostProfile.SerializedHostProfileSpec", "HostProfileSerializedHostProfileSpec", "vim.profile.Profile.SerializedCreateSpec", "vim.version.version7", [["validatorHost", "vim.HostSystem", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.profile.host.HostProfile.CompleteConfigSpec", "HostProfileCompleteConfigSpec", "vim.profile.host.HostProfile.ConfigSpec", "vim.version.version5", [["applyProfile", "vim.profile.host.HostApplyProfile", "vim.version.version5", {:optional => true}], ["customComplyProfile", "vim.profile.ComplianceProfile", "vim.version.version5", {:optional => true}], ["disabledExpressionListChanged", "boolean", "vim.version.version5"], ["disabledExpressionList", "string[]", "vim.version.version5", {:optional => true}], ["validatorHost", "vim.HostSystem", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.profile.host.HostProfile.HostBasedConfigSpec", "HostProfileHostBasedConfigSpec", "vim.profile.host.HostProfile.ConfigSpec", "vim.version.version5", [["host", "vim.HostSystem", "vim.version.version5"], ["useHostProfileEngine", "boolean", "vim.version.version7", {:optional => true}]])
    create_managed_type("vim.scheduler.ScheduledTask", "ScheduledTask", "vim.ExtensibleManagedObject", "vim.version.version1", [["info", "vim.scheduler.ScheduledTaskInfo", "vim.version.version1", {}, nil]], [["remove", "RemoveScheduledTask", "vim.version.version1", [], [{}, "void", "void"], "ScheduledTask.Delete", ["vim.fault.InvalidState"]], ["reconfigure", "ReconfigureScheduledTask", "vim.version.version1", [["spec", "vim.scheduler.ScheduledTaskSpec", "vim.version.version1", {}, nil]], [{}, "void", "void"], "ScheduledTask.Edit", ["vim.fault.InvalidState", "vim.fault.InvalidName", "vim.fault.DuplicateName"]], ["run", "RunScheduledTask", "vim.version.version1", [], [{}, "void", "void"], "ScheduledTask.Run", ["vim.fault.InvalidState"]]])
    create_data_type("vim.scheduler.ScheduledTaskDescription", "ScheduledTaskDescription", "vmodl.DynamicData", "vim.version.version1", [["action", "vim.TypeDescription[]", "vim.version.version1"], ["schedulerInfo", "vim.scheduler.ScheduledTaskDescription.SchedulerDetail[]", "vim.version.version1"], ["state", "vim.ElementDescription[]", "vim.version.version1"], ["dayOfWeek", "vim.ElementDescription[]", "vim.version.version1"], ["weekOfMonth", "vim.ElementDescription[]", "vim.version.version1"]])
    create_data_type("vim.scheduler.ScheduledTaskDescription.SchedulerDetail", "ScheduledTaskDetail", "vim.TypeDescription", "vim.version.version1", [["frequency", "string", "vim.version.version1"]])
    create_managed_type("vim.scheduler.ScheduledTaskManager", "ScheduledTaskManager", "vmodl.ManagedObject", "vim.version.version1", [["scheduledTask", "vim.scheduler.ScheduledTask[]", "vim.version.version1", {:optional => true}, "System.View"], ["description", "vim.scheduler.ScheduledTaskDescription", "vim.version.version1", {}, "System.View"]], [["create", "CreateScheduledTask", "vim.version.version1", [["entity", "vim.ManagedEntity", "vim.version.version1", {}, "ScheduledTask.Create"], ["spec", "vim.scheduler.ScheduledTaskSpec", "vim.version.version1", {}, nil]], [{}, "vim.scheduler.ScheduledTask", "vim.scheduler.ScheduledTask"], nil, ["vim.fault.InvalidName", "vim.fault.DuplicateName"]], ["retrieveEntityScheduledTask", "RetrieveEntityScheduledTask", "vim.version.version1", [["entity", "vim.ManagedEntity", "vim.version.version1", {:optional => true}, nil]], [{:optional => true}, "vim.scheduler.ScheduledTask[]", "vim.scheduler.ScheduledTask[]"], "System.View", nil], ["createObjectScheduledTask", "CreateObjectScheduledTask", "vim.version.version5", [["obj", "vmodl.ManagedObject", "vim.version.version5", {}, "ScheduledTask.Create"], ["spec", "vim.scheduler.ScheduledTaskSpec", "vim.version.version5", {}, nil]], [{}, "vim.scheduler.ScheduledTask", "vim.scheduler.ScheduledTask"], nil, ["vim.fault.InvalidName", "vim.fault.DuplicateName"]], ["retrieveObjectScheduledTask", "RetrieveObjectScheduledTask", "vim.version.version5", [["obj", "vmodl.ManagedObject", "vim.version.version5", {:optional => true}, nil]], [{:optional => true}, "vim.scheduler.ScheduledTask[]", "vim.scheduler.ScheduledTask[]"], "System.View", nil]])
    create_data_type("vim.scheduler.TaskScheduler", "TaskScheduler", "vmodl.DynamicData", "vim.version.version1", [["activeTime", "vmodl.DateTime", "vim.version.version1", {:optional => true}], ["expireTime", "vmodl.DateTime", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.scheduler.AfterStartupTaskScheduler", "AfterStartupTaskScheduler", "vim.scheduler.TaskScheduler", "vim.version.version1", [["minute", "int", "vim.version.version1"]])
    create_data_type("vim.scheduler.OnceTaskScheduler", "OnceTaskScheduler", "vim.scheduler.TaskScheduler", "vim.version.version1", [["runAt", "vmodl.DateTime", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.scheduler.RecurrentTaskScheduler", "RecurrentTaskScheduler", "vim.scheduler.TaskScheduler", "vim.version.version1", [["interval", "int", "vim.version.version1"]])
    create_data_type("vim.scheduler.HourlyTaskScheduler", "HourlyTaskScheduler", "vim.scheduler.RecurrentTaskScheduler", "vim.version.version1", [["minute", "int", "vim.version.version1"]])
    create_data_type("vim.scheduler.DailyTaskScheduler", "DailyTaskScheduler", "vim.scheduler.HourlyTaskScheduler", "vim.version.version1", [["hour", "int", "vim.version.version1"]])
    create_data_type("vim.scheduler.WeeklyTaskScheduler", "WeeklyTaskScheduler", "vim.scheduler.DailyTaskScheduler", "vim.version.version1", [["sunday", "boolean", "vim.version.version1"], ["monday", "boolean", "vim.version.version1"], ["tuesday", "boolean", "vim.version.version1"], ["wednesday", "boolean", "vim.version.version1"], ["thursday", "boolean", "vim.version.version1"], ["friday", "boolean", "vim.version.version1"], ["saturday", "boolean", "vim.version.version1"]])
    create_data_type("vim.scheduler.MonthlyTaskScheduler", "MonthlyTaskScheduler", "vim.scheduler.DailyTaskScheduler", "vim.version.version1", nil)
    create_data_type("vim.scheduler.MonthlyByDayTaskScheduler", "MonthlyByDayTaskScheduler", "vim.scheduler.MonthlyTaskScheduler", "vim.version.version1", [["day", "int", "vim.version.version1"]])
    create_data_type("vim.scheduler.MonthlyByWeekdayTaskScheduler", "MonthlyByWeekdayTaskScheduler", "vim.scheduler.MonthlyTaskScheduler", "vim.version.version1", [["offset", "vim.scheduler.MonthlyByWeekdayTaskScheduler.WeekOfMonth", "vim.version.version1"], ["weekday", "vim.scheduler.MonthlyByWeekdayTaskScheduler.DayOfWeek", "vim.version.version1"]])
    create_enum_type("vim.scheduler.MonthlyByWeekdayTaskScheduler.DayOfWeek", "DayOfWeek", "vim.version.version1", ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"])
    create_enum_type("vim.scheduler.MonthlyByWeekdayTaskScheduler.WeekOfMonth", "WeekOfMonth", "vim.version.version1", ["first", "second", "third", "fourth", "last"])
    create_data_type("vim.scheduler.ScheduledTaskSpec", "ScheduledTaskSpec", "vmodl.DynamicData", "vim.version.version1", [["name", "string", "vim.version.version1"], ["description", "string", "vim.version.version1"], ["enabled", "boolean", "vim.version.version1"], ["scheduler", "vim.scheduler.TaskScheduler", "vim.version.version1"], ["action", "vim.action.Action", "vim.version.version1"], ["notification", "string", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.storageDrs.ApplyRecommendationResult", "ApplyStorageRecommendationResult", "vmodl.DynamicData", "vim.version.version7", [["vm", "vim.VirtualMachine", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.storageDrs.ConfigInfo", "StorageDrsConfigInfo", "vmodl.DynamicData", "vim.version.version7", [["podConfig", "vim.storageDrs.PodConfigInfo", "vim.version.version7"], ["vmConfig", "vim.storageDrs.VmConfigInfo[]", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.storageDrs.ConfigSpec", "StorageDrsConfigSpec", "vmodl.DynamicData", "vim.version.version7", [["podConfigSpec", "vim.storageDrs.PodConfigSpec", "vim.version.version7", {:optional => true}], ["vmConfigSpec", "vim.storageDrs.VmConfigSpec[]", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.storageDrs.VmConfigSpec", "StorageDrsVmConfigSpec", "vim.option.ArrayUpdateSpec", "vim.version.version7", [["info", "vim.storageDrs.VmConfigInfo", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.storageDrs.PodConfigInfo", "StorageDrsPodConfigInfo", "vmodl.DynamicData", "vim.version.version7", [["enabled", "boolean", "vim.version.version7"], ["ioLoadBalanceEnabled", "boolean", "vim.version.version7"], ["defaultVmBehavior", "string", "vim.version.version7"], ["loadBalanceInterval", "int", "vim.version.version7", {:optional => true}], ["defaultIntraVmAffinity", "boolean", "vim.version.version7", {:optional => true}], ["spaceLoadBalanceConfig", "vim.storageDrs.SpaceLoadBalanceConfig", "vim.version.version7", {:optional => true}], ["ioLoadBalanceConfig", "vim.storageDrs.IoLoadBalanceConfig", "vim.version.version7", {:optional => true}], ["rule", "vim.cluster.RuleInfo[]", "vim.version.version7", {:optional => true}], ["option", "vim.option.OptionValue[]", "vim.version.version7", {:optional => true}]])
    create_enum_type("vim.storageDrs.PodConfigInfo.Behavior", "StorageDrsPodConfigInfoBehavior", "vim.version.version7", ["manual", "automated"])
    create_data_type("vim.storageDrs.SpaceLoadBalanceConfig", "StorageDrsSpaceLoadBalanceConfig", "vmodl.DynamicData", "vim.version.version7", [["spaceUtilizationThreshold", "int", "vim.version.version7", {:optional => true}], ["minSpaceUtilizationDifference", "int", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.storageDrs.IoLoadBalanceConfig", "StorageDrsIoLoadBalanceConfig", "vmodl.DynamicData", "vim.version.version7", [["ioLatencyThreshold", "int", "vim.version.version7", {:optional => true}], ["ioLoadImbalanceThreshold", "int", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.storageDrs.PodConfigSpec", "StorageDrsPodConfigSpec", "vmodl.DynamicData", "vim.version.version7", [["enabled", "boolean", "vim.version.version7", {:optional => true}], ["ioLoadBalanceEnabled", "boolean", "vim.version.version7", {:optional => true}], ["defaultVmBehavior", "string", "vim.version.version7", {:optional => true}], ["loadBalanceInterval", "int", "vim.version.version7", {:optional => true}], ["defaultIntraVmAffinity", "boolean", "vim.version.version7", {:optional => true}], ["spaceLoadBalanceConfig", "vim.storageDrs.SpaceLoadBalanceConfig", "vim.version.version7", {:optional => true}], ["ioLoadBalanceConfig", "vim.storageDrs.IoLoadBalanceConfig", "vim.version.version7", {:optional => true}], ["rule", "vim.cluster.RuleSpec[]", "vim.version.version7", {:optional => true}], ["option", "vim.storageDrs.OptionSpec[]", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.storageDrs.OptionSpec", "StorageDrsOptionSpec", "vim.option.ArrayUpdateSpec", "vim.version.version7", [["option", "vim.option.OptionValue", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.storageDrs.StorageMigrationAction", "StorageMigrationAction", "vim.cluster.Action", "vim.version.version7", [["vm", "vim.VirtualMachine", "vim.version.version7"], ["relocateSpec", "vim.vm.RelocateSpec", "vim.version.version7"], ["source", "vim.Datastore", "vim.version.version7"], ["destination", "vim.Datastore", "vim.version.version7"], ["sizeTransferred", "long", "vim.version.version7"], ["spaceUtilSrcBefore", "float", "vim.version.version7", {:optional => true}], ["spaceUtilDstBefore", "float", "vim.version.version7", {:optional => true}], ["spaceUtilSrcAfter", "float", "vim.version.version7", {:optional => true}], ["spaceUtilDstAfter", "float", "vim.version.version7", {:optional => true}], ["ioLatencySrcBefore", "float", "vim.version.version7", {:optional => true}], ["ioLatencyDstBefore", "float", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.storageDrs.StoragePlacementAction", "StoragePlacementAction", "vim.cluster.Action", "vim.version.version7", [["vm", "vim.VirtualMachine", "vim.version.version7", {:optional => true}], ["relocateSpec", "vim.vm.RelocateSpec", "vim.version.version7"], ["destination", "vim.Datastore", "vim.version.version7"], ["spaceUtilBefore", "float", "vim.version.version7", {:optional => true}], ["spaceUtilAfter", "float", "vim.version.version7", {:optional => true}], ["ioLatencyBefore", "float", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.storageDrs.StoragePlacementResult", "StoragePlacementResult", "vmodl.DynamicData", "vim.version.version7", [["recommendations", "vim.cluster.Recommendation[]", "vim.version.version7", {:optional => true}], ["drsFault", "vim.cluster.DrsFaults", "vim.version.version7", {:optional => true}], ["task", "vim.Task", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.storageDrs.VmConfigInfo", "StorageDrsVmConfigInfo", "vmodl.DynamicData", "vim.version.version7", [["vm", "vim.VirtualMachine", "vim.version.version7", {:optional => true}], ["enabled", "boolean", "vim.version.version7", {:optional => true}], ["behavior", "string", "vim.version.version7", {:optional => true}], ["intraVmAffinity", "boolean", "vim.version.version7", {:optional => true}], ["intraVmAntiAffinity", "vim.storageDrs.VirtualDiskAntiAffinityRuleSpec", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.vApp.CloneSpec", "VAppCloneSpec", "vmodl.DynamicData", "vim.version.version5", [["location", "vim.Datastore", "vim.version.version5"], ["host", "vim.HostSystem", "vim.version.version5", {:optional => true}], ["resourceSpec", "vim.ResourceConfigSpec", "vim.version.version5", {:optional => true}], ["vmFolder", "vim.Folder", "vim.version.version5", {:optional => true}], ["networkMapping", "vim.vApp.CloneSpec.NetworkMappingPair[]", "vim.version.version5", {:optional => true}], ["property", "vim.KeyValue[]", "vim.version.version5", {:optional => true}], ["resourceMapping", "vim.vApp.CloneSpec.ResourceMap[]", "vim.version.version6", {:optional => true}], ["provisioning", "string", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.vApp.CloneSpec.NetworkMappingPair", "VAppCloneSpecNetworkMappingPair", "vmodl.DynamicData", "vim.version.version5", [["source", "vim.Network", "vim.version.version5"], ["destination", "vim.Network", "vim.version.version5"]])
    create_data_type("vim.vApp.CloneSpec.ResourceMap", "VAppCloneSpecResourceMap", "vmodl.DynamicData", "vim.version.version6", [["source", "vim.ManagedEntity", "vim.version.version6"], ["parent", "vim.ResourcePool", "vim.version.version6", {:optional => true}], ["resourceSpec", "vim.ResourceConfigSpec", "vim.version.version6", {:optional => true}], ["location", "vim.Datastore", "vim.version.version6", {:optional => true}]])
    create_enum_type("vim.vApp.CloneSpec.ProvisioningType", "VAppCloneSpecProvisioningType", "vim.version.version6", ["sameAsSource", "thin", "thick"])
    create_data_type("vim.vApp.EntityConfigInfo", "VAppEntityConfigInfo", "vmodl.DynamicData", "vim.version.version5", [["key", "vim.ManagedEntity", "vim.version.version5", {:optional => true}], ["tag", "string", "vim.version.version5", {:optional => true}], ["startOrder", "int", "vim.version.version5", {:optional => true}], ["startDelay", "int", "vim.version.version5", {:optional => true}], ["waitingForGuest", "boolean", "vim.version.version5", {:optional => true}], ["startAction", "string", "vim.version.version5", {:optional => true}], ["stopDelay", "int", "vim.version.version5", {:optional => true}], ["stopAction", "string", "vim.version.version5", {:optional => true}], ["destroyWithParent", "boolean", "vim.version.version6", {:optional => true}]])
    create_enum_type("vim.vApp.EntityConfigInfo.Action", "VAppAutoStartAction", "vim.version.version5", ["none", "powerOn", "powerOff", "guestShutdown", "suspend"])
    create_data_type("vim.vApp.IPAssignmentInfo", "VAppIPAssignmentInfo", "vmodl.DynamicData", "vim.version.version5", [["supportedAllocationScheme", "string[]", "vim.version.version5", {:optional => true}], ["ipAllocationPolicy", "string", "vim.version.version5", {:optional => true}], ["supportedIpProtocol", "string[]", "vim.version.version5", {:optional => true}], ["ipProtocol", "string", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.vApp.IPAssignmentInfo.IpAllocationPolicy", "VAppIPAssignmentInfoIpAllocationPolicy", "vim.version.version5", ["dhcpPolicy", "transientPolicy", "fixedPolicy", "fixedAllocatedPolicy"])
    create_enum_type("vim.vApp.IPAssignmentInfo.AllocationSchemes", "VAppIPAssignmentInfoAllocationSchemes", "vim.version.version5", ["dhcp", "ovfenv"])
    create_enum_type("vim.vApp.IPAssignmentInfo.Protocols", "VAppIPAssignmentInfoProtocols", "vim.version.version5", ["IPv4", "IPv6"])
    create_data_type("vim.vApp.IpPool", "IpPool", "vmodl.DynamicData", "vim.version.version5", [["id", "int", "vim.version.version5", {:optional => true}], ["name", "string", "vim.version.version5", {:optional => true}], ["ipv4Config", "vim.vApp.IpPool.IpPoolConfigInfo", "vim.version.version5", {:optional => true}], ["ipv6Config", "vim.vApp.IpPool.IpPoolConfigInfo", "vim.version.version5", {:optional => true}], ["dnsDomain", "string", "vim.version.version5", {:optional => true}], ["dnsSearchPath", "string", "vim.version.version5", {:optional => true}], ["hostPrefix", "string", "vim.version.version5", {:optional => true}], ["httpProxy", "string", "vim.version.version5", {:optional => true}], ["networkAssociation", "vim.vApp.IpPool.Association[]", "vim.version.version5", {:optional => true}], ["availableIpv4Addresses", "int", "vim.version.version8", {:optional => true}], ["availableIpv6Addresses", "int", "vim.version.version8", {:optional => true}], ["allocatedIpv4Addresses", "int", "vim.version.version8", {:optional => true}], ["allocatedIpv6Addresses", "int", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.vApp.IpPool.IpPoolConfigInfo", "IpPoolIpPoolConfigInfo", "vmodl.DynamicData", "vim.version.version5", [["subnetAddress", "string", "vim.version.version5", {:optional => true}], ["netmask", "string", "vim.version.version5", {:optional => true}], ["gateway", "string", "vim.version.version5", {:optional => true}], ["range", "string", "vim.version.version5", {:optional => true}], ["dns", "string[]", "vim.version.version5", {:optional => true}], ["dhcpServerAvailable", "boolean", "vim.version.version5", {:optional => true}], ["ipPoolEnabled", "boolean", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.vApp.IpPool.Association", "IpPoolAssociation", "vmodl.DynamicData", "vim.version.version5", [["network", "vim.Network", "vim.version.version5", {:optional => true}], ["networkName", "string", "vim.version.version5"]])
    create_data_type("vim.vApp.OvfSectionInfo", "VAppOvfSectionInfo", "vmodl.DynamicData", "vim.version.version5", [["key", "int", "vim.version.version5", {:optional => true}], ["namespace", "string", "vim.version.version5", {:optional => true}], ["type", "string", "vim.version.version5", {:optional => true}], ["atEnvelopeLevel", "boolean", "vim.version.version5", {:optional => true}], ["contents", "string", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.vApp.ProductInfo", "VAppProductInfo", "vmodl.DynamicData", "vim.version.version5", [["key", "int", "vim.version.version5"], ["classId", "string", "vim.version.version5", {:optional => true}], ["instanceId", "string", "vim.version.version5", {:optional => true}], ["name", "string", "vim.version.version5", {:optional => true}], ["vendor", "string", "vim.version.version5", {:optional => true}], ["version", "string", "vim.version.version5", {:optional => true}], ["fullVersion", "string", "vim.version.version5", {:optional => true}], ["vendorUrl", "string", "vim.version.version5", {:optional => true}], ["productUrl", "string", "vim.version.version5", {:optional => true}], ["appUrl", "string", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.vApp.PropertyInfo", "VAppPropertyInfo", "vmodl.DynamicData", "vim.version.version5", [["key", "int", "vim.version.version5"], ["classId", "string", "vim.version.version5", {:optional => true}], ["instanceId", "string", "vim.version.version5", {:optional => true}], ["id", "string", "vim.version.version5", {:optional => true}], ["category", "string", "vim.version.version5", {:optional => true}], ["label", "string", "vim.version.version5", {:optional => true}], ["type", "string", "vim.version.version5", {:optional => true}], ["typeReference", "string", "vim.version.version8", {:optional => true}], ["userConfigurable", "boolean", "vim.version.version5", {:optional => true}], ["defaultValue", "string", "vim.version.version5", {:optional => true}], ["value", "string", "vim.version.version5", {:optional => true}], ["description", "string", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.vApp.VmConfigInfo", "VmConfigInfo", "vmodl.DynamicData", "vim.version.version5", [["product", "vim.vApp.ProductInfo[]", "vim.version.version5", {:optional => true}], ["property", "vim.vApp.PropertyInfo[]", "vim.version.version5", {:optional => true}], ["ipAssignment", "vim.vApp.IPAssignmentInfo", "vim.version.version5"], ["eula", "string[]", "vim.version.version5", {:optional => true}], ["ovfSection", "vim.vApp.OvfSectionInfo[]", "vim.version.version5", {:optional => true}], ["ovfEnvironmentTransport", "string[]", "vim.version.version5", {:optional => true}], ["installBootRequired", "boolean", "vim.version.version5"], ["installBootStopDelay", "int", "vim.version.version5"]])
    create_data_type("vim.vApp.VmConfigSpec", "VmConfigSpec", "vmodl.DynamicData", "vim.version.version5", [["product", "vim.vApp.ProductSpec[]", "vim.version.version5", {:optional => true}], ["property", "vim.vApp.PropertySpec[]", "vim.version.version5", {:optional => true}], ["ipAssignment", "vim.vApp.IPAssignmentInfo", "vim.version.version5", {:optional => true}], ["eula", "string[]", "vim.version.version5", {:optional => true}], ["ovfSection", "vim.vApp.OvfSectionSpec[]", "vim.version.version5", {:optional => true}], ["ovfEnvironmentTransport", "string[]", "vim.version.version5", {:optional => true}], ["installBootRequired", "boolean", "vim.version.version5", {:optional => true}], ["installBootStopDelay", "int", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.vApp.ProductSpec", "VAppProductSpec", "vim.option.ArrayUpdateSpec", "vim.version.version5", [["info", "vim.vApp.ProductInfo", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.vApp.PropertySpec", "VAppPropertySpec", "vim.option.ArrayUpdateSpec", "vim.version.version5", [["info", "vim.vApp.PropertyInfo", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.vApp.OvfSectionSpec", "VAppOvfSectionSpec", "vim.option.ArrayUpdateSpec", "vim.version.version5", [["info", "vim.vApp.OvfSectionInfo", "vim.version.version5", {:optional => true}]])
    create_managed_type("vim.view.View", "View", "vmodl.ManagedObject", "vim.version.version2", nil, [["destroy", "DestroyView", "vim.version.version2", [], [{}, "void", "void"], "System.View", nil]])
    create_managed_type("vim.view.ViewManager", "ViewManager", "vmodl.ManagedObject", "vim.version.version2", [["viewList", "vim.view.View[]", "vim.version.version2", {:optional => true}, "System.View"]], [["createInventoryView", "CreateInventoryView", "vim.version.version2", [], [{}, "vim.view.InventoryView", "vim.view.InventoryView"], "System.View", nil], ["createContainerView", "CreateContainerView", "vim.version.version2", [["container", "vim.ManagedEntity", "vim.version.version2", {}, "System.View"], ["type", "vmodl.TypeName[]", "vim.version.version2", {:optional => true}, nil], ["recursive", "boolean", "vim.version.version2", {}, nil]], [{}, "vim.view.ContainerView", "vim.view.ContainerView"], "System.View", nil], ["createListView", "CreateListView", "vim.version.version2", [["obj", "vmodl.ManagedObject[]", "vim.version.version2", {:optional => true}, "System.View"]], [{}, "vim.view.ListView", "vim.view.ListView"], "System.View", nil], ["createListViewFromView", "CreateListViewFromView", "vim.version.version2", [["view", "vim.view.View", "vim.version.version2", {}, nil]], [{}, "vim.view.ListView", "vim.view.ListView"], "System.View", nil]])
    create_data_type("vim.vm.AffinityInfo", "VirtualMachineAffinityInfo", "vmodl.DynamicData", "vim.version.version1", [["affinitySet", "int[]", "vim.version.version1", {:optional => true}]])
    create_enum_type("vim.vm.BackupEventInfo.BackupEventType", "VirtualMachineBackupEventInfoBackupEventType", "vim.version.version4", ["reset", "requestorError", "requestorAbort", "providerAbort", "snapshotPrepare", "snapshotCommit", "requestorDone", "backupManifest", "writerError", "keepAlive"])
    create_data_type("vim.vm.BootOptions", "VirtualMachineBootOptions", "vmodl.DynamicData", "vim.version.version2", [["bootDelay", "long", "vim.version.version2", {:optional => true}], ["enterBIOSSetup", "boolean", "vim.version.version2", {:optional => true}], ["bootRetryEnabled", "boolean", "vim.version.version6", {:optional => true}], ["bootRetryDelay", "long", "vim.version.version6", {:optional => true}], ["bootOrder", "vim.vm.BootOptions.BootableDevice[]", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.vm.BootOptions.BootableDevice", "VirtualMachineBootOptionsBootableDevice", "vmodl.DynamicData", "vim.version.version7", nil)
    create_data_type("vim.vm.BootOptions.BootableDiskDevice", "VirtualMachineBootOptionsBootableDiskDevice", "vim.vm.BootOptions.BootableDevice", "vim.version.version7", [["deviceKey", "int", "vim.version.version7"]])
    create_data_type("vim.vm.BootOptions.BootableEthernetDevice", "VirtualMachineBootOptionsBootableEthernetDevice", "vim.vm.BootOptions.BootableDevice", "vim.version.version7", [["deviceKey", "int", "vim.version.version7"]])
    create_data_type("vim.vm.BootOptions.BootableFloppyDevice", "VirtualMachineBootOptionsBootableFloppyDevice", "vim.vm.BootOptions.BootableDevice", "vim.version.version7", nil)
    create_data_type("vim.vm.BootOptions.BootableCdromDevice", "VirtualMachineBootOptionsBootableCdromDevice", "vim.vm.BootOptions.BootableDevice", "vim.version.version7", nil)
    create_data_type("vim.vm.Capability", "VirtualMachineCapability", "vmodl.DynamicData", "vim.version.version1", [["snapshotOperationsSupported", "boolean", "vim.version.version1"], ["multipleSnapshotsSupported", "boolean", "vim.version.version1"], ["snapshotConfigSupported", "boolean", "vim.version.version1"], ["poweredOffSnapshotsSupported", "boolean", "vim.version.version1"], ["memorySnapshotsSupported", "boolean", "vim.version.version1"], ["revertToSnapshotSupported", "boolean", "vim.version.version1"], ["quiescedSnapshotsSupported", "boolean", "vim.version.version1"], ["disableSnapshotsSupported", "boolean", "vim.version.version2"], ["lockSnapshotsSupported", "boolean", "vim.version.version2"], ["consolePreferencesSupported", "boolean", "vim.version.version1"], ["cpuFeatureMaskSupported", "boolean", "vim.version.version1"], ["s1AcpiManagementSupported", "boolean", "vim.version.version1"], ["settingScreenResolutionSupported", "boolean", "vim.version.version1"], ["toolsAutoUpdateSupported", "boolean", "vim.version.version1"], ["vmNpivWwnSupported", "boolean", "vim.version.version2"], ["npivWwnOnNonRdmVmSupported", "boolean", "vim.version.version2"], ["vmNpivWwnDisableSupported", "boolean", "vim.version.version5"], ["vmNpivWwnUpdateSupported", "boolean", "vim.version.version5"], ["swapPlacementSupported", "boolean", "vim.version.version2"], ["toolsSyncTimeSupported", "boolean", "vim.version.version2"], ["virtualMmuUsageSupported", "boolean", "vim.version.version2"], ["diskSharesSupported", "boolean", "vim.version.version2"], ["bootOptionsSupported", "boolean", "vim.version.version2"], ["bootRetryOptionsSupported", "boolean", "vim.version.version6"], ["settingVideoRamSizeSupported", "boolean", "vim.version.version2"], ["settingDisplayTopologySupported", "boolean", "vim.version.version4"], ["recordReplaySupported", "boolean", "vim.version.version5"], ["changeTrackingSupported", "boolean", "vim.version.version5"], ["multipleCoresPerSocketSupported", "boolean", "vim.version.version7"], ["hostBasedReplicationSupported", "boolean", "vim.version.version7"], ["guestAutoLockSupported", "boolean", "vim.version.version7"], ["memoryReservationLockSupported", "boolean", "vim.version.version7"], ["featureRequirementSupported", "boolean", "vim.version.version8"], ["poweredOnMonitorTypeChangeSupported", "boolean", "vim.version.version8"], ["seSparseDiskSupported", "boolean", "vim.version.version8"], ["nestedHVSupported", "boolean", "vim.version.version8"], ["vPMCSupported", "boolean", "vim.version.version8"]])
    create_data_type("vim.vm.CloneSpec", "VirtualMachineCloneSpec", "vmodl.DynamicData", "vim.version.version1", [["location", "vim.vm.RelocateSpec", "vim.version.version1"], ["template", "boolean", "vim.version.version1"], ["config", "vim.vm.ConfigSpec", "vim.version.version1", {:optional => true}], ["customization", "vim.vm.customization.Specification", "vim.version.version1", {:optional => true}], ["powerOn", "boolean", "vim.version.version1"], ["snapshot", "vim.vm.Snapshot", "vim.version.version5", {:optional => true}], ["memory", "boolean", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.vm.ConfigInfo", "VirtualMachineConfigInfo", "vmodl.DynamicData", "vim.version.version1", [["changeVersion", "string", "vim.version.version1"], ["modified", "vmodl.DateTime", "vim.version.version1"], ["name", "string", "vim.version.version1"], ["guestFullName", "string", "vim.version.version1"], ["version", "string", "vim.version.version1"], ["uuid", "string", "vim.version.version1"], ["instanceUuid", "string", "vim.version.version5", {:optional => true}], ["npivNodeWorldWideName", "long[]", "vim.version.version2", {:optional => true}], ["npivPortWorldWideName", "long[]", "vim.version.version2", {:optional => true}], ["npivWorldWideNameType", "string", "vim.version.version2", {:optional => true}], ["npivDesiredNodeWwns", "short", "vim.version.version5", {:optional => true}], ["npivDesiredPortWwns", "short", "vim.version.version5", {:optional => true}], ["npivTemporaryDisabled", "boolean", "vim.version.version5", {:optional => true}], ["npivOnNonRdmDisks", "boolean", "vim.version.version5", {:optional => true}], ["locationId", "string", "vim.version.version1", {:optional => true}], ["template", "boolean", "vim.version.version1"], ["guestId", "string", "vim.version.version1"], ["alternateGuestName", "string", "vim.version.version2"], ["annotation", "string", "vim.version.version1", {:optional => true}], ["files", "vim.vm.FileInfo", "vim.version.version1"], ["tools", "vim.vm.ToolsConfigInfo", "vim.version.version1", {:optional => true}], ["flags", "vim.vm.FlagInfo", "vim.version.version1"], ["consolePreferences", "vim.vm.ConsolePreferences", "vim.version.version1", {:optional => true}], ["defaultPowerOps", "vim.vm.DefaultPowerOpInfo", "vim.version.version1"], ["hardware", "vim.vm.VirtualHardware", "vim.version.version1"], ["cpuAllocation", "vim.ResourceAllocationInfo", "vim.version.version1", {:optional => true}], ["memoryAllocation", "vim.ResourceAllocationInfo", "vim.version.version1", {:optional => true}], ["latencySensitivity", "vim.LatencySensitivity", "vim.version.version8", {:optional => true}], ["memoryHotAddEnabled", "boolean", "vim.version.version4", {:optional => true}], ["cpuHotAddEnabled", "boolean", "vim.version.version4", {:optional => true}], ["cpuHotRemoveEnabled", "boolean", "vim.version.version4", {:optional => true}], ["hotPlugMemoryLimit", "long", "vim.version.version4", {:optional => true}], ["hotPlugMemoryIncrementSize", "long", "vim.version.version4", {:optional => true}], ["cpuAffinity", "vim.vm.AffinityInfo", "vim.version.version1", {:optional => true}], ["memoryAffinity", "vim.vm.AffinityInfo", "vim.version.version1", {:optional => true}], ["networkShaper", "vim.vm.NetworkShaperInfo", "vim.version.version1", {:optional => true}], ["extraConfig", "vim.option.OptionValue[]", "vim.version.version1", {:optional => true}], ["cpuFeatureMask", "vim.host.CpuIdInfo[]", "vim.version.version1", {:optional => true}], ["datastoreUrl", "vim.vm.ConfigInfo.DatastoreUrlPair[]", "vim.version.version1", {:optional => true}], ["swapPlacement", "string", "vim.version.version2", {:optional => true}], ["bootOptions", "vim.vm.BootOptions", "vim.version.version2", {:optional => true}], ["ftInfo", "vim.vm.FaultToleranceConfigInfo", "vim.version.version5", {:optional => true}], ["vAppConfig", "vim.vApp.VmConfigInfo", "vim.version.version5", {:optional => true}], ["vAssertsEnabled", "boolean", "vim.version.version5", {:optional => true}], ["changeTrackingEnabled", "boolean", "vim.version.version5", {:optional => true}], ["firmware", "string", "vim.version.version7", {:optional => true}], ["maxMksConnections", "int", "vim.version.version7", {:optional => true}], ["guestAutoLockEnabled", "boolean", "vim.version.version7", {:optional => true}], ["managedBy", "vim.ext.ManagedByInfo", "vim.version.version7", {:optional => true}], ["memoryReservationLockedToMax", "boolean", "vim.version.version7", {:optional => true}], ["initialOverhead", "vim.vm.ConfigInfo.OverheadInfo", "vim.version.version7", {:optional => true}], ["nestedHVEnabled", "boolean", "vim.version.version8", {:optional => true}], ["vPMCEnabled", "boolean", "vim.version.version8", {:optional => true}], ["scheduledHardwareUpgradeInfo", "vim.vm.ScheduledHardwareUpgradeInfo", "vim.version.version8", {:optional => true}], ["vFlashCacheReservation", "long", "vim.version.version9", {:optional => true}]])
    create_enum_type("vim.vm.ConfigInfo.NpivWwnType", "VirtualMachineConfigInfoNpivWwnType", "vim.version.version2", ["vc", "host", "external"])
    create_enum_type("vim.vm.ConfigInfo.SwapPlacementType", "VirtualMachineConfigInfoSwapPlacementType", "vim.version.version2", ["inherit", "vmDirectory", "hostLocal", "vmConfigured"])
    create_data_type("vim.vm.ConfigInfo.DatastoreUrlPair", "VirtualMachineConfigInfoDatastoreUrlPair", "vmodl.DynamicData", "vim.version.version1", [["name", "string", "vim.version.version1"], ["url", "string", "vim.version.version1"]])
    create_data_type("vim.vm.ConfigInfo.OverheadInfo", "VirtualMachineConfigInfoOverheadInfo", "vmodl.DynamicData", "vim.version.version7", [["initialMemoryReservation", "long", "vim.version.version7", {:optional => true}], ["initialSwapReservation", "long", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.vm.ConfigOption", "VirtualMachineConfigOption", "vmodl.DynamicData", "vim.version.version1", [["version", "string", "vim.version.version1"], ["description", "string", "vim.version.version1"], ["guestOSDescriptor", "vim.vm.GuestOsDescriptor[]", "vim.version.version1"], ["guestOSDefaultIndex", "int", "vim.version.version1"], ["hardwareOptions", "vim.vm.VirtualHardwareOption", "vim.version.version1"], ["capabilities", "vim.vm.Capability", "vim.version.version1"], ["datastore", "vim.vm.DatastoreOption", "vim.version.version1"], ["defaultDevice", "vim.vm.device.VirtualDevice[]", "vim.version.version1", {:optional => true}], ["supportedMonitorType", "string[]", "vim.version.version2"], ["supportedOvfEnvironmentTransport", "string[]", "vim.version.version5", {:optional => true}], ["supportedOvfInstallTransport", "string[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.vm.ConfigOptionDescriptor", "VirtualMachineConfigOptionDescriptor", "vmodl.DynamicData", "vim.version.version1", [["key", "string", "vim.version.version1"], ["description", "string", "vim.version.version1", {:optional => true}], ["host", "vim.HostSystem[]", "vim.version.version1", {:optional => true}], ["createSupported", "boolean", "vim.version.version4"], ["defaultConfigOption", "boolean", "vim.version.version4"], ["runSupported", "boolean", "vim.version.version8"], ["upgradeSupported", "boolean", "vim.version.version8"]])
    create_data_type("vim.vm.ConfigSpec", "VirtualMachineConfigSpec", "vmodl.DynamicData", "vim.version.version1", [["changeVersion", "string", "vim.version.version1", {:optional => true}], ["name", "string", "vim.version.version1", {:optional => true}], ["version", "string", "vim.version.version1", {:optional => true}], ["uuid", "string", "vim.version.version1", {:optional => true}], ["instanceUuid", "string", "vim.version.version5", {:optional => true}], ["npivNodeWorldWideName", "long[]", "vim.version.version2", {:optional => true}], ["npivPortWorldWideName", "long[]", "vim.version.version2", {:optional => true}], ["npivWorldWideNameType", "string", "vim.version.version2", {:optional => true}], ["npivDesiredNodeWwns", "short", "vim.version.version5", {:optional => true}], ["npivDesiredPortWwns", "short", "vim.version.version5", {:optional => true}], ["npivTemporaryDisabled", "boolean", "vim.version.version5", {:optional => true}], ["npivOnNonRdmDisks", "boolean", "vim.version.version5", {:optional => true}], ["npivWorldWideNameOp", "string", "vim.version.version2", {:optional => true}], ["locationId", "string", "vim.version.version1", {:optional => true}], ["guestId", "string", "vim.version.version1", {:optional => true}], ["alternateGuestName", "string", "vim.version.version2", {:optional => true}], ["annotation", "string", "vim.version.version1", {:optional => true}], ["files", "vim.vm.FileInfo", "vim.version.version1", {:optional => true}], ["tools", "vim.vm.ToolsConfigInfo", "vim.version.version1", {:optional => true}], ["flags", "vim.vm.FlagInfo", "vim.version.version1", {:optional => true}], ["consolePreferences", "vim.vm.ConsolePreferences", "vim.version.version1", {:optional => true}], ["powerOpInfo", "vim.vm.DefaultPowerOpInfo", "vim.version.version1", {:optional => true}], ["numCPUs", "int", "vim.version.version1", {:optional => true}], ["numCoresPerSocket", "int", "vim.version.version7", {:optional => true}], ["memoryMB", "long", "vim.version.version1", {:optional => true}], ["memoryHotAddEnabled", "boolean", "vim.version.version4", {:optional => true}], ["cpuHotAddEnabled", "boolean", "vim.version.version4", {:optional => true}], ["cpuHotRemoveEnabled", "boolean", "vim.version.version4", {:optional => true}], ["virtualICH7MPresent", "boolean", "vim.version.version7", {:optional => true}], ["virtualSMCPresent", "boolean", "vim.version.version7", {:optional => true}], ["deviceChange", "vim.vm.device.VirtualDeviceSpec[]", "vim.version.version1", {:optional => true}], ["cpuAllocation", "vim.ResourceAllocationInfo", "vim.version.version1", {:optional => true}], ["memoryAllocation", "vim.ResourceAllocationInfo", "vim.version.version1", {:optional => true}], ["latencySensitivity", "vim.LatencySensitivity", "vim.version.version8", {:optional => true}], ["cpuAffinity", "vim.vm.AffinityInfo", "vim.version.version1", {:optional => true}], ["memoryAffinity", "vim.vm.AffinityInfo", "vim.version.version1", {:optional => true}], ["networkShaper", "vim.vm.NetworkShaperInfo", "vim.version.version1", {:optional => true}], ["cpuFeatureMask", "vim.vm.ConfigSpec.CpuIdInfoSpec[]", "vim.version.version1", {:optional => true}], ["extraConfig", "vim.option.OptionValue[]", "vim.version.version1", {:optional => true}], ["swapPlacement", "string", "vim.version.version2", {:optional => true}], ["bootOptions", "vim.vm.BootOptions", "vim.version.version2", {:optional => true}], ["vAppConfig", "vim.vApp.VmConfigSpec", "vim.version.version5", {:optional => true}], ["ftInfo", "vim.vm.FaultToleranceConfigInfo", "vim.version.version5", {:optional => true}], ["vAppConfigRemoved", "boolean", "vim.version.version5", {:optional => true}], ["vAssertsEnabled", "boolean", "vim.version.version5", {:optional => true}], ["changeTrackingEnabled", "boolean", "vim.version.version5", {:optional => true}], ["firmware", "string", "vim.version.version7", {:optional => true}], ["maxMksConnections", "int", "vim.version.version7", {:optional => true}], ["guestAutoLockEnabled", "boolean", "vim.version.version7", {:optional => true}], ["managedBy", "vim.ext.ManagedByInfo", "vim.version.version7", {:optional => true}], ["memoryReservationLockedToMax", "boolean", "vim.version.version7", {:optional => true}], ["nestedHVEnabled", "boolean", "vim.version.version8", {:optional => true}], ["vPMCEnabled", "boolean", "vim.version.version8", {:optional => true}], ["scheduledHardwareUpgradeInfo", "vim.vm.ScheduledHardwareUpgradeInfo", "vim.version.version8", {:optional => true}], ["vmProfile", "vim.vm.ProfileSpec[]", "vim.version.version9", {:optional => true}]])
    create_enum_type("vim.vm.ConfigSpec.NpivWwnOp", "VirtualMachineConfigSpecNpivWwnOp", "vim.version.version2", ["generate", "set", "remove", "extend"])
    create_data_type("vim.vm.ConfigSpec.CpuIdInfoSpec", "VirtualMachineCpuIdInfoSpec", "vim.option.ArrayUpdateSpec", "vim.version.version1", [["info", "vim.host.CpuIdInfo", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.vm.ConsolePreferences", "VirtualMachineConsolePreferences", "vmodl.DynamicData", "vim.version.version1", [["powerOnWhenOpened", "boolean", "vim.version.version1", {:optional => true}], ["enterFullScreenOnPowerOn", "boolean", "vim.version.version1", {:optional => true}], ["closeOnPowerOffOrSuspend", "boolean", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.vm.DatastoreOption", "DatastoreOption", "vmodl.DynamicData", "vim.version.version1", [["unsupportedVolumes", "vim.vm.DatastoreOption.FileSystemVolumeOption[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.vm.DatastoreOption.FileSystemVolumeOption", "VirtualMachineDatastoreVolumeOption", "vmodl.DynamicData", "vim.version.version1", [["fileSystemType", "vmodl.TypeName", "vim.version.version1"], ["majorVersion", "int", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.vm.DefaultPowerOpInfo", "VirtualMachineDefaultPowerOpInfo", "vmodl.DynamicData", "vim.version.version1", [["powerOffType", "string", "vim.version.version1", {:optional => true}], ["suspendType", "string", "vim.version.version1", {:optional => true}], ["resetType", "string", "vim.version.version1", {:optional => true}], ["defaultPowerOffType", "string", "vim.version.version1", {:optional => true}], ["defaultSuspendType", "string", "vim.version.version1", {:optional => true}], ["defaultResetType", "string", "vim.version.version1", {:optional => true}], ["standbyAction", "string", "vim.version.version1", {:optional => true}]])
    create_enum_type("vim.vm.DefaultPowerOpInfo.PowerOpType", "VirtualMachinePowerOpType", "vim.version.version1", ["soft", "hard", "preset"])
    create_enum_type("vim.vm.DefaultPowerOpInfo.StandbyActionType", "VirtualMachineStandbyActionType", "vim.version.version1", ["checkpoint", "powerOnSuspend"])
    create_data_type("vim.vm.DeviceRuntimeInfo", "VirtualMachineDeviceRuntimeInfo", "vmodl.DynamicData", "vim.version.version6", [["runtimeState", "vim.vm.DeviceRuntimeInfo.DeviceRuntimeState", "vim.version.version6"], ["key", "int", "vim.version.version6"]])
    create_data_type("vim.vm.DeviceRuntimeInfo.DeviceRuntimeState", "VirtualMachineDeviceRuntimeInfoDeviceRuntimeState", "vmodl.DynamicData", "vim.version.version6", nil)
    create_data_type("vim.vm.DeviceRuntimeInfo.VirtualEthernetCardRuntimeState", "VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState", "vim.vm.DeviceRuntimeInfo.DeviceRuntimeState", "vim.version.version6", [["vmDirectPathGen2Active", "boolean", "vim.version.version6"], ["vmDirectPathGen2InactiveReasonVm", "string[]", "vim.version.version6", {:optional => true}], ["vmDirectPathGen2InactiveReasonOther", "string[]", "vim.version.version6", {:optional => true}], ["vmDirectPathGen2InactiveReasonExtended", "string", "vim.version.version6", {:optional => true}], ["reservationStatus", "string", "vim.version.version9", {:optional => true}]])
    create_enum_type("vim.vm.DeviceRuntimeInfo.VirtualEthernetCardRuntimeState.VmDirectPathGen2InactiveReasonVm", "VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm", "vim.version.version6", ["vmNptIncompatibleGuest", "vmNptIncompatibleGuestDriver", "vmNptIncompatibleAdapterType", "vmNptDisabledOrDisconnectedAdapter", "vmNptIncompatibleAdapterFeatures", "vmNptIncompatibleBackingType", "vmNptInsufficientMemoryReservation", "vmNptFaultToleranceOrRecordReplayConfigured", "vmNptConflictingIOChainConfigured", "vmNptMonitorBlocks", "vmNptConflictingOperationInProgress", "vmNptRuntimeError", "vmNptOutOfIntrVector", "vmNptVMCIActive"])
    create_enum_type("vim.vm.DeviceRuntimeInfo.VirtualEthernetCardRuntimeState.VmDirectPathGen2InactiveReasonOther", "VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther", "vim.version.version6", ["vmNptIncompatibleHost", "vmNptIncompatibleNetwork"])
    create_data_type("vim.vm.FaultToleranceConfigInfo", "FaultToleranceConfigInfo", "vmodl.DynamicData", "vim.version.version5", [["role", "int", "vim.version.version5"], ["instanceUuids", "string[]", "vim.version.version5"], ["configPaths", "string[]", "vim.version.version5"]])
    create_data_type("vim.vm.FaultTolerancePrimaryConfigInfo", "FaultTolerancePrimaryConfigInfo", "vim.vm.FaultToleranceConfigInfo", "vim.version.version5", [["secondaries", "vim.VirtualMachine[]", "vim.version.version5"]])
    create_data_type("vim.vm.FaultToleranceSecondaryConfigInfo", "FaultToleranceSecondaryConfigInfo", "vim.vm.FaultToleranceConfigInfo", "vim.version.version5", [["primaryVM", "vim.VirtualMachine", "vim.version.version5"]])
    create_data_type("vim.vm.FaultToleranceSecondaryOpResult", "FaultToleranceSecondaryOpResult", "vmodl.DynamicData", "vim.version.version5", [["vm", "vim.VirtualMachine", "vim.version.version5"], ["powerOnAttempted", "boolean", "vim.version.version5"], ["powerOnResult", "vim.cluster.PowerOnVmResult", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.vm.FeatureRequirement", "VirtualMachineFeatureRequirement", "vmodl.DynamicData", "vim.version.version8", [["key", "string", "vim.version.version8"], ["featureName", "string", "vim.version.version8"], ["value", "string", "vim.version.version8"]])
    create_data_type("vim.vm.FileInfo", "VirtualMachineFileInfo", "vmodl.DynamicData", "vim.version.version1", [["vmPathName", "string", "vim.version.version1", {:optional => true}], ["snapshotDirectory", "string", "vim.version.version1", {:optional => true}], ["suspendDirectory", "string", "vim.version.version1", {:optional => true}], ["logDirectory", "string", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.vm.FileLayout", "VirtualMachineFileLayout", "vmodl.DynamicData", "vim.version.version1", [["configFile", "string[]", "vim.version.version1", {:optional => true}], ["logFile", "string[]", "vim.version.version1", {:optional => true}], ["disk", "vim.vm.FileLayout.DiskLayout[]", "vim.version.version1", {:optional => true}], ["snapshot", "vim.vm.FileLayout.SnapshotLayout[]", "vim.version.version1", {:optional => true}], ["swapFile", "string", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.vm.FileLayout.DiskLayout", "VirtualMachineFileLayoutDiskLayout", "vmodl.DynamicData", "vim.version.version1", [["key", "int", "vim.version.version1"], ["diskFile", "string[]", "vim.version.version1"]])
    create_data_type("vim.vm.FileLayout.SnapshotLayout", "VirtualMachineFileLayoutSnapshotLayout", "vmodl.DynamicData", "vim.version.version1", [["key", "vim.vm.Snapshot", "vim.version.version1"], ["snapshotFile", "string[]", "vim.version.version1"]])
    create_data_type("vim.vm.FileLayoutEx", "VirtualMachineFileLayoutEx", "vmodl.DynamicData", "vim.version.version5", [["file", "vim.vm.FileLayoutEx.FileInfo[]", "vim.version.version5", {:optional => true}], ["disk", "vim.vm.FileLayoutEx.DiskLayout[]", "vim.version.version5", {:optional => true}], ["snapshot", "vim.vm.FileLayoutEx.SnapshotLayout[]", "vim.version.version5", {:optional => true}], ["timestamp", "vmodl.DateTime", "vim.version.version5"]])
    create_enum_type("vim.vm.FileLayoutEx.FileType", "VirtualMachineFileLayoutExFileType", "vim.version.version5", ["config", "extendedConfig", "diskDescriptor", "diskExtent", "digestDescriptor", "digestExtent", "diskReplicationState", "log", "stat", "namespaceData", "nvram", "snapshotData", "snapshotList", "snapshotManifestList", "suspend", "swap", "uwswap", "core", "screenshot", "ftMetadata"])
    create_data_type("vim.vm.FileLayoutEx.FileInfo", "VirtualMachineFileLayoutExFileInfo", "vmodl.DynamicData", "vim.version.version5", [["key", "int", "vim.version.version5"], ["name", "string", "vim.version.version5"], ["type", "string", "vim.version.version5"], ["size", "long", "vim.version.version5"], ["uniqueSize", "long", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.vm.FileLayoutEx.DiskUnit", "VirtualMachineFileLayoutExDiskUnit", "vmodl.DynamicData", "vim.version.version5", [["fileKey", "int[]", "vim.version.version5"]])
    create_data_type("vim.vm.FileLayoutEx.DiskLayout", "VirtualMachineFileLayoutExDiskLayout", "vmodl.DynamicData", "vim.version.version5", [["key", "int", "vim.version.version5"], ["chain", "vim.vm.FileLayoutEx.DiskUnit[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.vm.FileLayoutEx.SnapshotLayout", "VirtualMachineFileLayoutExSnapshotLayout", "vmodl.DynamicData", "vim.version.version5", [["key", "vim.vm.Snapshot", "vim.version.version5"], ["dataKey", "int", "vim.version.version5"], ["disk", "vim.vm.FileLayoutEx.DiskLayout[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.vm.FlagInfo", "VirtualMachineFlagInfo", "vmodl.DynamicData", "vim.version.version1", [["disableAcceleration", "boolean", "vim.version.version1", {:optional => true}], ["enableLogging", "boolean", "vim.version.version1", {:optional => true}], ["useToe", "boolean", "vim.version.version1", {:optional => true}], ["runWithDebugInfo", "boolean", "vim.version.version1", {:optional => true}], ["monitorType", "string", "vim.version.version2", {:optional => true}], ["htSharing", "string", "vim.version.version1", {:optional => true}], ["snapshotDisabled", "boolean", "vim.version.version2", {:optional => true}], ["snapshotLocked", "boolean", "vim.version.version2", {:optional => true}], ["diskUuidEnabled", "boolean", "vim.version.version2", {:optional => true}], ["virtualMmuUsage", "string", "vim.version.version2", {:optional => true}], ["virtualExecUsage", "string", "vim.version.version5", {:optional => true}], ["snapshotPowerOffBehavior", "string", "vim.version.version2", {:optional => true}], ["recordReplayEnabled", "boolean", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.vm.FlagInfo.HtSharing", "VirtualMachineHtSharing", "vim.version.version1", ["any", "none", "internal"])
    create_enum_type("vim.vm.FlagInfo.PowerOffBehavior", "VirtualMachinePowerOffBehavior", "vim.version.version2", ["powerOff", "revert", "prompt"])
    create_enum_type("vim.vm.FlagInfo.MonitorType", "VirtualMachineFlagInfoMonitorType", "vim.version.version2", ["release", "debug", "stats"])
    create_enum_type("vim.vm.FlagInfo.VirtualMmuUsage", "VirtualMachineFlagInfoVirtualMmuUsage", "vim.version.version2", ["automatic", "on", "off"])
    create_enum_type("vim.vm.FlagInfo.VirtualExecUsage", "VirtualMachineFlagInfoVirtualExecUsage", "vim.version.version5", ["hvAuto", "hvOn", "hvOff"])
    create_data_type("vim.vm.GuestInfo", "GuestInfo", "vmodl.DynamicData", "vim.version.version1", [["toolsStatus", "vim.vm.GuestInfo.ToolsStatus", "vim.version.version1", {:optional => true}], ["toolsVersionStatus", "string", "vim.version.version5", {:optional => true}], ["toolsVersionStatus2", "string", "vim.version.version7", {:optional => true}], ["toolsRunningStatus", "string", "vim.version.version5", {:optional => true}], ["toolsVersion", "string", "vim.version.version1", {:optional => true}], ["guestId", "string", "vim.version.version1", {:optional => true}], ["guestFamily", "string", "vim.version.version1", {:optional => true}], ["guestFullName", "string", "vim.version.version1", {:optional => true}], ["hostName", "string", "vim.version.version1", {:optional => true}], ["ipAddress", "string", "vim.version.version1", {:optional => true}], ["net", "vim.vm.GuestInfo.NicInfo[]", "vim.version.version1", {:optional => true}], ["ipStack", "vim.vm.GuestInfo.StackInfo[]", "vim.version.version6", {:optional => true}], ["disk", "vim.vm.GuestInfo.DiskInfo[]", "vim.version.version1", {:optional => true}], ["screen", "vim.vm.GuestInfo.ScreenInfo", "vim.version.version1", {:optional => true}], ["guestState", "string", "vim.version.version1"], ["appHeartbeatStatus", "string", "vim.version.version6", {:optional => true}], ["appState", "string", "vim.version.version9", {:optional => true}], ["guestOperationsReady", "boolean", "vim.version.version7", {:optional => true}], ["interactiveGuestOperationsReady", "boolean", "vim.version.version7", {:optional => true}], ["generationInfo", "vim.vm.GuestInfo.NamespaceGenerationInfo[]", "vim.version.version8", {:optional => true}]])
    create_enum_type("vim.vm.GuestInfo.ToolsStatus", "VirtualMachineToolsStatus", "vim.version.version1", ["toolsNotInstalled", "toolsNotRunning", "toolsOld", "toolsOk"])
    create_enum_type("vim.vm.GuestInfo.ToolsVersionStatus", "VirtualMachineToolsVersionStatus", "vim.version.version5", ["guestToolsNotInstalled", "guestToolsNeedUpgrade", "guestToolsCurrent", "guestToolsUnmanaged", "guestToolsTooOld", "guestToolsSupportedOld", "guestToolsSupportedNew", "guestToolsTooNew", "guestToolsBlacklisted"])
    create_enum_type("vim.vm.GuestInfo.ToolsRunningStatus", "VirtualMachineToolsRunningStatus", "vim.version.version5", ["guestToolsNotRunning", "guestToolsRunning", "guestToolsExecutingScripts"])
    create_data_type("vim.vm.GuestInfo.DiskInfo", "GuestDiskInfo", "vmodl.DynamicData", "vim.version.version1", [["diskPath", "string", "vim.version.version1", {:optional => true}], ["capacity", "long", "vim.version.version1", {:optional => true}], ["freeSpace", "long", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.vm.GuestInfo.NicInfo", "GuestNicInfo", "vmodl.DynamicData", "vim.version.version1", [["network", "string", "vim.version.version1", {:optional => true}], ["ipAddress", "string[]", "vim.version.version1", {:optional => true}], ["macAddress", "string", "vim.version.version1", {:optional => true}], ["connected", "boolean", "vim.version.version1"], ["deviceConfigId", "int", "vim.version.version1"], ["dnsConfig", "vim.net.DnsConfigInfo", "vim.version.version6", {:optional => true}], ["ipConfig", "vim.net.IpConfigInfo", "vim.version.version6", {:optional => true}], ["netBIOSConfig", "vim.net.NetBIOSConfigInfo", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.vm.GuestInfo.StackInfo", "GuestStackInfo", "vmodl.DynamicData", "vim.version.version6", [["dnsConfig", "vim.net.DnsConfigInfo", "vim.version.version6", {:optional => true}], ["ipRouteConfig", "vim.net.IpRouteConfigInfo", "vim.version.version6", {:optional => true}], ["ipStackConfig", "vim.KeyValue[]", "vim.version.version6", {:optional => true}], ["dhcpConfig", "vim.net.DhcpConfigInfo", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.vm.GuestInfo.ScreenInfo", "GuestScreenInfo", "vmodl.DynamicData", "vim.version.version1", [["width", "int", "vim.version.version1"], ["height", "int", "vim.version.version1"]])
    create_enum_type("vim.vm.GuestInfo.GuestState", "VirtualMachineGuestState", "vim.version.version1", ["running", "shuttingDown", "resetting", "standby", "notRunning", "unknown"])
    create_enum_type("vim.vm.GuestInfo.AppStateType", "GuestInfoAppStateType", "vim.version.version9", ["none", "appStateOk", "appStateNeedReset"])
    create_data_type("vim.vm.GuestInfo.NamespaceGenerationInfo", "GuestInfoNamespaceGenerationInfo", "vmodl.DynamicData", "vim.version.version8", [["key", "string", "vim.version.version8"], ["generationNo", "int", "vim.version.version8"]])
    create_data_type("vim.vm.GuestOsDescriptor", "GuestOsDescriptor", "vmodl.DynamicData", "vim.version.version1", [["id", "string", "vim.version.version1"], ["family", "string", "vim.version.version1"], ["fullName", "string", "vim.version.version1"], ["supportedMaxCPUs", "int", "vim.version.version1"], ["numSupportedPhysicalSockets", "int", "vim.version.version7"], ["numSupportedCoresPerSocket", "int", "vim.version.version7"], ["supportedMinMemMB", "int", "vim.version.version1"], ["supportedMaxMemMB", "int", "vim.version.version1"], ["recommendedMemMB", "int", "vim.version.version1"], ["recommendedColorDepth", "int", "vim.version.version1"], ["supportedDiskControllerList", "vmodl.TypeName[]", "vim.version.version1"], ["recommendedSCSIController", "vmodl.TypeName", "vim.version.version1", {:optional => true}], ["recommendedDiskController", "vmodl.TypeName", "vim.version.version1"], ["supportedNumDisks", "int", "vim.version.version1"], ["recommendedDiskSizeMB", "int", "vim.version.version1"], ["recommendedCdromController", "vmodl.TypeName", "vim.version.version9"], ["supportedEthernetCard", "vmodl.TypeName[]", "vim.version.version1"], ["recommendedEthernetCard", "vmodl.TypeName", "vim.version.version1", {:optional => true}], ["supportsSlaveDisk", "boolean", "vim.version.version1", {:optional => true}], ["cpuFeatureMask", "vim.host.CpuIdInfo[]", "vim.version.version1", {:optional => true}], ["smcRequired", "boolean", "vim.version.version7"], ["supportsWakeOnLan", "boolean", "vim.version.version1"], ["supportsVMI", "boolean", "vim.version.version4"], ["supportsMemoryHotAdd", "boolean", "vim.version.version4"], ["supportsCpuHotAdd", "boolean", "vim.version.version4"], ["supportsCpuHotRemove", "boolean", "vim.version.version4"], ["supportedFirmware", "string[]", "vim.version.version7"], ["recommendedFirmware", "string", "vim.version.version7"], ["supportedUSBControllerList", "vmodl.TypeName[]", "vim.version.version7", {:optional => true}], ["recommendedUSBController", "vmodl.TypeName", "vim.version.version7", {:optional => true}], ["supports3D", "boolean", "vim.version.version7"], ["recommended3D", "boolean", "vim.version.version8"], ["smcRecommended", "boolean", "vim.version.version7"], ["ich7mRecommended", "boolean", "vim.version.version7"], ["usbRecommended", "boolean", "vim.version.version7"], ["supportLevel", "string", "vim.version.version7"], ["supportedForCreate", "boolean", "vim.version.version7"], ["vRAMSizeInKB", "vim.option.IntOption", "vim.version.version7"]])
    create_enum_type("vim.vm.GuestOsDescriptor.GuestOsFamily", "VirtualMachineGuestOsFamily", "vim.version.version1", ["windowsGuest", "linuxGuest", "netwareGuest", "solarisGuest", "darwinGuestFamily", "otherGuestFamily"])
    create_enum_type("vim.vm.GuestOsDescriptor.GuestOsIdentifier", "VirtualMachineGuestOsIdentifier", "vim.version.version1", ["dosGuest", "win31Guest", "win95Guest", "win98Guest", "winMeGuest", "winNTGuest", "win2000ProGuest", "win2000ServGuest", "win2000AdvServGuest", "winXPHomeGuest", "winXPProGuest", "winXPPro64Guest", "winNetWebGuest", "winNetStandardGuest", "winNetEnterpriseGuest", "winNetDatacenterGuest", "winNetBusinessGuest", "winNetStandard64Guest", "winNetEnterprise64Guest", "winLonghornGuest", "winLonghorn64Guest", "winNetDatacenter64Guest", "winVistaGuest", "winVista64Guest", "windows7Guest", "windows7_64Guest", "windows7Server64Guest", "windows8Guest", "windows8_64Guest", "windows8Server64Guest", "windowsHyperVGuest", "freebsdGuest", "freebsd64Guest", "redhatGuest", "rhel2Guest", "rhel3Guest", "rhel3_64Guest", "rhel4Guest", "rhel4_64Guest", "rhel5Guest", "rhel5_64Guest", "rhel6Guest", "rhel6_64Guest", "rhel7Guest", "rhel7_64Guest", "centosGuest", "centos64Guest", "oracleLinuxGuest", "oracleLinux64Guest", "suseGuest", "suse64Guest", "slesGuest", "sles64Guest", "sles10Guest", "sles10_64Guest", "sles11Guest", "sles11_64Guest", "sles12Guest", "sles12_64Guest", "nld9Guest", "oesGuest", "sjdsGuest", "mandrakeGuest", "mandrivaGuest", "mandriva64Guest", "turboLinuxGuest", "turboLinux64Guest", "ubuntuGuest", "ubuntu64Guest", "debian4Guest", "debian4_64Guest", "debian5Guest", "debian5_64Guest", "debian6Guest", "debian6_64Guest", "debian7Guest", "debian7_64Guest", "asianux3Guest", "asianux3_64Guest", "asianux4Guest", "asianux4_64Guest", "opensuseGuest", "opensuse64Guest", "fedoraGuest", "fedora64Guest", "other24xLinuxGuest", "other26xLinuxGuest", "otherLinuxGuest", "other3xLinuxGuest", "genericLinuxGuest", "other24xLinux64Guest", "other26xLinux64Guest", "other3xLinux64Guest", "otherLinux64Guest", "solaris6Guest", "solaris7Guest", "solaris8Guest", "solaris9Guest", "solaris10Guest", "solaris10_64Guest", "solaris11_64Guest", "os2Guest", "eComStationGuest", "eComStation2Guest", "netware4Guest", "netware5Guest", "netware6Guest", "openServer5Guest", "openServer6Guest", "unixWare7Guest", "darwinGuest", "darwin64Guest", "darwin10Guest", "darwin10_64Guest", "darwin11Guest", "darwin11_64Guest", "darwin12_64Guest", "darwin13_64Guest", "vmkernelGuest", "vmkernel5Guest", "otherGuest", "otherGuest64"])
    create_enum_type("vim.vm.GuestOsDescriptor.FirmwareType", "GuestOsDescriptorFirmwareType", "vim.version.version7", ["bios", "efi", "csm"])
    create_enum_type("vim.vm.GuestOsDescriptor.SupportLevel", "GuestOsDescriptorSupportLevel", "vim.version.version7", ["experimental", "legacy", "terminated", "supported", "unsupported", "deprecated", "techPreview"])
    create_data_type("vim.vm.LegacyNetworkSwitchInfo", "VirtualMachineLegacyNetworkSwitchInfo", "vmodl.DynamicData", "vim.version.version1", [["name", "string", "vim.version.version1"]])
    create_data_type("vim.vm.Message", "VirtualMachineMessage", "vmodl.DynamicData", "vim.version.version2", [["id", "string", "vim.version.version2"], ["argument", "anyType[]", "vim.version.version2", {:optional => true}], ["text", "string", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.vm.MetadataManager.VmMetadataOwner", "VirtualMachineMetadataManagerVmMetadataOwner", "vmodl.DynamicData", "vim.version.version9", [["name", "string", "vim.version.version9"]])
    create_enum_type("vim.vm.MetadataManager.VmMetadataOwner.Owner", "VirtualMachineMetadataManagerVmMetadataOwnerOwner", "vim.version.version9", ["ComVmwareVsphereHA"])
    create_enum_type("vim.vm.MetadataManager.VmMetadataOp", "VirtualMachineMetadataManagerVmMetadataOp", "vim.version.version9", ["Update", "Remove"])
    create_data_type("vim.vm.MetadataManager.VmMetadata", "VirtualMachineMetadataManagerVmMetadata", "vmodl.DynamicData", "vim.version.version9", [["vmId", "string", "vim.version.version9"], ["metadata", "string", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.vm.MetadataManager.VmMetadataInput", "VirtualMachineMetadataManagerVmMetadataInput", "vmodl.DynamicData", "vim.version.version9", [["operation", "string", "vim.version.version9"], ["vmMetadata", "vim.vm.MetadataManager.VmMetadata", "vim.version.version9"]])
    create_data_type("vim.vm.MetadataManager.VmMetadataResult", "VirtualMachineMetadataManagerVmMetadataResult", "vmodl.DynamicData", "vim.version.version9", [["vmMetadata", "vim.vm.MetadataManager.VmMetadata", "vim.version.version9"], ["error", "vmodl.MethodFault", "vim.version.version9", {:optional => true}]])
    create_enum_type("vim.vm.NamespaceManager.DataSpec.OpCode", "VirtualMachineNamespaceManagerDataSpecOpCode", "vim.version.version8", ["updateAlways", "updateIfEqual"])
    create_data_type("vim.vm.NetworkShaperInfo", "VirtualMachineNetworkShaperInfo", "vmodl.DynamicData", "vim.version.version1", [["enabled", "boolean", "vim.version.version1", {:optional => true}], ["peakBps", "long", "vim.version.version1", {:optional => true}], ["averageBps", "long", "vim.version.version1", {:optional => true}], ["burstSize", "long", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.vm.ProfileRawData", "VirtualMachineProfileRawData", "vmodl.DynamicData", "vim.version.version9", [["extensionKey", "string", "vim.version.version9"], ["objectData", "string", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.vm.ProfileSpec", "VirtualMachineProfileSpec", "vmodl.DynamicData", "vim.version.version9", nil)
    create_enum_type("vim.vm.ProvisioningPolicy.OpType", "VirtualMachineProvisioningPolicyOpType", "vim.version.version7", ["clone", "migrate", "createSecondary"])
    create_enum_type("vim.vm.ProvisioningPolicy.Action", "VirtualMachineProvisioningPolicyAction", "vim.version.version7", ["keep", "remove"])
    create_data_type("vim.vm.QuestionInfo", "VirtualMachineQuestionInfo", "vmodl.DynamicData", "vim.version.version1", [["id", "string", "vim.version.version1"], ["text", "string", "vim.version.version1"], ["choice", "vim.option.ChoiceOption", "vim.version.version1"], ["message", "vim.vm.Message[]", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.vm.ReplicationConfigSpec.DiskSettings", "ReplicationInfoDiskSettings", "vmodl.DynamicData", "vim.version.version7", [["key", "int", "vim.version.version7"], ["diskReplicationId", "string", "vim.version.version7"]])
    create_data_type("vim.vm.ScheduledHardwareUpgradeInfo", "ScheduledHardwareUpgradeInfo", "vmodl.DynamicData", "vim.version.version8", [["upgradePolicy", "string", "vim.version.version8", {:optional => true}], ["versionKey", "string", "vim.version.version8", {:optional => true}], ["scheduledHardwareUpgradeStatus", "string", "vim.version.version8", {:optional => true}], ["fault", "vmodl.MethodFault", "vim.version.version8", {:optional => true}]])
    create_enum_type("vim.vm.ScheduledHardwareUpgradeInfo.HardwareUpgradePolicy", "ScheduledHardwareUpgradeInfoHardwareUpgradePolicy", "vim.version.version8", ["never", "onSoftPowerOff", "always"])
    create_enum_type("vim.vm.ScheduledHardwareUpgradeInfo.HardwareUpgradeStatus", "ScheduledHardwareUpgradeInfoHardwareUpgradeStatus", "vim.version.version8", ["none", "pending", "success", "failed"])
    create_managed_type("vim.vm.Snapshot", "VirtualMachineSnapshot", "vim.ExtensibleManagedObject", "vim.version.version1", [["config", "vim.vm.ConfigInfo", "vim.version.version1", {}, nil], ["childSnapshot", "vim.vm.Snapshot[]", "vim.version.version6", {:optional => true}, nil]], [["revert", "RevertToSnapshot_Task", "vim.version.version1", [["host", "vim.HostSystem", "vim.version.version1", {:optional => true}, nil], ["suppressPowerOn", "boolean", "vim.version.version4", {:optional => true}, nil]], [{}, "vim.Task", "void"], "VirtualMachine.State.RevertToSnapshot", ["vim.fault.TaskInProgress", "vim.fault.InsufficientResourcesFault", "vim.fault.InvalidState", "vim.fault.FileFault", "vim.fault.VmConfigFault"]], ["remove", "RemoveSnapshot_Task", "vim.version.version1", [["removeChildren", "boolean", "vim.version.version1", {}, nil], ["consolidate", "boolean", "vim.version.version7", {:optional => true}, nil]], [{}, "vim.Task", "void"], "VirtualMachine.State.RemoveSnapshot", ["vim.fault.TaskInProgress"]], ["rename", "RenameSnapshot", "vim.version.version1", [["name", "string", "vim.version.version1", {:optional => true}, nil], ["description", "string", "vim.version.version1", {:optional => true}, nil]], [{}, "void", "void"], "VirtualMachine.State.RenameSnapshot", ["vim.fault.InvalidName", "vim.fault.TaskInProgress", "vim.fault.InvalidState"]], ["exportSnapshot", "ExportSnapshot", "vim.version.version9", [], [{}, "vim.HttpNfcLease", "vim.HttpNfcLease"], "VApp.Export", ["vim.fault.TaskInProgress", "vim.fault.InvalidState", "vim.fault.FileFault"]]])
    create_data_type("vim.vm.SnapshotInfo", "VirtualMachineSnapshotInfo", "vmodl.DynamicData", "vim.version.version1", [["currentSnapshot", "vim.vm.Snapshot", "vim.version.version1", {:optional => true}], ["rootSnapshotList", "vim.vm.SnapshotTree[]", "vim.version.version1"]])
    create_data_type("vim.vm.StorageInfo", "VirtualMachineStorageInfo", "vmodl.DynamicData", "vim.version.version5", [["perDatastoreUsage", "vim.vm.StorageInfo.UsageOnDatastore[]", "vim.version.version5", {:optional => true}], ["timestamp", "vmodl.DateTime", "vim.version.version5"]])
    create_data_type("vim.vm.StorageInfo.UsageOnDatastore", "VirtualMachineUsageOnDatastore", "vmodl.DynamicData", "vim.version.version5", [["datastore", "vim.Datastore", "vim.version.version5"], ["committed", "long", "vim.version.version5"], ["uncommitted", "long", "vim.version.version5"], ["unshared", "long", "vim.version.version5"]])
    create_data_type("vim.vm.TargetInfo", "VirtualMachineTargetInfo", "vmodl.DynamicData", "vim.version.version1", [["name", "string", "vim.version.version1"], ["configurationTag", "string[]", "vim.version.version1", {:optional => true}]])
    create_enum_type("vim.vm.TargetInfo.ConfigurationTag", "VirtualMachineTargetInfoConfigurationTag", "vim.version.version1", ["compliant", "clusterWide"])
    create_data_type("vim.vm.ToolsConfigInfo", "ToolsConfigInfo", "vmodl.DynamicData", "vim.version.version1", [["toolsVersion", "int", "vim.version.version1", {:optional => true}], ["afterPowerOn", "boolean", "vim.version.version1", {:optional => true}], ["afterResume", "boolean", "vim.version.version1", {:optional => true}], ["beforeGuestStandby", "boolean", "vim.version.version1", {:optional => true}], ["beforeGuestShutdown", "boolean", "vim.version.version1", {:optional => true}], ["beforeGuestReboot", "boolean", "vim.version.version1", {:optional => true}], ["toolsUpgradePolicy", "string", "vim.version.version2", {:optional => true}], ["pendingCustomization", "string", "vim.version.version2", {:optional => true}], ["syncTimeWithHost", "boolean", "vim.version.version2", {:optional => true}], ["lastInstallInfo", "vim.vm.ToolsConfigInfo.ToolsLastInstallInfo", "vim.version.version7", {:optional => true}]])
    create_enum_type("vim.vm.ToolsConfigInfo.UpgradePolicy", "UpgradePolicy", "vim.version.version2", ["manual", "upgradeAtPowerCycle"])
    create_data_type("vim.vm.ToolsConfigInfo.ToolsLastInstallInfo", "ToolsConfigInfoToolsLastInstallInfo", "vmodl.DynamicData", "vim.version.version7", [["counter", "int", "vim.version.version7"], ["fault", "vmodl.MethodFault", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.vm.UsbInfo", "VirtualMachineUsbInfo", "vim.vm.TargetInfo", "vim.version.version2", [["description", "string", "vim.version.version2"], ["vendor", "int", "vim.version.version2"], ["product", "int", "vim.version.version2"], ["physicalPath", "string", "vim.version.version2"], ["family", "string[]", "vim.version.version2", {:optional => true}], ["speed", "string[]", "vim.version.version2", {:optional => true}], ["summary", "vim.vm.Summary", "vim.version.version2", {:optional => true}]])
    create_enum_type("vim.vm.UsbInfo.Speed", "VirtualMachineUsbInfoSpeed", "vim.version.version2", ["low", "full", "high", "superSpeed", "unknownSpeed"])
    create_enum_type("vim.vm.UsbInfo.Family", "VirtualMachineUsbInfoFamily", "vim.version.version2", ["audio", "hid", "hid_bootable", "physical", "communication", "imaging", "printer", "storage", "hub", "smart_card", "security", "video", "wireless", "bluetooth", "wusb", "pda", "vendor_specific", "other", "unknownFamily"])
    create_data_type("vim.vm.VirtualHardware", "VirtualHardware", "vmodl.DynamicData", "vim.version.version1", [["numCPU", "int", "vim.version.version1"], ["numCoresPerSocket", "int", "vim.version.version7", {:optional => true}], ["memoryMB", "int", "vim.version.version1"], ["virtualICH7MPresent", "boolean", "vim.version.version7", {:optional => true}], ["virtualSMCPresent", "boolean", "vim.version.version7", {:optional => true}], ["device", "vim.vm.device.VirtualDevice[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.vm.VirtualHardwareOption", "VirtualHardwareOption", "vmodl.DynamicData", "vim.version.version1", [["hwVersion", "int", "vim.version.version1"], ["virtualDeviceOption", "vim.vm.device.VirtualDeviceOption[]", "vim.version.version1"], ["deviceListReadonly", "boolean", "vim.version.version1"], ["numCPU", "int[]", "vim.version.version1"], ["numCoresPerSocket", "vim.option.IntOption", "vim.version.version7"], ["numCpuReadonly", "boolean", "vim.version.version1"], ["memoryMB", "vim.option.LongOption", "vim.version.version1"], ["numPCIControllers", "vim.option.IntOption", "vim.version.version1"], ["numIDEControllers", "vim.option.IntOption", "vim.version.version1"], ["numUSBControllers", "vim.option.IntOption", "vim.version.version1"], ["numUSBXHCIControllers", "vim.option.IntOption", "vim.version.version7"], ["numSIOControllers", "vim.option.IntOption", "vim.version.version1"], ["numPS2Controllers", "vim.option.IntOption", "vim.version.version1"], ["licensingLimit", "vmodl.PropertyPath[]", "vim.version.version1", {:optional => true}], ["numSupportedWwnPorts", "vim.option.IntOption", "vim.version.version5", {:optional => true}], ["numSupportedWwnNodes", "vim.option.IntOption", "vim.version.version5", {:optional => true}], ["resourceConfigOption", "vim.ResourceConfigOption", "vim.version.version6"]])
    create_managed_type("vim.vm.check.CompatibilityChecker", "VirtualMachineCompatibilityChecker", "vmodl.ManagedObject", "vim.version.version5", nil, [["checkCompatibility", "CheckCompatibility_Task", "vim.version.version5", [["vm", "vim.VirtualMachine", "vim.version.version5", {}, nil], ["host", "vim.HostSystem", "vim.version.version5", {:optional => true}, nil], ["pool", "vim.ResourcePool", "vim.version.version5", {:optional => true}, nil], ["testType", "string[]", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.Task", "vim.vm.check.Result[]"], "System.View", ["vim.fault.InvalidState", "vim.fault.NoActiveHostInCluster"]]])
    create_data_type("vim.vm.check.Result", "CheckResult", "vmodl.DynamicData", "vim.version.version5", [["vm", "vim.VirtualMachine", "vim.version.version5", {:optional => true}], ["host", "vim.HostSystem", "vim.version.version5", {:optional => true}], ["warning", "vmodl.MethodFault[]", "vim.version.version5", {:optional => true}], ["error", "vmodl.MethodFault[]", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.vm.check.TestType", "CheckTestType", "vim.version.version5", ["sourceTests", "hostTests", "resourcePoolTests", "datastoreTests", "networkTests"])
    create_data_type("vim.vm.customization.IPSettings", "CustomizationIPSettings", "vmodl.DynamicData", "vim.version.version1", [["ip", "vim.vm.customization.IpGenerator", "vim.version.version1"], ["subnetMask", "string", "vim.version.version1", {:optional => true}], ["gateway", "string[]", "vim.version.version1", {:optional => true}], ["ipV6Spec", "vim.vm.customization.IPSettings.IpV6AddressSpec", "vim.version.version5", {:optional => true}], ["dnsServerList", "string[]", "vim.version.version1", {:optional => true}], ["dnsDomain", "string", "vim.version.version1", {:optional => true}], ["primaryWINS", "string", "vim.version.version1", {:optional => true}], ["secondaryWINS", "string", "vim.version.version1", {:optional => true}], ["netBIOS", "vim.vm.customization.IPSettings.NetBIOSMode", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.vm.customization.IPSettings.IpV6AddressSpec", "CustomizationIPSettingsIpV6AddressSpec", "vmodl.DynamicData", "vim.version.version5", [["ip", "vim.vm.customization.IpV6Generator[]", "vim.version.version5"], ["gateway", "string[]", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.vm.customization.IPSettings.NetBIOSMode", "CustomizationNetBIOSMode", "vim.version.version1", ["enableNetBIOSViaDhcp", "enableNetBIOS", "disableNetBIOS"])
    create_data_type("vim.vm.customization.Specification", "CustomizationSpec", "vmodl.DynamicData", "vim.version.version1", [["options", "vim.vm.customization.Options", "vim.version.version1", {:optional => true}], ["identity", "vim.vm.customization.IdentitySettings", "vim.version.version1"], ["globalIPSettings", "vim.vm.customization.GlobalIPSettings", "vim.version.version1"], ["nicSettingMap", "vim.vm.customization.AdapterMapping[]", "vim.version.version1", {:optional => true}], ["encryptionKey", "byte[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.vm.customization.NameGenerator", "CustomizationName", "vmodl.DynamicData", "vim.version.version1", nil)
    create_data_type("vim.vm.customization.FixedName", "CustomizationFixedName", "vim.vm.customization.NameGenerator", "vim.version.version1", [["name", "string", "vim.version.version1"]])
    create_data_type("vim.vm.customization.PrefixNameGenerator", "CustomizationPrefixName", "vim.vm.customization.NameGenerator", "vim.version.version1", [["base", "string", "vim.version.version1"]])
    create_data_type("vim.vm.customization.VirtualMachineNameGenerator", "CustomizationVirtualMachineName", "vim.vm.customization.NameGenerator", "vim.version.version1", nil)
    create_data_type("vim.vm.customization.UnknownNameGenerator", "CustomizationUnknownName", "vim.vm.customization.NameGenerator", "vim.version.version1", nil)
    create_data_type("vim.vm.customization.CustomNameGenerator", "CustomizationCustomName", "vim.vm.customization.NameGenerator", "vim.version.version1", [["argument", "string", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.vm.customization.Password", "CustomizationPassword", "vmodl.DynamicData", "vim.version.version1", [["value", "string", "vim.version.version1"], ["plainText", "boolean", "vim.version.version1"]])
    create_data_type("vim.vm.customization.Options", "CustomizationOptions", "vmodl.DynamicData", "vim.version.version1", nil)
    create_data_type("vim.vm.customization.WinOptions", "CustomizationWinOptions", "vim.vm.customization.Options", "vim.version.version1", [["changeSID", "boolean", "vim.version.version1"], ["deleteAccounts", "boolean", "vim.version.version1"], ["reboot", "vim.vm.customization.WinOptions.SysprepRebootOption", "vim.version.version2", {:optional => true}]])
    create_enum_type("vim.vm.customization.WinOptions.SysprepRebootOption", "CustomizationSysprepRebootOption", "vim.version.version2", ["reboot", "noreboot", "shutdown"])
    create_data_type("vim.vm.customization.LinuxOptions", "CustomizationLinuxOptions", "vim.vm.customization.Options", "vim.version.version1", nil)
    create_data_type("vim.vm.customization.GuiUnattended", "CustomizationGuiUnattended", "vmodl.DynamicData", "vim.version.version1", [["password", "vim.vm.customization.Password", "vim.version.version1", {:optional => true}], ["timeZone", "int", "vim.version.version1"], ["autoLogon", "boolean", "vim.version.version1"], ["autoLogonCount", "int", "vim.version.version1"]])
    create_data_type("vim.vm.customization.UserData", "CustomizationUserData", "vmodl.DynamicData", "vim.version.version1", [["fullName", "string", "vim.version.version1"], ["orgName", "string", "vim.version.version1"], ["computerName", "vim.vm.customization.NameGenerator", "vim.version.version1"], ["productId", "string", "vim.version.version1"]])
    create_data_type("vim.vm.customization.GuiRunOnce", "CustomizationGuiRunOnce", "vmodl.DynamicData", "vim.version.version1", [["commandList", "string[]", "vim.version.version1"]])
    create_data_type("vim.vm.customization.Identification", "CustomizationIdentification", "vmodl.DynamicData", "vim.version.version1", [["joinWorkgroup", "string", "vim.version.version1", {:optional => true}], ["joinDomain", "string", "vim.version.version1", {:optional => true}], ["domainAdmin", "string", "vim.version.version1", {:optional => true}], ["domainAdminPassword", "vim.vm.customization.Password", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.vm.customization.LicenseFilePrintData", "CustomizationLicenseFilePrintData", "vmodl.DynamicData", "vim.version.version1", [["autoMode", "vim.vm.customization.LicenseFilePrintData.AutoMode", "vim.version.version1"], ["autoUsers", "int", "vim.version.version1", {:optional => true}]])
    create_enum_type("vim.vm.customization.LicenseFilePrintData.AutoMode", "CustomizationLicenseDataMode", "vim.version.version1", ["perServer", "perSeat"])
    create_data_type("vim.vm.customization.IdentitySettings", "CustomizationIdentitySettings", "vmodl.DynamicData", "vim.version.version1", nil)
    create_data_type("vim.vm.customization.SysprepText", "CustomizationSysprepText", "vim.vm.customization.IdentitySettings", "vim.version.version1", [["value", "string", "vim.version.version1"]])
    create_data_type("vim.vm.customization.Sysprep", "CustomizationSysprep", "vim.vm.customization.IdentitySettings", "vim.version.version1", [["guiUnattended", "vim.vm.customization.GuiUnattended", "vim.version.version1"], ["userData", "vim.vm.customization.UserData", "vim.version.version1"], ["guiRunOnce", "vim.vm.customization.GuiRunOnce", "vim.version.version1", {:optional => true}], ["identification", "vim.vm.customization.Identification", "vim.version.version1"], ["licenseFilePrintData", "vim.vm.customization.LicenseFilePrintData", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.vm.customization.LinuxPrep", "CustomizationLinuxPrep", "vim.vm.customization.IdentitySettings", "vim.version.version1", [["hostName", "vim.vm.customization.NameGenerator", "vim.version.version1"], ["domain", "string", "vim.version.version1"], ["timeZone", "string", "vim.version.version5", {:optional => true}], ["hwClockUTC", "boolean", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.vm.customization.GlobalIPSettings", "CustomizationGlobalIPSettings", "vmodl.DynamicData", "vim.version.version1", [["dnsSuffixList", "string[]", "vim.version.version1", {:optional => true}], ["dnsServerList", "string[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.vm.customization.IpGenerator", "CustomizationIpGenerator", "vmodl.DynamicData", "vim.version.version1", nil)
    create_data_type("vim.vm.customization.DhcpIpGenerator", "CustomizationDhcpIpGenerator", "vim.vm.customization.IpGenerator", "vim.version.version1", nil)
    create_data_type("vim.vm.customization.FixedIp", "CustomizationFixedIp", "vim.vm.customization.IpGenerator", "vim.version.version1", [["ipAddress", "string", "vim.version.version1"]])
    create_data_type("vim.vm.customization.UnknownIpGenerator", "CustomizationUnknownIpGenerator", "vim.vm.customization.IpGenerator", "vim.version.version1", nil)
    create_data_type("vim.vm.customization.CustomIpGenerator", "CustomizationCustomIpGenerator", "vim.vm.customization.IpGenerator", "vim.version.version1", [["argument", "string", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.vm.customization.IpV6Generator", "CustomizationIpV6Generator", "vmodl.DynamicData", "vim.version.version5", nil)
    create_data_type("vim.vm.customization.DhcpIpV6Generator", "CustomizationDhcpIpV6Generator", "vim.vm.customization.IpV6Generator", "vim.version.version5", nil)
    create_data_type("vim.vm.customization.StatelessIpV6Generator", "CustomizationStatelessIpV6Generator", "vim.vm.customization.IpV6Generator", "vim.version.version5", nil)
    create_data_type("vim.vm.customization.FixedIpV6", "CustomizationFixedIpV6", "vim.vm.customization.IpV6Generator", "vim.version.version5", [["ipAddress", "string", "vim.version.version5"], ["subnetMask", "int", "vim.version.version5"]])
    create_data_type("vim.vm.customization.AutoIpV6Generator", "CustomizationAutoIpV6Generator", "vim.vm.customization.IpV6Generator", "vim.version.version5", nil)
    create_data_type("vim.vm.customization.UnknownIpV6Generator", "CustomizationUnknownIpV6Generator", "vim.vm.customization.IpV6Generator", "vim.version.version5", nil)
    create_data_type("vim.vm.customization.CustomIpV6Generator", "CustomizationCustomIpV6Generator", "vim.vm.customization.IpV6Generator", "vim.version.version5", [["argument", "string", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.vm.customization.AdapterMapping", "CustomizationAdapterMapping", "vmodl.DynamicData", "vim.version.version1", [["macAddress", "string", "vim.version.version1", {:optional => true}], ["adapter", "vim.vm.customization.IPSettings", "vim.version.version1"]])
    create_data_type("vim.vm.device.HostDiskMappingInfo", "HostDiskMappingInfo", "vmodl.DynamicData", "vim.version.version1", [["physicalPartition", "vim.vm.device.HostDiskMappingInfo.PartitionInfo", "vim.version.version1", {:optional => true}], ["name", "string", "vim.version.version1"], ["exclusive", "boolean", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.vm.device.HostDiskMappingInfo.PartitionInfo", "HostDiskMappingPartitionInfo", "vmodl.DynamicData", "vim.version.version1", [["name", "string", "vim.version.version1"], ["fileSystem", "string", "vim.version.version1"], ["capacityInKb", "long", "vim.version.version1"]])
    create_data_type("vim.vm.device.HostDiskMappingOption", "HostDiskMappingOption", "vmodl.DynamicData", "vim.version.version1", [["physicalPartition", "vim.vm.device.HostDiskMappingOption.PartitionOption[]", "vim.version.version1", {:optional => true}], ["name", "string", "vim.version.version1"]])
    create_data_type("vim.vm.device.HostDiskMappingOption.PartitionOption", "HostDiskMappingPartitionOption", "vmodl.DynamicData", "vim.version.version1", [["name", "string", "vim.version.version1"], ["fileSystem", "string", "vim.version.version1"], ["capacityInKb", "long", "vim.version.version1"]])
    create_data_type("vim.vm.device.VirtualDevice", "VirtualDevice", "vmodl.DynamicData", "vim.version.version1", [["key", "int", "vim.version.version1"], ["deviceInfo", "vim.Description", "vim.version.version1", {:optional => true}], ["backing", "vim.vm.device.VirtualDevice.BackingInfo", "vim.version.version1", {:optional => true}], ["connectable", "vim.vm.device.VirtualDevice.ConnectInfo", "vim.version.version1", {:optional => true}], ["slotInfo", "vim.vm.device.VirtualDevice.BusSlotInfo", "vim.version.version8", {:optional => true}], ["controllerKey", "int", "vim.version.version1", {:optional => true}], ["unitNumber", "int", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.vm.device.VirtualDevice.BackingInfo", "VirtualDeviceBackingInfo", "vmodl.DynamicData", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualDevice.FileBackingInfo", "VirtualDeviceFileBackingInfo", "vim.vm.device.VirtualDevice.BackingInfo", "vim.version.version1", [["fileName", "string", "vim.version.version1"], ["datastore", "vim.Datastore", "vim.version.version1", {:optional => true}], ["backingObjectId", "string", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.vm.device.VirtualDevice.DeviceBackingInfo", "VirtualDeviceDeviceBackingInfo", "vim.vm.device.VirtualDevice.BackingInfo", "vim.version.version1", [["deviceName", "string", "vim.version.version1"], ["useAutoDetect", "boolean", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.vm.device.VirtualDevice.RemoteDeviceBackingInfo", "VirtualDeviceRemoteDeviceBackingInfo", "vim.vm.device.VirtualDevice.BackingInfo", "vim.version.version1", [["deviceName", "string", "vim.version.version1"], ["useAutoDetect", "boolean", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.vm.device.VirtualDevice.PipeBackingInfo", "VirtualDevicePipeBackingInfo", "vim.vm.device.VirtualDevice.BackingInfo", "vim.version.version1", [["pipeName", "string", "vim.version.version1"]])
    create_data_type("vim.vm.device.VirtualDevice.URIBackingInfo", "VirtualDeviceURIBackingInfo", "vim.vm.device.VirtualDevice.BackingInfo", "vim.version.version6", [["serviceURI", "string", "vim.version.version6"], ["direction", "string", "vim.version.version6"], ["proxyURI", "string", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.vm.device.VirtualDevice.ConnectInfo", "VirtualDeviceConnectInfo", "vmodl.DynamicData", "vim.version.version1", [["startConnected", "boolean", "vim.version.version1"], ["allowGuestControl", "boolean", "vim.version.version1"], ["connected", "boolean", "vim.version.version1"], ["status", "string", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.vm.device.VirtualDevice.ConnectInfo.Status", "VirtualDeviceConnectInfoStatus", "vim.version.version5", ["ok", "recoverableError", "unrecoverableError", "untried"])
    create_data_type("vim.vm.device.VirtualDevice.BusSlotInfo", "VirtualDeviceBusSlotInfo", "vmodl.DynamicData", "vim.version.version8", nil)
    create_data_type("vim.vm.device.VirtualDevice.PciBusSlotInfo", "VirtualDevicePciBusSlotInfo", "vim.vm.device.VirtualDevice.BusSlotInfo", "vim.version.version8", [["pciSlotNumber", "int", "vim.version.version8"]])
    create_data_type("vim.vm.device.VirtualDeviceOption", "VirtualDeviceOption", "vmodl.DynamicData", "vim.version.version1", [["type", "vmodl.TypeName", "vim.version.version1"], ["connectOption", "vim.vm.device.VirtualDeviceOption.ConnectOption", "vim.version.version1", {:optional => true}], ["busSlotOption", "vim.vm.device.VirtualDeviceOption.BusSlotOption", "vim.version.version8", {:optional => true}], ["controllerType", "vmodl.TypeName", "vim.version.version1", {:optional => true}], ["autoAssignController", "vim.option.BoolOption", "vim.version.version1", {:optional => true}], ["backingOption", "vim.vm.device.VirtualDeviceOption.BackingOption[]", "vim.version.version1", {:optional => true}], ["defaultBackingOptionIndex", "int", "vim.version.version1", {:optional => true}], ["licensingLimit", "vmodl.PropertyPath[]", "vim.version.version1", {:optional => true}], ["deprecated", "boolean", "vim.version.version1"], ["plugAndPlay", "boolean", "vim.version.version1"], ["hotRemoveSupported", "boolean", "vim.version.version4"]])
    create_data_type("vim.vm.device.VirtualDeviceOption.BackingOption", "VirtualDeviceBackingOption", "vmodl.DynamicData", "vim.version.version1", [["type", "vmodl.TypeName", "vim.version.version1"]])
    create_data_type("vim.vm.device.VirtualDeviceOption.FileBackingOption", "VirtualDeviceFileBackingOption", "vim.vm.device.VirtualDeviceOption.BackingOption", "vim.version.version1", [["fileNameExtensions", "vim.option.ChoiceOption", "vim.version.version1", {:optional => true}]])
    create_enum_type("vim.vm.device.VirtualDeviceOption.FileBackingOption.FileExtension", "VirtualDeviceFileExtension", "vim.version.version1", ["iso", "flp", "vmdk", "dsk", "rdm"])
    create_data_type("vim.vm.device.VirtualDeviceOption.DeviceBackingOption", "VirtualDeviceDeviceBackingOption", "vim.vm.device.VirtualDeviceOption.BackingOption", "vim.version.version1", [["autoDetectAvailable", "vim.option.BoolOption", "vim.version.version2"]])
    create_data_type("vim.vm.device.VirtualDeviceOption.RemoteDeviceBackingOption", "VirtualDeviceRemoteDeviceBackingOption", "vim.vm.device.VirtualDeviceOption.BackingOption", "vim.version.version1", [["autoDetectAvailable", "vim.option.BoolOption", "vim.version.version2"]])
    create_data_type("vim.vm.device.VirtualDeviceOption.PipeBackingOption", "VirtualDevicePipeBackingOption", "vim.vm.device.VirtualDeviceOption.BackingOption", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualDeviceOption.URIBackingOption", "VirtualDeviceURIBackingOption", "vim.vm.device.VirtualDeviceOption.BackingOption", "vim.version.version6", [["directions", "vim.option.ChoiceOption", "vim.version.version6"]])
    create_enum_type("vim.vm.device.VirtualDeviceOption.URIBackingOption.Direction", "VirtualDeviceURIBackingOptionDirection", "vim.version.version6", ["server", "client"])
    create_data_type("vim.vm.device.VirtualDeviceOption.ConnectOption", "VirtualDeviceConnectOption", "vmodl.DynamicData", "vim.version.version1", [["startConnected", "vim.option.BoolOption", "vim.version.version1"], ["allowGuestControl", "vim.option.BoolOption", "vim.version.version1"]])
    create_data_type("vim.vm.device.VirtualDeviceOption.BusSlotOption", "VirtualDeviceBusSlotOption", "vmodl.DynamicData", "vim.version.version8", [["type", "vmodl.TypeName", "vim.version.version8"]])
    create_data_type("vim.vm.device.VirtualDeviceSpec", "VirtualDeviceConfigSpec", "vmodl.DynamicData", "vim.version.version1", [["operation", "vim.vm.device.VirtualDeviceSpec.Operation", "vim.version.version1", {:optional => true}], ["fileOperation", "vim.vm.device.VirtualDeviceSpec.FileOperation", "vim.version.version1", {:optional => true}], ["device", "vim.vm.device.VirtualDevice", "vim.version.version1"], ["profile", "vim.vm.ProfileSpec[]", "vim.version.version9", {:optional => true}]])
    create_enum_type("vim.vm.device.VirtualDeviceSpec.Operation", "VirtualDeviceConfigSpecOperation", "vim.version.version1", ["add", "remove", "edit"])
    create_enum_type("vim.vm.device.VirtualDeviceSpec.FileOperation", "VirtualDeviceConfigSpecFileOperation", "vim.version.version1", ["create", "destroy", "replace"])
    create_data_type("vim.vm.device.VirtualDisk", "VirtualDisk", "vim.vm.device.VirtualDevice", "vim.version.version1", [["capacityInKB", "long", "vim.version.version1"], ["capacityInBytes", "long", "vim.version.version9", {:optional => true}], ["shares", "vim.SharesInfo", "vim.version.version1", {:optional => true}], ["storageIOAllocation", "vim.StorageResourceManager.IOAllocationInfo", "vim.version.version6", {:optional => true}], ["diskObjectId", "string", "vim.version.version9", {:optional => true}], ["vFlashCacheConfigInfo", "vim.vm.device.VirtualDisk.VFlashCacheConfigInfo", "vim.version.version9", {:optional => true}]])
    create_enum_type("vim.vm.device.VirtualDisk.DeltaDiskFormat", "VirtualDiskDeltaDiskFormat", "vim.version.version7", ["redoLogFormat", "nativeFormat", "seSparseFormat"])
    create_data_type("vim.vm.device.VirtualDisk.SparseVer1BackingInfo", "VirtualDiskSparseVer1BackingInfo", "vim.vm.device.VirtualDevice.FileBackingInfo", "vim.version.version1", [["diskMode", "string", "vim.version.version1"], ["split", "boolean", "vim.version.version1", {:optional => true}], ["writeThrough", "boolean", "vim.version.version1", {:optional => true}], ["spaceUsedInKB", "long", "vim.version.version1", {:optional => true}], ["contentId", "string", "vim.version.version5", {:optional => true}], ["parent", "vim.vm.device.VirtualDisk.SparseVer1BackingInfo", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.vm.device.VirtualDisk.SparseVer2BackingInfo", "VirtualDiskSparseVer2BackingInfo", "vim.vm.device.VirtualDevice.FileBackingInfo", "vim.version.version1", [["diskMode", "string", "vim.version.version1"], ["split", "boolean", "vim.version.version1", {:optional => true}], ["writeThrough", "boolean", "vim.version.version1", {:optional => true}], ["spaceUsedInKB", "long", "vim.version.version1", {:optional => true}], ["uuid", "string", "vim.version.version2", {:optional => true}], ["contentId", "string", "vim.version.version5", {:optional => true}], ["changeId", "string", "vim.version.version5", {:optional => true}], ["parent", "vim.vm.device.VirtualDisk.SparseVer2BackingInfo", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.vm.device.VirtualDisk.FlatVer1BackingInfo", "VirtualDiskFlatVer1BackingInfo", "vim.vm.device.VirtualDevice.FileBackingInfo", "vim.version.version1", [["diskMode", "string", "vim.version.version1"], ["split", "boolean", "vim.version.version1", {:optional => true}], ["writeThrough", "boolean", "vim.version.version1", {:optional => true}], ["contentId", "string", "vim.version.version5", {:optional => true}], ["parent", "vim.vm.device.VirtualDisk.FlatVer1BackingInfo", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.vm.device.VirtualDisk.FlatVer2BackingInfo", "VirtualDiskFlatVer2BackingInfo", "vim.vm.device.VirtualDevice.FileBackingInfo", "vim.version.version1", [["diskMode", "string", "vim.version.version1"], ["split", "boolean", "vim.version.version1", {:optional => true}], ["writeThrough", "boolean", "vim.version.version1", {:optional => true}], ["thinProvisioned", "boolean", "vim.version.version1", {:optional => true}], ["eagerlyScrub", "boolean", "vim.version.version5", {:optional => true}], ["uuid", "string", "vim.version.version2", {:optional => true}], ["contentId", "string", "vim.version.version5", {:optional => true}], ["changeId", "string", "vim.version.version5", {:optional => true}], ["parent", "vim.vm.device.VirtualDisk.FlatVer2BackingInfo", "vim.version.version5", {:optional => true}], ["deltaDiskFormat", "string", "vim.version.version7", {:optional => true}], ["digestEnabled", "boolean", "vim.version.version7", {:optional => true}], ["deltaGrainSize", "int", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.vm.device.VirtualDisk.SeSparseBackingInfo", "VirtualDiskSeSparseBackingInfo", "vim.vm.device.VirtualDevice.FileBackingInfo", "vim.version.version8", [["diskMode", "string", "vim.version.version8"], ["writeThrough", "boolean", "vim.version.version8", {:optional => true}], ["uuid", "string", "vim.version.version8", {:optional => true}], ["contentId", "string", "vim.version.version8", {:optional => true}], ["changeId", "string", "vim.version.version8", {:optional => true}], ["parent", "vim.vm.device.VirtualDisk.SeSparseBackingInfo", "vim.version.version8", {:optional => true}], ["deltaDiskFormat", "string", "vim.version.version8", {:optional => true}], ["digestEnabled", "boolean", "vim.version.version8", {:optional => true}], ["grainSize", "int", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.vm.device.VirtualDisk.RawDiskVer2BackingInfo", "VirtualDiskRawDiskVer2BackingInfo", "vim.vm.device.VirtualDevice.DeviceBackingInfo", "vim.version.version1", [["descriptorFileName", "string", "vim.version.version1"], ["uuid", "string", "vim.version.version2", {:optional => true}], ["changeId", "string", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.vm.device.VirtualDisk.PartitionedRawDiskVer2BackingInfo", "VirtualDiskPartitionedRawDiskVer2BackingInfo", "vim.vm.device.VirtualDisk.RawDiskVer2BackingInfo", "vim.version.version1", [["partition", "int[]", "vim.version.version1"]])
    create_data_type("vim.vm.device.VirtualDisk.RawDiskMappingVer1BackingInfo", "VirtualDiskRawDiskMappingVer1BackingInfo", "vim.vm.device.VirtualDevice.FileBackingInfo", "vim.version.version1", [["lunUuid", "string", "vim.version.version1", {:optional => true}], ["deviceName", "string", "vim.version.version1", {:optional => true}], ["compatibilityMode", "string", "vim.version.version1", {:optional => true}], ["diskMode", "string", "vim.version.version1", {:optional => true}], ["uuid", "string", "vim.version.version2", {:optional => true}], ["contentId", "string", "vim.version.version5", {:optional => true}], ["changeId", "string", "vim.version.version5", {:optional => true}], ["parent", "vim.vm.device.VirtualDisk.RawDiskMappingVer1BackingInfo", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.vm.device.VirtualDisk.VFlashCacheConfigInfo", "VirtualDiskVFlashCacheConfigInfo", "vmodl.DynamicData", "vim.version.version9", [["vFlashModule", "string", "vim.version.version9", {:optional => true}], ["reservationInMB", "long", "vim.version.version9", {:optional => true}], ["cacheConsistencyType", "string", "vim.version.version9", {:optional => true}], ["cacheMode", "string", "vim.version.version9", {:optional => true}], ["blockSizeInKB", "long", "vim.version.version9", {:optional => true}]])
    create_enum_type("vim.vm.device.VirtualDisk.VFlashCacheConfigInfo.CacheConsistencyType", "VirtualDiskVFlashCacheConfigInfoCacheConsistencyType", "vim.version.version9", ["strong", "weak"])
    create_enum_type("vim.vm.device.VirtualDisk.VFlashCacheConfigInfo.CacheMode", "VirtualDiskVFlashCacheConfigInfoCacheMode", "vim.version.version9", ["write_thru", "write_back"])
    create_data_type("vim.vm.device.VirtualDiskId", "VirtualDiskId", "vmodl.DynamicData", "vim.version.version7", [["vm", "vim.VirtualMachine", "vim.version.version7"], ["diskId", "int", "vim.version.version7"]])
    create_data_type("vim.vm.device.VirtualDiskOption", "VirtualDiskOption", "vim.vm.device.VirtualDeviceOption", "vim.version.version1", [["capacityInKB", "vim.option.LongOption", "vim.version.version1"], ["ioAllocationOption", "vim.StorageResourceManager.IOAllocationOption", "vim.version.version6"], ["vFlashCacheConfigOption", "vim.vm.device.VirtualDiskOption.VFlashCacheConfigOption", "vim.version.version9", {:optional => true}]])
    create_enum_type("vim.vm.device.VirtualDiskOption.DiskMode", "VirtualDiskMode", "vim.version.version1", ["persistent", "nonpersistent", "undoable", "independent_persistent", "independent_nonpersistent", "append"])
    create_enum_type("vim.vm.device.VirtualDiskOption.CompatibilityMode", "VirtualDiskCompatibilityMode", "vim.version.version1", ["virtualMode", "physicalMode"])
    create_data_type("vim.vm.device.VirtualDiskOption.SparseVer1BackingOption", "VirtualDiskSparseVer1BackingOption", "vim.vm.device.VirtualDeviceOption.FileBackingOption", "vim.version.version1", [["diskModes", "vim.option.ChoiceOption", "vim.version.version1"], ["split", "vim.option.BoolOption", "vim.version.version1"], ["writeThrough", "vim.option.BoolOption", "vim.version.version1"], ["growable", "boolean", "vim.version.version1"]])
    create_data_type("vim.vm.device.VirtualDiskOption.SparseVer2BackingOption", "VirtualDiskSparseVer2BackingOption", "vim.vm.device.VirtualDeviceOption.FileBackingOption", "vim.version.version1", [["diskMode", "vim.option.ChoiceOption", "vim.version.version1"], ["split", "vim.option.BoolOption", "vim.version.version1"], ["writeThrough", "vim.option.BoolOption", "vim.version.version1"], ["growable", "boolean", "vim.version.version1"], ["hotGrowable", "boolean", "vim.version.version2"], ["uuid", "boolean", "vim.version.version2"]])
    create_data_type("vim.vm.device.VirtualDiskOption.FlatVer1BackingOption", "VirtualDiskFlatVer1BackingOption", "vim.vm.device.VirtualDeviceOption.FileBackingOption", "vim.version.version1", [["diskMode", "vim.option.ChoiceOption", "vim.version.version1"], ["split", "vim.option.BoolOption", "vim.version.version1"], ["writeThrough", "vim.option.BoolOption", "vim.version.version1"], ["growable", "boolean", "vim.version.version1"]])
    create_data_type("vim.vm.device.VirtualDiskOption.DeltaDiskFormatsSupported", "VirtualDiskDeltaDiskFormatsSupported", "vmodl.DynamicData", "vim.version.version8", [["datastoreType", "vmodl.TypeName", "vim.version.version8"], ["deltaDiskFormat", "vim.option.ChoiceOption", "vim.version.version8"]])
    create_data_type("vim.vm.device.VirtualDiskOption.FlatVer2BackingOption", "VirtualDiskFlatVer2BackingOption", "vim.vm.device.VirtualDeviceOption.FileBackingOption", "vim.version.version1", [["diskMode", "vim.option.ChoiceOption", "vim.version.version1"], ["split", "vim.option.BoolOption", "vim.version.version1"], ["writeThrough", "vim.option.BoolOption", "vim.version.version1"], ["growable", "boolean", "vim.version.version1"], ["hotGrowable", "boolean", "vim.version.version2"], ["uuid", "boolean", "vim.version.version2"], ["thinProvisioned", "vim.option.BoolOption", "vim.version.version5"], ["eagerlyScrub", "vim.option.BoolOption", "vim.version.version5"], ["deltaDiskFormat", "vim.option.ChoiceOption", "vim.version.version7"], ["deltaDiskFormatsSupported", "vim.vm.device.VirtualDiskOption.DeltaDiskFormatsSupported[]", "vim.version.version8"]])
    create_data_type("vim.vm.device.VirtualDiskOption.SeSparseBackingOption", "VirtualDiskSeSparseBackingOption", "vim.vm.device.VirtualDeviceOption.FileBackingOption", "vim.version.version8", [["diskMode", "vim.option.ChoiceOption", "vim.version.version8"], ["writeThrough", "vim.option.BoolOption", "vim.version.version8"], ["growable", "boolean", "vim.version.version8"], ["hotGrowable", "boolean", "vim.version.version8"], ["uuid", "boolean", "vim.version.version8"], ["deltaDiskFormatsSupported", "vim.vm.device.VirtualDiskOption.DeltaDiskFormatsSupported[]", "vim.version.version8"]])
    create_data_type("vim.vm.device.VirtualDiskOption.RawDiskVer2BackingOption", "VirtualDiskRawDiskVer2BackingOption", "vim.vm.device.VirtualDeviceOption.DeviceBackingOption", "vim.version.version1", [["descriptorFileNameExtensions", "vim.option.ChoiceOption", "vim.version.version1"], ["uuid", "boolean", "vim.version.version2"]])
    create_data_type("vim.vm.device.VirtualDiskOption.PartitionedRawDiskVer2BackingOption", "VirtualDiskPartitionedRawDiskVer2BackingOption", "vim.vm.device.VirtualDiskOption.RawDiskVer2BackingOption", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualDiskOption.RawDiskMappingVer1BackingOption", "VirtualDiskRawDiskMappingVer1BackingOption", "vim.vm.device.VirtualDeviceOption.DeviceBackingOption", "vim.version.version1", [["descriptorFileNameExtensions", "vim.option.ChoiceOption", "vim.version.version1", {:optional => true}], ["compatibilityMode", "vim.option.ChoiceOption", "vim.version.version1"], ["diskMode", "vim.option.ChoiceOption", "vim.version.version1"], ["uuid", "boolean", "vim.version.version2"]])
    create_data_type("vim.vm.device.VirtualDiskOption.VFlashCacheConfigOption", "VirtualDiskOptionVFlashCacheConfigOption", "vmodl.DynamicData", "vim.version.version9", [["cacheConsistencyType", "vim.option.ChoiceOption", "vim.version.version9"], ["cacheMode", "vim.option.ChoiceOption", "vim.version.version9"], ["reservationInMB", "vim.option.LongOption", "vim.version.version9"], ["blockSizeInKB", "vim.option.LongOption", "vim.version.version9"]])
    create_data_type("vim.vm.device.VirtualDiskSpec", "VirtualDiskConfigSpec", "vim.vm.device.VirtualDeviceSpec", "vim.version.version9", [["migrateCache", "boolean", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.vm.device.VirtualEthernetCard", "VirtualEthernetCard", "vim.vm.device.VirtualDevice", "vim.version.version1", [["addressType", "string", "vim.version.version1", {:optional => true}], ["macAddress", "string", "vim.version.version1", {:optional => true}], ["wakeOnLanEnabled", "boolean", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.vm.device.VirtualEthernetCard.NetworkBackingInfo", "VirtualEthernetCardNetworkBackingInfo", "vim.vm.device.VirtualDevice.DeviceBackingInfo", "vim.version.version1", [["network", "vim.Network", "vim.version.version1", {:optional => true}], ["inPassthroughMode", "boolean", "vim.version.version4", {:optional => true}]])
    create_data_type("vim.vm.device.VirtualEthernetCard.LegacyNetworkBackingInfo", "VirtualEthernetCardLegacyNetworkBackingInfo", "vim.vm.device.VirtualDevice.DeviceBackingInfo", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualEthernetCard.DistributedVirtualPortBackingInfo", "VirtualEthernetCardDistributedVirtualPortBackingInfo", "vim.vm.device.VirtualDevice.BackingInfo", "vim.version.version5", [["port", "vim.dvs.PortConnection", "vim.version.version5"]])
    create_data_type("vim.vm.device.VirtualEthernetCard.OpaqueNetworkBackingInfo", "VirtualEthernetCardOpaqueNetworkBackingInfo", "vim.vm.device.VirtualDevice.BackingInfo", "vim.version.version9", [["opaqueNetworkId", "string", "vim.version.version9"], ["opaqueNetworkType", "string", "vim.version.version9"]])
    create_data_type("vim.vm.device.VirtualEthernetCardOption", "VirtualEthernetCardOption", "vim.vm.device.VirtualDeviceOption", "vim.version.version1", [["supportedOUI", "vim.option.ChoiceOption", "vim.version.version1"], ["macType", "vim.option.ChoiceOption", "vim.version.version1"], ["wakeOnLanEnabled", "vim.option.BoolOption", "vim.version.version1"], ["vmDirectPathGen2Supported", "boolean", "vim.version.version6"]])
    create_data_type("vim.vm.device.VirtualEthernetCardOption.NetworkBackingOption", "VirtualEthernetCardNetworkBackingOption", "vim.vm.device.VirtualDeviceOption.DeviceBackingOption", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualEthernetCardOption.OpaqueNetworkBackingOption", "VirtualEthernetCardOpaqueNetworkBackingOption", "vim.vm.device.VirtualDeviceOption.BackingOption", "vim.version.version9", nil)
    create_data_type("vim.vm.device.VirtualEthernetCardOption.LegacyNetworkBackingOption", "VirtualEthernetCardLegacyNetworkBackingOption", "vim.vm.device.VirtualDeviceOption.DeviceBackingOption", "vim.version.version1", nil)
    create_enum_type("vim.vm.device.VirtualEthernetCardOption.LegacyNetworkBackingOption.LegacyNetworkDeviceName", "VirtualEthernetCardLegacyNetworkDeviceName", "vim.version.version1", ["bridged", "nat", "hostonly"])
    create_data_type("vim.vm.device.VirtualEthernetCardOption.DistributedVirtualPortBackingOption", "VirtualEthernetCardDVPortBackingOption", "vim.vm.device.VirtualDeviceOption.BackingOption", "vim.version.version5", nil)
    create_enum_type("vim.vm.device.VirtualEthernetCardOption.MacTypes", "VirtualEthernetCardMacType", "vim.version.version1", ["manual", "generated", "assigned"])
    create_data_type("vim.vm.device.VirtualFloppy", "VirtualFloppy", "vim.vm.device.VirtualDevice", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualFloppy.ImageBackingInfo", "VirtualFloppyImageBackingInfo", "vim.vm.device.VirtualDevice.FileBackingInfo", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualFloppy.DeviceBackingInfo", "VirtualFloppyDeviceBackingInfo", "vim.vm.device.VirtualDevice.DeviceBackingInfo", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualFloppy.RemoteDeviceBackingInfo", "VirtualFloppyRemoteDeviceBackingInfo", "vim.vm.device.VirtualDevice.RemoteDeviceBackingInfo", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualFloppyOption", "VirtualFloppyOption", "vim.vm.device.VirtualDeviceOption", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualFloppyOption.ImageBackingOption", "VirtualFloppyImageBackingOption", "vim.vm.device.VirtualDeviceOption.FileBackingOption", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualFloppyOption.DeviceBackingOption", "VirtualFloppyDeviceBackingOption", "vim.vm.device.VirtualDeviceOption.DeviceBackingOption", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualFloppyOption.RemoteDeviceBackingOption", "VirtualFloppyRemoteDeviceBackingOption", "vim.vm.device.VirtualDeviceOption.RemoteDeviceBackingOption", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualKeyboard", "VirtualKeyboard", "vim.vm.device.VirtualDevice", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualKeyboardOption", "VirtualKeyboardOption", "vim.vm.device.VirtualDeviceOption", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualPCIPassthrough", "VirtualPCIPassthrough", "vim.vm.device.VirtualDevice", "vim.version.version5", nil)
    create_data_type("vim.vm.device.VirtualPCIPassthrough.DeviceBackingInfo", "VirtualPCIPassthroughDeviceBackingInfo", "vim.vm.device.VirtualDevice.DeviceBackingInfo", "vim.version.version5", [["id", "string", "vim.version.version5"], ["deviceId", "string", "vim.version.version5"], ["systemId", "string", "vim.version.version5"], ["vendorId", "short", "vim.version.version5"]])
    create_data_type("vim.vm.device.VirtualPCIPassthroughOption", "VirtualPCIPassthroughOption", "vim.vm.device.VirtualDeviceOption", "vim.version.version5", nil)
    create_data_type("vim.vm.device.VirtualPCIPassthroughOption.DeviceBackingOption", "VirtualPCIPassthroughDeviceBackingOption", "vim.vm.device.VirtualDeviceOption.DeviceBackingOption", "vim.version.version5", nil)
    create_data_type("vim.vm.device.VirtualPCNet32", "VirtualPCNet32", "vim.vm.device.VirtualEthernetCard", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualPCNet32Option", "VirtualPCNet32Option", "vim.vm.device.VirtualEthernetCardOption", "vim.version.version1", [["supportsMorphing", "boolean", "vim.version.version1"]])
    create_data_type("vim.vm.device.VirtualParallelPort", "VirtualParallelPort", "vim.vm.device.VirtualDevice", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualParallelPort.FileBackingInfo", "VirtualParallelPortFileBackingInfo", "vim.vm.device.VirtualDevice.FileBackingInfo", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualParallelPort.DeviceBackingInfo", "VirtualParallelPortDeviceBackingInfo", "vim.vm.device.VirtualDevice.DeviceBackingInfo", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualParallelPortOption", "VirtualParallelPortOption", "vim.vm.device.VirtualDeviceOption", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualParallelPortOption.FileBackingOption", "VirtualParallelPortFileBackingOption", "vim.vm.device.VirtualDeviceOption.FileBackingOption", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualParallelPortOption.DeviceBackingOption", "VirtualParallelPortDeviceBackingOption", "vim.vm.device.VirtualDeviceOption.DeviceBackingOption", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualPointingDevice", "VirtualPointingDevice", "vim.vm.device.VirtualDevice", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualPointingDevice.DeviceBackingInfo", "VirtualPointingDeviceDeviceBackingInfo", "vim.vm.device.VirtualDevice.DeviceBackingInfo", "vim.version.version1", [["hostPointingDevice", "string", "vim.version.version1"]])
    create_data_type("vim.vm.device.VirtualPointingDeviceOption", "VirtualPointingDeviceOption", "vim.vm.device.VirtualDeviceOption", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualPointingDeviceOption.DeviceBackingOption", "VirtualPointingDeviceBackingOption", "vim.vm.device.VirtualDeviceOption.DeviceBackingOption", "vim.version.version1", [["hostPointingDevice", "vim.option.ChoiceOption", "vim.version.version1"]])
    create_enum_type("vim.vm.device.VirtualPointingDeviceOption.DeviceBackingOption.HostPointingDeviceChoice", "VirtualPointingDeviceHostChoice", "vim.version.version1", ["autodetect", "intellimouseExplorer", "intellimousePs2", "logitechMouseman", "microsoft_serial", "mouseSystems", "mousemanSerial", "ps2"])
    create_data_type("vim.vm.device.VirtualSCSIPassthrough", "VirtualSCSIPassthrough", "vim.vm.device.VirtualDevice", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualSCSIPassthrough.DeviceBackingInfo", "VirtualSCSIPassthroughDeviceBackingInfo", "vim.vm.device.VirtualDevice.DeviceBackingInfo", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualSCSIPassthroughOption", "VirtualSCSIPassthroughOption", "vim.vm.device.VirtualDeviceOption", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualSCSIPassthroughOption.DeviceBackingOption", "VirtualSCSIPassthroughDeviceBackingOption", "vim.vm.device.VirtualDeviceOption.DeviceBackingOption", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualSerialPort", "VirtualSerialPort", "vim.vm.device.VirtualDevice", "vim.version.version1", [["yieldOnPoll", "boolean", "vim.version.version1"]])
    create_data_type("vim.vm.device.VirtualSerialPort.FileBackingInfo", "VirtualSerialPortFileBackingInfo", "vim.vm.device.VirtualDevice.FileBackingInfo", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualSerialPort.DeviceBackingInfo", "VirtualSerialPortDeviceBackingInfo", "vim.vm.device.VirtualDevice.DeviceBackingInfo", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualSerialPort.PipeBackingInfo", "VirtualSerialPortPipeBackingInfo", "vim.vm.device.VirtualDevice.PipeBackingInfo", "vim.version.version1", [["endpoint", "string", "vim.version.version1"], ["noRxLoss", "boolean", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.vm.device.VirtualSerialPort.URIBackingInfo", "VirtualSerialPortURIBackingInfo", "vim.vm.device.VirtualDevice.URIBackingInfo", "vim.version.version6", nil)
    create_data_type("vim.vm.device.VirtualSerialPort.ThinPrintBackingInfo", "VirtualSerialPortThinPrintBackingInfo", "vim.vm.device.VirtualDevice.BackingInfo", "vim.version.version8", nil)
    create_data_type("vim.vm.device.VirtualSerialPortOption", "VirtualSerialPortOption", "vim.vm.device.VirtualDeviceOption", "vim.version.version1", [["yieldOnPoll", "vim.option.BoolOption", "vim.version.version1"]])
    create_enum_type("vim.vm.device.VirtualSerialPortOption.EndPoint", "VirtualSerialPortEndPoint", "vim.version.version1", ["client", "server"])
    create_data_type("vim.vm.device.VirtualSerialPortOption.FileBackingOption", "VirtualSerialPortFileBackingOption", "vim.vm.device.VirtualDeviceOption.FileBackingOption", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualSerialPortOption.DeviceBackingOption", "VirtualSerialPortDeviceBackingOption", "vim.vm.device.VirtualDeviceOption.DeviceBackingOption", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualSerialPortOption.PipeBackingOption", "VirtualSerialPortPipeBackingOption", "vim.vm.device.VirtualDeviceOption.PipeBackingOption", "vim.version.version1", [["endpoint", "vim.option.ChoiceOption", "vim.version.version1"], ["noRxLoss", "vim.option.BoolOption", "vim.version.version1"]])
    create_data_type("vim.vm.device.VirtualSerialPortOption.URIBackingOption", "VirtualSerialPortURIBackingOption", "vim.vm.device.VirtualDeviceOption.URIBackingOption", "vim.version.version6", nil)
    create_data_type("vim.vm.device.VirtualSerialPortOption.ThinPrintBackingOption", "VirtualSerialPortThinPrintBackingOption", "vim.vm.device.VirtualDeviceOption.BackingOption", "vim.version.version8", nil)
    create_data_type("vim.vm.device.VirtualSoundCard", "VirtualSoundCard", "vim.vm.device.VirtualDevice", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualSoundCard.DeviceBackingInfo", "VirtualSoundCardDeviceBackingInfo", "vim.vm.device.VirtualDevice.DeviceBackingInfo", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualSoundCardOption", "VirtualSoundCardOption", "vim.vm.device.VirtualDeviceOption", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualSoundCardOption.DeviceBackingOption", "VirtualSoundCardDeviceBackingOption", "vim.vm.device.VirtualDeviceOption.DeviceBackingOption", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualSriovEthernetCard", "VirtualSriovEthernetCard", "vim.vm.device.VirtualEthernetCard", "vim.version.version9", [["allowGuestOSMtuChange", "boolean", "vim.version.version9", {:optional => true}], ["sriovBacking", "vim.vm.device.VirtualSriovEthernetCard.SriovBackingInfo", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.vm.device.VirtualSriovEthernetCard.SriovBackingInfo", "VirtualSriovEthernetCardSriovBackingInfo", "vim.vm.device.VirtualDevice.BackingInfo", "vim.version.version9", [["physicalFunctionBacking", "vim.vm.device.VirtualPCIPassthrough.DeviceBackingInfo", "vim.version.version9", {:optional => true}], ["virtualFunctionBacking", "vim.vm.device.VirtualPCIPassthrough.DeviceBackingInfo", "vim.version.version9", {:optional => true}], ["virtualFunctionIndex", "int", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.vm.device.VirtualSriovEthernetCardOption", "VirtualSriovEthernetCardOption", "vim.vm.device.VirtualEthernetCardOption", "vim.version.version9", nil)
    create_data_type("vim.vm.device.VirtualSriovEthernetCardOption.SriovBackingOption", "VirtualSriovEthernetCardSriovBackingOption", "vim.vm.device.VirtualDeviceOption.BackingOption", "vim.version.version9", nil)
    create_data_type("vim.vm.device.VirtualUSB", "VirtualUSB", "vim.vm.device.VirtualDevice", "vim.version.version1", [["connected", "boolean", "vim.version.version2"], ["vendor", "int", "vim.version.version6", {:optional => true}], ["product", "int", "vim.version.version6", {:optional => true}], ["family", "string[]", "vim.version.version6", {:optional => true}], ["speed", "string[]", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.vm.device.VirtualUSB.USBBackingInfo", "VirtualUSBUSBBackingInfo", "vim.vm.device.VirtualDevice.DeviceBackingInfo", "vim.version.version2", nil)
    create_data_type("vim.vm.device.VirtualUSB.RemoteHostBackingInfo", "VirtualUSBRemoteHostBackingInfo", "vim.vm.device.VirtualDevice.DeviceBackingInfo", "vim.version.version6", [["hostname", "string", "vim.version.version6"]])
    create_data_type("vim.vm.device.VirtualUSB.RemoteClientBackingInfo", "VirtualUSBRemoteClientBackingInfo", "vim.vm.device.VirtualDevice.RemoteDeviceBackingInfo", "vim.version.version7", [["hostname", "string", "vim.version.version7"]])
    create_data_type("vim.vm.device.VirtualUSBOption", "VirtualUSBOption", "vim.vm.device.VirtualDeviceOption", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualUSBOption.USBBackingOption", "VirtualUSBUSBBackingOption", "vim.vm.device.VirtualDeviceOption.DeviceBackingOption", "vim.version.version2", nil)
    create_data_type("vim.vm.device.VirtualUSBOption.RemoteHostBackingOption", "VirtualUSBRemoteHostBackingOption", "vim.vm.device.VirtualDeviceOption.DeviceBackingOption", "vim.version.version6", nil)
    create_data_type("vim.vm.device.VirtualUSBOption.RemoteClientBackingOption", "VirtualUSBRemoteClientBackingOption", "vim.vm.device.VirtualDeviceOption.RemoteDeviceBackingOption", "vim.version.version7", nil)
    create_data_type("vim.vm.device.VirtualVMCIDevice", "VirtualMachineVMCIDevice", "vim.vm.device.VirtualDevice", "vim.version.version4", [["id", "long", "vim.version.version4", {:optional => true}], ["allowUnrestrictedCommunication", "boolean", "vim.version.version4", {:optional => true}]])
    create_data_type("vim.vm.device.VirtualVMCIDeviceOption", "VirtualMachineVMCIDeviceOption", "vim.vm.device.VirtualDeviceOption", "vim.version.version4", [["allowUnrestrictedCommunication", "vim.option.BoolOption", "vim.version.version4"]])
    create_data_type("vim.vm.device.VirtualVMIROM", "VirtualMachineVMIROM", "vim.vm.device.VirtualDevice", "vim.version.version2", nil)
    create_data_type("vim.vm.device.VirtualVMIROMOption", "VirtualVMIROMOption", "vim.vm.device.VirtualDeviceOption", "vim.version.version2", nil)
    create_data_type("vim.vm.device.VirtualVideoCard", "VirtualMachineVideoCard", "vim.vm.device.VirtualDevice", "vim.version.version1", [["videoRamSizeInKB", "long", "vim.version.version1", {:optional => true}], ["numDisplays", "int", "vim.version.version4", {:optional => true}], ["useAutoDetect", "boolean", "vim.version.version4", {:optional => true}], ["enable3DSupport", "boolean", "vim.version.version4", {:optional => true}], ["use3dRenderer", "string", "vim.version.version8", {:optional => true}]])
    create_enum_type("vim.vm.device.VirtualVideoCard.Use3dRenderer", "VirtualMachineVideoCardUse3dRenderer", "vim.version.version8", ["automatic", "software", "hardware"])
    create_data_type("vim.vm.device.VirtualVideoCardOption", "VirtualVideoCardOption", "vim.vm.device.VirtualDeviceOption", "vim.version.version1", [["videoRamSizeInKB", "vim.option.LongOption", "vim.version.version1", {:optional => true}], ["numDisplays", "vim.option.IntOption", "vim.version.version4", {:optional => true}], ["useAutoDetect", "vim.option.BoolOption", "vim.version.version4", {:optional => true}], ["support3D", "vim.option.BoolOption", "vim.version.version4", {:optional => true}], ["use3dRendererSupported", "vim.option.BoolOption", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.vm.device.VirtualVmxnet", "VirtualVmxnet", "vim.vm.device.VirtualEthernetCard", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualVmxnet2", "VirtualVmxnet2", "vim.vm.device.VirtualVmxnet", "vim.version.version2", nil)
    create_data_type("vim.vm.device.VirtualVmxnet3", "VirtualVmxnet3", "vim.vm.device.VirtualVmxnet", "vim.version.version4", nil)
    create_data_type("vim.vm.device.VirtualVmxnetOption", "VirtualVmxnetOption", "vim.vm.device.VirtualEthernetCardOption", "vim.version.version1", nil)
    create_managed_type("vim.vm.guest.AuthManager", "GuestAuthManager", "vmodl.ManagedObject", "vim.version.version7", nil, [["validateCredentials", "ValidateCredentialsInGuest", "vim.version.version7", [["vm", "vim.VirtualMachine", "vim.version.version7", {}, "VirtualMachine.GuestOperations.Query"], ["auth", "vim.vm.guest.GuestAuthentication", "vim.version.version7", {}, nil]], [{}, "void", "void"], nil, ["vim.fault.GuestOperationsFault", "vim.fault.InvalidState", "vim.fault.TaskInProgress"]], ["acquireCredentials", "AcquireCredentialsInGuest", "vim.version.version7", [["vm", "vim.VirtualMachine", "vim.version.version7", {}, "VirtualMachine.GuestOperations.Query"], ["requestedAuth", "vim.vm.guest.GuestAuthentication", "vim.version.version7", {}, nil], ["sessionID", "long", "vim.version.version7", {:optional => true}, nil]], [{}, "vim.vm.guest.GuestAuthentication", "vim.vm.guest.GuestAuthentication"], nil, ["vim.fault.GuestOperationsFault", "vim.fault.TaskInProgress", "vim.fault.InvalidState"]], ["releaseCredentials", "ReleaseCredentialsInGuest", "vim.version.version7", [["vm", "vim.VirtualMachine", "vim.version.version7", {}, "VirtualMachine.GuestOperations.Query"], ["auth", "vim.vm.guest.GuestAuthentication", "vim.version.version7", {}, nil]], [{}, "void", "void"], nil, ["vim.fault.GuestOperationsFault", "vim.fault.TaskInProgress", "vim.fault.InvalidState"]]])
    create_managed_type("vim.vm.guest.FileManager", "GuestFileManager", "vmodl.ManagedObject", "vim.version.version7", nil, [["makeDirectory", "MakeDirectoryInGuest", "vim.version.version7", [["vm", "vim.VirtualMachine", "vim.version.version7", {}, "VirtualMachine.GuestOperations.Modify"], ["auth", "vim.vm.guest.GuestAuthentication", "vim.version.version7", {}, nil], ["directoryPath", "string", "vim.version.version7", {}, nil], ["createParentDirectories", "boolean", "vim.version.version7", {}, nil]], [{}, "void", "void"], nil, ["vim.fault.GuestOperationsFault", "vim.fault.InvalidState", "vim.fault.TaskInProgress", "vim.fault.FileFault"]], ["deleteFile", "DeleteFileInGuest", "vim.version.version7", [["vm", "vim.VirtualMachine", "vim.version.version7", {}, "VirtualMachine.GuestOperations.Modify"], ["auth", "vim.vm.guest.GuestAuthentication", "vim.version.version7", {}, nil], ["filePath", "string", "vim.version.version7", {}, nil]], [{}, "void", "void"], nil, ["vim.fault.GuestOperationsFault", "vim.fault.InvalidState", "vim.fault.TaskInProgress", "vim.fault.FileFault"]], ["deleteDirectory", "DeleteDirectoryInGuest", "vim.version.version7", [["vm", "vim.VirtualMachine", "vim.version.version7", {}, "VirtualMachine.GuestOperations.Modify"], ["auth", "vim.vm.guest.GuestAuthentication", "vim.version.version7", {}, nil], ["directoryPath", "string", "vim.version.version7", {}, nil], ["recursive", "boolean", "vim.version.version7", {}, nil]], [{}, "void", "void"], nil, ["vim.fault.GuestOperationsFault", "vim.fault.InvalidState", "vim.fault.TaskInProgress", "vim.fault.FileFault"]], ["moveDirectory", "MoveDirectoryInGuest", "vim.version.version7", [["vm", "vim.VirtualMachine", "vim.version.version7", {}, "VirtualMachine.GuestOperations.Modify"], ["auth", "vim.vm.guest.GuestAuthentication", "vim.version.version7", {}, nil], ["srcDirectoryPath", "string", "vim.version.version7", {}, nil], ["dstDirectoryPath", "string", "vim.version.version7", {}, nil]], [{}, "void", "void"], nil, ["vim.fault.GuestOperationsFault", "vim.fault.InvalidState", "vim.fault.TaskInProgress", "vim.fault.FileFault"]], ["moveFile", "MoveFileInGuest", "vim.version.version7", [["vm", "vim.VirtualMachine", "vim.version.version7", {}, "VirtualMachine.GuestOperations.Modify"], ["auth", "vim.vm.guest.GuestAuthentication", "vim.version.version7", {}, nil], ["srcFilePath", "string", "vim.version.version7", {}, nil], ["dstFilePath", "string", "vim.version.version7", {}, nil], ["overwrite", "boolean", "vim.version.version7", {}, nil]], [{}, "void", "void"], nil, ["vim.fault.GuestOperationsFault", "vim.fault.InvalidState", "vim.fault.TaskInProgress", "vim.fault.FileFault"]], ["createTemporaryFile", "CreateTemporaryFileInGuest", "vim.version.version7", [["vm", "vim.VirtualMachine", "vim.version.version7", {}, "VirtualMachine.GuestOperations.Modify"], ["auth", "vim.vm.guest.GuestAuthentication", "vim.version.version7", {}, nil], ["prefix", "string", "vim.version.version7", {}, nil], ["suffix", "string", "vim.version.version7", {}, nil], ["directoryPath", "string", "vim.version.version7", {:optional => true}, nil]], [{}, "string", "string"], nil, ["vim.fault.GuestOperationsFault", "vim.fault.InvalidState", "vim.fault.TaskInProgress", "vim.fault.FileFault"]], ["createTemporaryDirectory", "CreateTemporaryDirectoryInGuest", "vim.version.version7", [["vm", "vim.VirtualMachine", "vim.version.version7", {}, "VirtualMachine.GuestOperations.Modify"], ["auth", "vim.vm.guest.GuestAuthentication", "vim.version.version7", {}, nil], ["prefix", "string", "vim.version.version7", {}, nil], ["suffix", "string", "vim.version.version7", {}, nil], ["directoryPath", "string", "vim.version.version7", {:optional => true}, nil]], [{}, "string", "string"], nil, ["vim.fault.GuestOperationsFault", "vim.fault.InvalidState", "vim.fault.TaskInProgress", "vim.fault.FileFault"]], ["listFiles", "ListFilesInGuest", "vim.version.version7", [["vm", "vim.VirtualMachine", "vim.version.version7", {}, "VirtualMachine.GuestOperations.Query"], ["auth", "vim.vm.guest.GuestAuthentication", "vim.version.version7", {}, nil], ["filePath", "string", "vim.version.version7", {}, nil], ["index", "int", "vim.version.version7", {:optional => true}, nil], ["maxResults", "int", "vim.version.version7", {:optional => true}, nil], ["matchPattern", "string", "vim.version.version7", {:optional => true}, nil]], [{}, "vim.vm.guest.FileManager.ListFileInfo", "vim.vm.guest.FileManager.ListFileInfo"], nil, ["vim.fault.GuestOperationsFault", "vim.fault.InvalidState", "vim.fault.TaskInProgress", "vim.fault.FileFault"]], ["changeFileAttributes", "ChangeFileAttributesInGuest", "vim.version.version7", [["vm", "vim.VirtualMachine", "vim.version.version7", {}, "VirtualMachine.GuestOperations.Modify"], ["auth", "vim.vm.guest.GuestAuthentication", "vim.version.version7", {}, nil], ["guestFilePath", "string", "vim.version.version7", {}, nil], ["fileAttributes", "vim.vm.guest.FileManager.FileAttributes", "vim.version.version7", {}, nil]], [{}, "void", "void"], nil, ["vim.fault.GuestOperationsFault", "vim.fault.InvalidState", "vim.fault.TaskInProgress", "vim.fault.FileFault"]], ["initiateFileTransferFromGuest", "InitiateFileTransferFromGuest", "vim.version.version7", [["vm", "vim.VirtualMachine", "vim.version.version7", {}, "VirtualMachine.GuestOperations.Query"], ["auth", "vim.vm.guest.GuestAuthentication", "vim.version.version7", {}, nil], ["guestFilePath", "string", "vim.version.version7", {}, nil]], [{}, "vim.vm.guest.FileManager.FileTransferInformation", "vim.vm.guest.FileManager.FileTransferInformation"], nil, ["vim.fault.GuestOperationsFault", "vim.fault.InvalidState", "vim.fault.TaskInProgress", "vim.fault.FileFault"]], ["initiateFileTransferToGuest", "InitiateFileTransferToGuest", "vim.version.version7", [["vm", "vim.VirtualMachine", "vim.version.version7", {}, "VirtualMachine.GuestOperations.Modify"], ["auth", "vim.vm.guest.GuestAuthentication", "vim.version.version7", {}, nil], ["guestFilePath", "string", "vim.version.version7", {}, nil], ["fileAttributes", "vim.vm.guest.FileManager.FileAttributes", "vim.version.version7", {}, nil], ["fileSize", "long", "vim.version.version7", {}, nil], ["overwrite", "boolean", "vim.version.version7", {}, nil]], [{}, "string", "string"], nil, ["vim.fault.GuestOperationsFault", "vim.fault.InvalidState", "vim.fault.TaskInProgress", "vim.fault.FileFault"]]])
    create_data_type("vim.vm.guest.FileManager.FileAttributes", "GuestFileAttributes", "vmodl.DynamicData", "vim.version.version7", [["modificationTime", "vmodl.DateTime", "vim.version.version7", {:optional => true}], ["accessTime", "vmodl.DateTime", "vim.version.version7", {:optional => true}], ["symlinkTarget", "string", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.vm.guest.FileManager.PosixFileAttributes", "GuestPosixFileAttributes", "vim.vm.guest.FileManager.FileAttributes", "vim.version.version7", [["ownerId", "int", "vim.version.version7", {:optional => true}], ["groupId", "int", "vim.version.version7", {:optional => true}], ["permissions", "long", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.vm.guest.FileManager.WindowsFileAttributes", "GuestWindowsFileAttributes", "vim.vm.guest.FileManager.FileAttributes", "vim.version.version7", [["hidden", "boolean", "vim.version.version7", {:optional => true}], ["readOnly", "boolean", "vim.version.version7", {:optional => true}], ["createTime", "vmodl.DateTime", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.vm.guest.FileManager.FileInfo", "GuestFileInfo", "vmodl.DynamicData", "vim.version.version7", [["path", "string", "vim.version.version7"], ["type", "string", "vim.version.version7"], ["size", "long", "vim.version.version7"], ["attributes", "vim.vm.guest.FileManager.FileAttributes", "vim.version.version7"]])
    create_enum_type("vim.vm.guest.FileManager.FileInfo.FileType", "GuestFileType", "vim.version.version7", ["file", "directory", "symlink"])
    create_data_type("vim.vm.guest.FileManager.ListFileInfo", "GuestListFileInfo", "vmodl.DynamicData", "vim.version.version7", [["files", "vim.vm.guest.FileManager.FileInfo[]", "vim.version.version7", {:optional => true}], ["remaining", "int", "vim.version.version7"]])
    create_data_type("vim.vm.guest.FileManager.FileTransferInformation", "FileTransferInformation", "vmodl.DynamicData", "vim.version.version7", [["attributes", "vim.vm.guest.FileManager.FileAttributes", "vim.version.version7"], ["size", "long", "vim.version.version7"], ["url", "string", "vim.version.version7"]])
    create_data_type("vim.vm.guest.GuestAuthentication", "GuestAuthentication", "vmodl.DynamicData", "vim.version.version7", [["interactiveSession", "boolean", "vim.version.version7"]])
    create_managed_type("vim.vm.guest.GuestOperationsManager", "GuestOperationsManager", "vmodl.ManagedObject", "vim.version.version7", [["authManager", "vim.vm.guest.AuthManager", "vim.version.version7", {:optional => true}, "System.Anonymous"], ["fileManager", "vim.vm.guest.FileManager", "vim.version.version7", {:optional => true}, "System.Anonymous"], ["processManager", "vim.vm.guest.ProcessManager", "vim.version.version7", {:optional => true}, "System.Anonymous"]], nil)
    create_data_type("vim.vm.guest.NamePasswordAuthentication", "NamePasswordAuthentication", "vim.vm.guest.GuestAuthentication", "vim.version.version7", [["username", "string", "vim.version.version7"], ["password", "string", "vim.version.version7"]])
    create_managed_type("vim.vm.guest.ProcessManager", "GuestProcessManager", "vmodl.ManagedObject", "vim.version.version7", nil, [["startProgram", "StartProgramInGuest", "vim.version.version7", [["vm", "vim.VirtualMachine", "vim.version.version7", {}, "VirtualMachine.GuestOperations.Execute"], ["auth", "vim.vm.guest.GuestAuthentication", "vim.version.version7", {}, nil], ["spec", "vim.vm.guest.ProcessManager.ProgramSpec", "vim.version.version7", {}, nil]], [{}, "long", "long"], nil, ["vim.fault.GuestOperationsFault", "vim.fault.InvalidState", "vim.fault.TaskInProgress", "vim.fault.FileFault"]], ["listProcesses", "ListProcessesInGuest", "vim.version.version7", [["vm", "vim.VirtualMachine", "vim.version.version7", {}, "VirtualMachine.GuestOperations.Query"], ["auth", "vim.vm.guest.GuestAuthentication", "vim.version.version7", {}, nil], ["pids", "long[]", "vim.version.version7", {:optional => true}, nil]], [{:optional => true}, "vim.vm.guest.ProcessManager.ProcessInfo[]", "vim.vm.guest.ProcessManager.ProcessInfo[]"], nil, ["vim.fault.GuestOperationsFault", "vim.fault.InvalidState", "vim.fault.TaskInProgress"]], ["terminateProcess", "TerminateProcessInGuest", "vim.version.version7", [["vm", "vim.VirtualMachine", "vim.version.version7", {}, "VirtualMachine.GuestOperations.Execute"], ["auth", "vim.vm.guest.GuestAuthentication", "vim.version.version7", {}, nil], ["pid", "long", "vim.version.version7", {}, nil]], [{}, "void", "void"], nil, ["vim.fault.GuestOperationsFault", "vim.fault.InvalidState", "vim.fault.TaskInProgress"]], ["readEnvironmentVariable", "ReadEnvironmentVariableInGuest", "vim.version.version7", [["vm", "vim.VirtualMachine", "vim.version.version7", {}, "VirtualMachine.GuestOperations.Query"], ["auth", "vim.vm.guest.GuestAuthentication", "vim.version.version7", {}, nil], ["names", "string[]", "vim.version.version7", {:optional => true}, nil]], [{:optional => true}, "string[]", "string[]"], nil, ["vim.fault.GuestOperationsFault", "vim.fault.InvalidState", "vim.fault.TaskInProgress"]]])
    create_data_type("vim.vm.guest.ProcessManager.ProgramSpec", "GuestProgramSpec", "vmodl.DynamicData", "vim.version.version7", [["programPath", "string", "vim.version.version7"], ["arguments", "string", "vim.version.version7"], ["workingDirectory", "string", "vim.version.version7", {:optional => true}], ["envVariables", "string[]", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.vm.guest.ProcessManager.WindowsProgramSpec", "GuestWindowsProgramSpec", "vim.vm.guest.ProcessManager.ProgramSpec", "vim.version.version7", [["startMinimized", "boolean", "vim.version.version7"]])
    create_data_type("vim.vm.guest.ProcessManager.ProcessInfo", "GuestProcessInfo", "vmodl.DynamicData", "vim.version.version7", [["name", "string", "vim.version.version7"], ["pid", "long", "vim.version.version7"], ["owner", "string", "vim.version.version7"], ["cmdLine", "string", "vim.version.version7"], ["startTime", "vmodl.DateTime", "vim.version.version7"], ["endTime", "vmodl.DateTime", "vim.version.version7", {:optional => true}], ["exitCode", "int", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.vm.guest.SSPIAuthentication", "SSPIAuthentication", "vim.vm.guest.GuestAuthentication", "vim.version.version7", [["sspiToken", "string", "vim.version.version7"]])
    create_data_type("vim.vm.guest.TicketedSessionAuthentication", "TicketedSessionAuthentication", "vim.vm.guest.GuestAuthentication", "vim.version.version7", [["ticket", "string", "vim.version.version7"]])
    create_data_type("vim.vsan.cluster.ConfigInfo", "VsanClusterConfigInfo", "vmodl.DynamicData", "vim.version.version9", [["enabled", "boolean", "vim.version.version9", {:optional => true}], ["defaultConfig", "vim.vsan.cluster.ConfigInfo.HostDefaultInfo", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.vsan.cluster.ConfigInfo.HostDefaultInfo", "VsanClusterConfigInfoHostDefaultInfo", "vmodl.DynamicData", "vim.version.version9", [["uuid", "string", "vim.version.version9", {:optional => true}], ["autoClaimStorage", "boolean", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.vsan.host.ClusterStatus", "VsanHostClusterStatus", "vmodl.DynamicData", "vim.version.version9", [["uuid", "string", "vim.version.version9", {:optional => true}], ["nodeUuid", "string", "vim.version.version9", {:optional => true}], ["health", "string", "vim.version.version9"], ["nodeState", "vim.vsan.host.ClusterStatus.State", "vim.version.version9"], ["memberUuid", "string[]", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.vsan.host.ClusterStatus.State", "VsanHostClusterStatusState", "vmodl.DynamicData", "vim.version.version9", [["state", "string", "vim.version.version9"], ["completion", "vim.vsan.host.ClusterStatus.State.CompletionEstimate", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.vsan.host.ClusterStatus.State.CompletionEstimate", "VsanHostClusterStatusStateCompletionEstimate", "vmodl.DynamicData", "vim.version.version9", [["completeTime", "vmodl.DateTime", "vim.version.version9", {:optional => true}], ["percentComplete", "int", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.vsan.host.ConfigInfo", "VsanHostConfigInfo", "vmodl.DynamicData", "vim.version.version9", [["enabled", "boolean", "vim.version.version9", {:optional => true}], ["hostSystem", "vim.HostSystem", "vim.version.version9", {:optional => true}], ["clusterInfo", "vim.vsan.host.ConfigInfo.ClusterInfo", "vim.version.version9", {:optional => true}], ["storageInfo", "vim.vsan.host.ConfigInfo.StorageInfo", "vim.version.version9", {:optional => true}], ["networkInfo", "vim.vsan.host.ConfigInfo.NetworkInfo", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.vsan.host.ConfigInfo.StorageInfo", "VsanHostConfigInfoStorageInfo", "vmodl.DynamicData", "vim.version.version9", [["autoClaimStorage", "boolean", "vim.version.version9", {:optional => true}], ["diskMapping", "vim.vsan.host.DiskMapping[]", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.vsan.host.ConfigInfo.ClusterInfo", "VsanHostConfigInfoClusterInfo", "vmodl.DynamicData", "vim.version.version9", [["uuid", "string", "vim.version.version9", {:optional => true}], ["nodeUuid", "string", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.vsan.host.ConfigInfo.NetworkInfo", "VsanHostConfigInfoNetworkInfo", "vmodl.DynamicData", "vim.version.version9", [["port", "vim.vsan.host.ConfigInfo.NetworkInfo.PortConfig[]", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.vsan.host.ConfigInfo.NetworkInfo.PortConfig", "VsanHostConfigInfoNetworkInfoPortConfig", "vmodl.DynamicData", "vim.version.version9", [["ipConfig", "vim.vsan.host.IpConfig", "vim.version.version9", {:optional => true}], ["device", "string", "vim.version.version9"]])
    create_data_type("vim.vsan.host.DecommissionMode", "VsanHostDecommissionMode", "vmodl.DynamicData", "vim.version.version9", [["objectAction", "string", "vim.version.version9"]])
    create_enum_type("vim.vsan.host.DecommissionMode.ObjectAction", "VsanHostDecommissionModeObjectAction", "vim.version.version9", ["noAction", "ensureObjectAccessibility", "evacuateAllData"])
    create_data_type("vim.vsan.host.DiskMapResult", "VsanHostDiskMapResult", "vmodl.DynamicData", "vim.version.version9", [["mapping", "vim.vsan.host.DiskMapping", "vim.version.version9"], ["diskResult", "vim.vsan.host.DiskResult[]", "vim.version.version9", {:optional => true}], ["error", "vmodl.MethodFault", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.vsan.host.DiskMapping", "VsanHostDiskMapping", "vmodl.DynamicData", "vim.version.version9", [["ssd", "vim.host.ScsiDisk", "vim.version.version9"], ["nonSsd", "vim.host.ScsiDisk[]", "vim.version.version9"]])
    create_data_type("vim.vsan.host.DiskResult", "VsanHostDiskResult", "vmodl.DynamicData", "vim.version.version9", [["disk", "vim.host.ScsiDisk", "vim.version.version9"], ["state", "string", "vim.version.version9"], ["vsanUuid", "string", "vim.version.version9", {:optional => true}], ["error", "vmodl.MethodFault", "vim.version.version9", {:optional => true}]])
    create_enum_type("vim.vsan.host.DiskResult.State", "VsanHostDiskResultState", "vim.version.version9", ["inUse", "eligible", "ineligible"])
    create_enum_type("vim.vsan.host.HealthState", "VsanHostHealthState", "vim.version.version9", ["unknown", "healthy", "unhealthy"])
    create_data_type("vim.vsan.host.IpConfig", "VsanHostIpConfig", "vmodl.DynamicData", "vim.version.version9", [["upstreamIpAddress", "string", "vim.version.version9"], ["downstreamIpAddress", "string", "vim.version.version9"]])
    create_data_type("vim.vsan.host.MembershipInfo", "VsanHostMembershipInfo", "vmodl.DynamicData", "vim.version.version9", [["nodeUuid", "string", "vim.version.version9"], ["hostname", "string", "vim.version.version9"]])
    create_enum_type("vim.vsan.host.NodeState", "VsanHostNodeState", "vim.version.version9", ["error", "disabled", "agent", "master", "backup", "starting", "stopping", "enteringMaintenanceMode", "exitingMaintenanceMode", "decommissioning"])
    create_data_type("vim.vsan.host.VsanRuntimeInfo", "VsanHostRuntimeInfo", "vmodl.DynamicData", "vim.version.version9", [["membershipList", "vim.vsan.host.MembershipInfo[]", "vim.version.version9", {:optional => true}], ["diskIssues", "vim.vsan.host.VsanRuntimeInfo.DiskIssue[]", "vim.version.version9", {:optional => true}], ["accessGenNo", "int", "vim.version.version9", {:optional => true}]])
    create_enum_type("vim.vsan.host.VsanRuntimeInfo.DiskIssueType", "VsanDiskIssueType", "vim.version.version9", ["nonExist", "stampMismatch", "unknown"])
    create_data_type("vim.vsan.host.VsanRuntimeInfo.DiskIssue", "VsanHostRuntimeInfoDiskIssue", "vmodl.DynamicData", "vim.version.version9", [["diskId", "string", "vim.version.version9"], ["issue", "string", "vim.version.version9"]])
    create_managed_type("vim.AuthorizationManager", "AuthorizationManager", "vmodl.ManagedObject", "vim.version.version1", [["privilegeList", "vim.AuthorizationManager.Privilege[]", "vim.version.version1", {:optional => true}, "System.View"], ["roleList", "vim.AuthorizationManager.Role[]", "vim.version.version1", {:optional => true}, "System.View"], ["description", "vim.AuthorizationDescription", "vim.version.version1", {}, "System.View"]], [["addRole", "AddAuthorizationRole", "vim.version.version1", [["name", "string", "vim.version.version1", {}, nil], ["privIds", "string[]", "vim.version.version1", {:optional => true}, nil]], [{}, "int", "int"], "Authorization.ModifyRoles", ["vim.fault.AlreadyExists", "vim.fault.InvalidName"]], ["removeRole", "RemoveAuthorizationRole", "vim.version.version1", [["roleId", "int", "vim.version.version1", {}, nil], ["failIfUsed", "boolean", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Authorization.ModifyRoles", ["vim.fault.NotFound", "vim.fault.RemoveFailed"]], ["updateRole", "UpdateAuthorizationRole", "vim.version.version1", [["roleId", "int", "vim.version.version1", {}, nil], ["newName", "string", "vim.version.version1", {}, nil], ["privIds", "string[]", "vim.version.version1", {:optional => true}, nil]], [{}, "void", "void"], "Authorization.ModifyRoles", ["vim.fault.NotFound", "vim.fault.InvalidName", "vim.fault.AlreadyExists"]], ["mergePermissions", "MergePermissions", "vim.version.version1", [["srcRoleId", "int", "vim.version.version1", {}, nil], ["dstRoleId", "int", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Authorization.ReassignRolePermissions", ["vim.fault.NotFound", "vim.fault.AuthMinimumAdminPermission"]], ["retrieveRolePermissions", "RetrieveRolePermissions", "vim.version.version1", [["roleId", "int", "vim.version.version1", {}, nil]], [{:optional => true}, "vim.AuthorizationManager.Permission[]", "vim.AuthorizationManager.Permission[]"], "System.View", ["vim.fault.NotFound"]], ["retrieveEntityPermissions", "RetrieveEntityPermissions", "vim.version.version1", [["entity", "vim.ManagedEntity", "vim.version.version1", {}, "System.Read"], ["inherited", "boolean", "vim.version.version1", {}, nil]], [{:optional => true}, "vim.AuthorizationManager.Permission[]", "vim.AuthorizationManager.Permission[]"], nil, nil], ["retrieveAllPermissions", "RetrieveAllPermissions", "vim.version.version1", [], [{:optional => true}, "vim.AuthorizationManager.Permission[]", "vim.AuthorizationManager.Permission[]"], "System.View", nil], ["setEntityPermissions", "SetEntityPermissions", "vim.version.version1", [["entity", "vim.ManagedEntity", "vim.version.version1", {}, "Authorization.ModifyPermissions"], ["permission", "vim.AuthorizationManager.Permission[]", "vim.version.version1", {:optional => true}, nil]], [{}, "void", "void"], nil, ["vim.fault.UserNotFound", "vim.fault.NotFound", "vim.fault.AuthMinimumAdminPermission"]], ["resetEntityPermissions", "ResetEntityPermissions", "vim.version.version1", [["entity", "vim.ManagedEntity", "vim.version.version1", {}, "Authorization.ModifyPermissions"], ["permission", "vim.AuthorizationManager.Permission[]", "vim.version.version1", {:optional => true}, nil]], [{}, "void", "void"], nil, ["vim.fault.UserNotFound", "vim.fault.NotFound", "vim.fault.AuthMinimumAdminPermission"]], ["removeEntityPermission", "RemoveEntityPermission", "vim.version.version1", [["entity", "vim.ManagedEntity", "vim.version.version1", {}, "Authorization.ModifyPermissions"], ["user", "string", "vim.version.version1", {}, nil], ["isGroup", "boolean", "vim.version.version1", {}, nil]], [{}, "void", "void"], nil, ["vim.fault.NotFound", "vim.fault.AuthMinimumAdminPermission"]], ["hasPrivilegeOnEntity", "HasPrivilegeOnEntity", "vim.version.version7", [["entity", "vim.ManagedEntity", "vim.version.version7", {}, "System.Read"], ["sessionId", "string", "vim.version.version7", {}, nil], ["privId", "string[]", "vim.version.version7", {:optional => true}, nil]], [{:optional => true}, "boolean[]", "boolean[]"], "System.View", nil], ["hasPrivilegeOnEntities", "HasPrivilegeOnEntities", "vim.version.version9", [["entity", "vim.ManagedEntity[]", "vim.version.version9", {}, "System.Read"], ["sessionId", "string", "vim.version.version9", {}, nil], ["privId", "string[]", "vim.version.version9", {:optional => true}, nil]], [{:optional => true}, "vim.AuthorizationManager.EntityPrivilege[]", "vim.AuthorizationManager.EntityPrivilege[]"], "System.View", nil]])
    create_data_type("vim.AuthorizationManager.Permission", "Permission", "vmodl.DynamicData", "vim.version.version1", [["entity", "vim.ManagedEntity", "vim.version.version1", {:optional => true}], ["principal", "string", "vim.version.version1"], ["group", "boolean", "vim.version.version1"], ["roleId", "int", "vim.version.version1"], ["propagate", "boolean", "vim.version.version1"]])
    create_data_type("vim.AuthorizationManager.Role", "AuthorizationRole", "vmodl.DynamicData", "vim.version.version1", [["roleId", "int", "vim.version.version1"], ["system", "boolean", "vim.version.version1"], ["name", "string", "vim.version.version1"], ["info", "vim.Description", "vim.version.version1"], ["privilege", "string[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.AuthorizationManager.Privilege", "AuthorizationPrivilege", "vmodl.DynamicData", "vim.version.version1", [["privId", "string", "vim.version.version1"], ["onParent", "boolean", "vim.version.version1"], ["name", "string", "vim.version.version1"], ["privGroupName", "string", "vim.version.version1"]])
    create_data_type("vim.AuthorizationManager.PrivilegeAvailability", "PrivilegeAvailability", "vmodl.DynamicData", "vim.version.version9", [["privId", "string", "vim.version.version9"], ["isGranted", "boolean", "vim.version.version9"]])
    create_data_type("vim.AuthorizationManager.EntityPrivilege", "EntityPrivilege", "vmodl.DynamicData", "vim.version.version9", [["entity", "vim.ManagedEntity", "vim.version.version9"], ["privAvailability", "vim.AuthorizationManager.PrivilegeAvailability[]", "vim.version.version9"]])
    create_data_type("vim.BoolPolicy", "BoolPolicy", "vim.InheritablePolicy", "vim.version.version5", [["value", "boolean", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.EVCMode", "EVCMode", "vim.ElementDescription", "vim.version.version5", [["guaranteedCPUFeatures", "vim.host.CpuIdInfo[]", "vim.version.version6", {:optional => true}], ["featureCapability", "vim.host.FeatureCapability[]", "vim.version.version8", {:optional => true}], ["featureMask", "vim.host.FeatureMask[]", "vim.version.version8", {:optional => true}], ["featureRequirement", "vim.vm.FeatureRequirement[]", "vim.version.version8", {:optional => true}], ["vendor", "string", "vim.version.version5"], ["track", "string[]", "vim.version.version6"], ["vendorTier", "int", "vim.version.version5"]])
    create_data_type("vim.ImportSpec", "ImportSpec", "vmodl.DynamicData", "vim.version.version5", [["entityConfig", "vim.vApp.EntityConfigInfo", "vim.version.version5", {:optional => true}], ["instantiationOst", "vim.OvfConsumer.OstNode", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.IntExpression", "IntExpression", "vim.NegatableExpression", "vim.version.version9", [["value", "int", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.IpAddress", "IpAddress", "vim.NegatableExpression", "vim.version.version9", nil)
    create_data_type("vim.IpRange", "IpRange", "vim.IpAddress", "vim.version.version9", [["addressPrefix", "string", "vim.version.version9"], ["prefixLength", "int", "vim.version.version9", {:optional => true}]])
    create_managed_type("vim.LicenseAssignmentManager", "LicenseAssignmentManager", "vmodl.ManagedObject", "vim.version.version5", nil, [["updateAssignedLicense", "UpdateAssignedLicense", "vim.version.version5", [["entity", "string", "vim.version.version5", {}, nil], ["licenseKey", "string", "vim.version.version5", {}, nil], ["entityDisplayName", "string", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.LicenseManager.LicenseInfo", "vim.LicenseManager.LicenseInfo"], "Global.Licenses", ["vim.fault.LicenseEntityNotFound"]], ["removeAssignedLicense", "RemoveAssignedLicense", "vim.version.version5", [["entityId", "string", "vim.version.version5", {}, nil]], [{}, "void", "void"], "Global.Licenses", ["vim.fault.LicenseEntityNotFound"]], ["queryAssignedLicenses", "QueryAssignedLicenses", "vim.version.version5", [["entityId", "string", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.LicenseAssignmentManager.LicenseAssignment[]", "vim.LicenseAssignmentManager.LicenseAssignment[]"], "System.View", nil]])
    create_data_type("vim.LicenseAssignmentManager.LicenseAssignment", "LicenseAssignmentManagerLicenseAssignment", "vmodl.DynamicData", "vim.version.version5", [["entityId", "string", "vim.version.version5"], ["scope", "string", "vim.version.version5", {:optional => true}], ["entityDisplayName", "string", "vim.version.version5", {:optional => true}], ["assignedLicense", "vim.LicenseManager.LicenseInfo", "vim.version.version5"], ["properties", "vmodl.KeyAnyValue[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.MacAddress", "MacAddress", "vim.NegatableExpression", "vim.version.version9", nil)
    create_data_type("vim.MacRange", "MacRange", "vim.MacAddress", "vim.version.version9", [["address", "string", "vim.version.version9"], ["mask", "string", "vim.version.version9"]])
    create_managed_type("vim.ManagedEntity", "ManagedEntity", "vim.ExtensibleManagedObject", "vim.version.version1", [["parent", "vim.ManagedEntity", "vim.version.version1", {:optional => true}, "System.View"], ["customValue", "vim.CustomFieldsManager.Value[]", "vim.version.version1", {:optional => true}, "System.View"], ["overallStatus", "vim.ManagedEntity.Status", "vim.version.version1", {}, nil], ["configStatus", "vim.ManagedEntity.Status", "vim.version.version1", {}, nil], ["configIssue", "vim.event.Event[]", "vim.version.version1", {:optional => true}, nil], ["effectiveRole", "int[]", "vim.version.version1", {:optional => true}, "System.View"], ["permission", "vim.AuthorizationManager.Permission[]", "vim.version.version1", {:optional => true}, nil], ["name", "string", "vim.version.version1", {}, "System.View"], ["disabledMethod", "vmodl.MethodName[]", "vim.version.version1", {:optional => true}, nil], ["recentTask", "vim.Task[]", "vim.version.version1", {:optional => true}, nil], ["declaredAlarmState", "vim.alarm.AlarmState[]", "vim.version.version1", {:optional => true}, "System.View"], ["triggeredAlarmState", "vim.alarm.AlarmState[]", "vim.version.version1", {:optional => true}, "System.View"], ["alarmActionsEnabled", "boolean", "vim.version.version5", {:optional => true}, "System.Read"], ["tag", "vim.Tag[]", "vim.version.version5", {:optional => true}, "System.View"]], [["reload", "Reload", "vim.version.version1", [], [{}, "void", "void"], "System.Read", nil], ["rename", "Rename_Task", "vim.version.version1", [["newName", "string", "vim.version.version1", {}, nil]], [{}, "vim.Task", "void"], nil, ["vim.fault.DuplicateName", "vim.fault.InvalidName"]], ["destroy", "Destroy_Task", "vim.version.version1", [], [{}, "vim.Task", "void"], nil, ["vim.fault.VimFault"]]])
    create_enum_type("vim.ManagedEntity.Status", "ManagedEntityStatus", "vim.version.version1", ["gray", "green", "yellow", "red"])
    create_managed_type("vim.Network", "Network", "vim.ManagedEntity", "vim.version.version1", [["summary", "vim.Network.Summary", "vim.version.version1", {}, nil], ["host", "vim.HostSystem[]", "vim.version.version1", {:optional => true}, nil], ["vm", "vim.VirtualMachine[]", "vim.version.version1", {:optional => true}, nil]], [["destroyNetwork", "DestroyNetwork", "vim.version.version1", [], [{}, "void", "void"], "Network.Delete", ["vim.fault.ResourceInUse"]]])
    create_data_type("vim.Network.Summary", "NetworkSummary", "vmodl.DynamicData", "vim.version.version1", [["network", "vim.Network", "vim.version.version1", {:optional => true}], ["name", "string", "vim.version.version1"], ["accessible", "boolean", "vim.version.version1"], ["ipPoolName", "string", "vim.version.version5"], ["ipPoolId", "int", "vim.version.version8", {:optional => true}]])
    create_managed_type("vim.OpaqueNetwork", "OpaqueNetwork", "vim.Network", "vim.version.version9", nil, nil)
    create_data_type("vim.OpaqueNetwork.Summary", "OpaqueNetworkSummary", "vim.Network.Summary", "vim.version.version9", [["opaqueNetworkId", "string", "vim.version.version9"], ["opaqueNetworkType", "string", "vim.version.version9"]])
    create_data_type("vim.PosixUserSearchResult", "PosixUserSearchResult", "vim.UserSearchResult", "vim.version.version1", [["id", "int", "vim.version.version1"], ["shellAccess", "boolean", "vim.version.version1", {:optional => true}]])
    create_managed_type("vim.ResourcePool", "ResourcePool", "vim.ManagedEntity", "vim.version.version1", [["summary", "vim.ResourcePool.Summary", "vim.version.version1", {}, nil], ["runtime", "vim.ResourcePool.RuntimeInfo", "vim.version.version1", {}, nil], ["owner", "vim.ComputeResource", "vim.version.version1", {}, "System.View"], ["resourcePool", "vim.ResourcePool[]", "vim.version.version1", {:optional => true}, "System.View"], ["vm", "vim.VirtualMachine[]", "vim.version.version1", {:optional => true}, "System.View"], ["config", "vim.ResourceConfigSpec", "vim.version.version1", {}, nil], ["childConfiguration", "vim.ResourceConfigSpec[]", "vim.version.version1", {:optional => true}, nil]], [["updateConfig", "UpdateConfig", "vim.version.version1", [["name", "string", "vim.version.version1", {:optional => true}, nil], ["config", "vim.ResourceConfigSpec", "vim.version.version1", {:optional => true}, nil]], [{}, "void", "void"], nil, ["vim.fault.InvalidName", "vim.fault.DuplicateName", "vim.fault.InsufficientResourcesFault", "vim.fault.ConcurrentAccess"]], ["moveInto", "MoveIntoResourcePool", "vim.version.version1", [["list", "vim.ManagedEntity[]", "vim.version.version1", {}, nil]], [{}, "void", "void"], nil, ["vim.fault.DuplicateName", "vim.fault.InsufficientResourcesFault"]], ["updateChildResourceConfiguration", "UpdateChildResourceConfiguration", "vim.version.version1", [["spec", "vim.ResourceConfigSpec[]", "vim.version.version1", {}, nil]], [{}, "void", "void"], nil, ["vim.fault.InvalidState", "vim.fault.InsufficientResourcesFault"]], ["createResourcePool", "CreateResourcePool", "vim.version.version1", [["name", "string", "vim.version.version1", {}, nil], ["spec", "vim.ResourceConfigSpec", "vim.version.version1", {}, nil]], [{}, "vim.ResourcePool", "vim.ResourcePool"], "Resource.CreatePool", ["vim.fault.InvalidName", "vim.fault.DuplicateName", "vim.fault.InsufficientResourcesFault"]], ["destroyChildren", "DestroyChildren", "vim.version.version1", [], [{}, "void", "void"], nil, nil], ["createVApp", "CreateVApp", "vim.version.version5", [["name", "string", "vim.version.version5", {}, nil], ["resSpec", "vim.ResourceConfigSpec", "vim.version.version5", {}, nil], ["configSpec", "vim.vApp.VAppConfigSpec", "vim.version.version5", {}, nil], ["vmFolder", "vim.Folder", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.VirtualApp", "vim.VirtualApp"], "VApp.Create", ["vim.fault.InvalidName", "vim.fault.DuplicateName", "vim.fault.InsufficientResourcesFault", "vim.fault.InvalidState", "vim.fault.VmConfigFault"]], ["createVm", "CreateChildVM_Task", "vim.version.version5", [["config", "vim.vm.ConfigSpec", "vim.version.version5", {}, nil], ["host", "vim.HostSystem", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.Task", "vim.VirtualMachine"], "VirtualMachine.Inventory.Create", ["vim.fault.VmConfigFault", "vim.fault.FileFault", "vim.fault.OutOfBounds", "vim.fault.InvalidName", "vim.fault.InvalidDatastore", "vim.fault.InsufficientResourcesFault"]], ["registerVm", "RegisterChildVM_Task", "vim.version.version5", [["path", "string", "vim.version.version5", {}, nil], ["name", "string", "vim.version.version5", {:optional => true}, nil], ["host", "vim.HostSystem", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.Task", "vim.VirtualMachine"], "VirtualMachine.Inventory.Register", ["vim.fault.OutOfBounds", "vim.fault.AlreadyExists", "vim.fault.InvalidDatastore", "vim.fault.NotFound", "vim.fault.InvalidName", "vim.fault.VmConfigFault", "vim.fault.InsufficientResourcesFault", "vim.fault.FileFault"]], ["importVApp", "ImportVApp", "vim.version.version5", [["spec", "vim.ImportSpec", "vim.version.version5", {}, nil], ["folder", "vim.Folder", "vim.version.version5", {:optional => true}, "VApp.Import"], ["host", "vim.HostSystem", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.HttpNfcLease", "vim.HttpNfcLease"], "VApp.Import", ["vim.fault.VmConfigFault", "vim.fault.FileFault", "vim.fault.OutOfBounds", "vim.fault.DuplicateName", "vim.fault.InvalidName", "vim.fault.InvalidDatastore", "vim.fault.InsufficientResourcesFault"]], ["queryResourceConfigOption", "QueryResourceConfigOption", "vim.version.version6", [], [{}, "vim.ResourceConfigOption", "vim.ResourceConfigOption"], "Resource.EditPool", nil], ["refreshRuntime", "RefreshRuntime", "vim.version.version6", [], [{}, "void", "void"], "System.View", nil]])
    create_data_type("vim.ResourcePool.ResourceUsage", "ResourcePoolResourceUsage", "vmodl.DynamicData", "vim.version.version1", [["reservationUsed", "long", "vim.version.version1"], ["reservationUsedForVm", "long", "vim.version.version1"], ["unreservedForPool", "long", "vim.version.version1"], ["unreservedForVm", "long", "vim.version.version1"], ["overallUsage", "long", "vim.version.version1"], ["maxUsage", "long", "vim.version.version1"]])
    create_data_type("vim.ResourcePool.RuntimeInfo", "ResourcePoolRuntimeInfo", "vmodl.DynamicData", "vim.version.version1", [["memory", "vim.ResourcePool.ResourceUsage", "vim.version.version1"], ["cpu", "vim.ResourcePool.ResourceUsage", "vim.version.version1"], ["overallStatus", "vim.ManagedEntity.Status", "vim.version.version1"]])
    create_data_type("vim.ResourcePool.Summary", "ResourcePoolSummary", "vmodl.DynamicData", "vim.version.version1", [["name", "string", "vim.version.version1"], ["config", "vim.ResourceConfigSpec", "vim.version.version1"], ["runtime", "vim.ResourcePool.RuntimeInfo", "vim.version.version1"], ["quickStats", "vim.ResourcePool.Summary.QuickStats", "vim.version.version5", {:optional => true}], ["configuredMemoryMB", "int", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.ResourcePool.Summary.QuickStats", "ResourcePoolQuickStats", "vmodl.DynamicData", "vim.version.version5", [["overallCpuUsage", "long", "vim.version.version5", {:optional => true}], ["overallCpuDemand", "long", "vim.version.version5", {:optional => true}], ["guestMemoryUsage", "long", "vim.version.version5", {:optional => true}], ["hostMemoryUsage", "long", "vim.version.version5", {:optional => true}], ["distributedCpuEntitlement", "long", "vim.version.version5", {:optional => true}], ["distributedMemoryEntitlement", "long", "vim.version.version5", {:optional => true}], ["staticCpuEntitlement", "int", "vim.version.version5", {:optional => true}], ["staticMemoryEntitlement", "int", "vim.version.version5", {:optional => true}], ["privateMemory", "long", "vim.version.version5", {:optional => true}], ["sharedMemory", "long", "vim.version.version5", {:optional => true}], ["swappedMemory", "long", "vim.version.version5", {:optional => true}], ["balloonedMemory", "long", "vim.version.version5", {:optional => true}], ["overheadMemory", "long", "vim.version.version5", {:optional => true}], ["consumedOverheadMemory", "long", "vim.version.version5", {:optional => true}], ["compressedMemory", "long", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.SingleIp", "SingleIp", "vim.IpAddress", "vim.version.version9", [["address", "string", "vim.version.version9"]])
    create_data_type("vim.SingleMac", "SingleMac", "vim.MacAddress", "vim.version.version9", [["address", "string", "vim.version.version9"]])
    create_managed_type("vim.Task", "Task", "vim.ExtensibleManagedObject", "vim.version.version1", [["info", "vim.TaskInfo", "vim.version.version1", {}, nil]], [["cancel", "CancelTask", "vim.version.version1", [], [{}, "void", "void"], "Global.CancelTask", ["vim.fault.InvalidState"]], ["UpdateProgress", "UpdateProgress", "vim.version.version2", [["percentDone", "int", "vim.version.version2", {}, nil]], [{}, "void", "void"], "Task.Update", ["vim.fault.InvalidState", "vim.fault.OutOfBounds"]], ["setState", "SetTaskState", "vim.version.version2", [["state", "vim.TaskInfo.State", "vim.version.version2", {}, nil], ["result", "anyType", "vim.version.version2", {:optional => true}, nil], ["fault", "vmodl.MethodFault", "vim.version.version2", {:optional => true}, nil]], [{}, "void", "void"], "Task.Update", ["vim.fault.InvalidState"]], ["UpdateDescription", "SetTaskDescription", "vim.version.version5", [["description", "vmodl.LocalizableMessage", "vim.version.version5", {}, nil]], [{}, "void", "void"], "Task.Update", nil]])
    create_data_type("vim.TaskFilterSpec", "TaskFilterSpec", "vmodl.DynamicData", "vim.version.version1", [["entity", "vim.TaskFilterSpec.ByEntity", "vim.version.version1", {:optional => true}], ["time", "vim.TaskFilterSpec.ByTime", "vim.version.version1", {:optional => true}], ["userName", "vim.TaskFilterSpec.ByUsername", "vim.version.version1", {:optional => true}], ["state", "vim.TaskInfo.State[]", "vim.version.version1", {:optional => true}], ["alarm", "vim.alarm.Alarm", "vim.version.version1", {:optional => true}], ["scheduledTask", "vim.scheduler.ScheduledTask", "vim.version.version1", {:optional => true}], ["eventChainId", "int[]", "vim.version.version5", {:optional => true}], ["tag", "string[]", "vim.version.version5", {:optional => true}], ["parentTaskKey", "string[]", "vim.version.version5", {:optional => true}], ["rootTaskKey", "string[]", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.TaskFilterSpec.RecursionOption", "TaskFilterSpecRecursionOption", "vim.version.version1", ["self", "children", "all"])
    create_enum_type("vim.TaskFilterSpec.TimeOption", "TaskFilterSpecTimeOption", "vim.version.version1", ["queuedTime", "startedTime", "completedTime"])
    create_data_type("vim.TaskFilterSpec.ByEntity", "TaskFilterSpecByEntity", "vmodl.DynamicData", "vim.version.version1", [["entity", "vim.ManagedEntity", "vim.version.version1"], ["recursion", "vim.TaskFilterSpec.RecursionOption", "vim.version.version1"]])
    create_data_type("vim.TaskFilterSpec.ByTime", "TaskFilterSpecByTime", "vmodl.DynamicData", "vim.version.version1", [["timeType", "vim.TaskFilterSpec.TimeOption", "vim.version.version1"], ["beginTime", "vmodl.DateTime", "vim.version.version1", {:optional => true}], ["endTime", "vmodl.DateTime", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.TaskFilterSpec.ByUsername", "TaskFilterSpecByUsername", "vmodl.DynamicData", "vim.version.version1", [["systemUser", "boolean", "vim.version.version1"], ["userList", "string[]", "vim.version.version1", {:optional => true}]])
    create_managed_type("vim.VirtualApp", "VirtualApp", "vim.ResourcePool", "vim.version.version5", [["parentFolder", "vim.Folder", "vim.version.version5", {:optional => true}, "System.View"], ["datastore", "vim.Datastore[]", "vim.version.version5", {:optional => true}, "System.View"], ["network", "vim.Network[]", "vim.version.version5", {:optional => true}, "System.View"], ["vAppConfig", "vim.vApp.VAppConfigInfo", "vim.version.version5", {:optional => true}, "System.Read"], ["parentVApp", "vim.ManagedEntity", "vim.version.version6", {:optional => true}, nil], ["childLink", "vim.VirtualApp.LinkInfo[]", "vim.version.version6", {:optional => true}, nil]], [["updateVAppConfig", "UpdateVAppConfig", "vim.version.version5", [["spec", "vim.vApp.VAppConfigSpec", "vim.version.version5", {}, nil]], [{}, "void", "void"], nil, ["vim.fault.TaskInProgress", "vim.fault.VmConfigFault", "vim.fault.ConcurrentAccess", "vim.fault.FileFault", "vim.fault.InvalidName", "vim.fault.DuplicateName", "vim.fault.InvalidState", "vim.fault.InsufficientResourcesFault", "vim.fault.InvalidDatastore"]], ["updateLinkedChildren", "UpdateLinkedChildren", "vim.version.version6", [["addChangeSet", "vim.VirtualApp.LinkInfo[]", "vim.version.version6", {:optional => true}, nil], ["removeSet", "vim.ManagedEntity[]", "vim.version.version6", {:optional => true}, nil]], [{}, "void", "void"], nil, ["vim.fault.ConcurrentAccess"]], ["clone", "CloneVApp_Task", "vim.version.version5", [["name", "string", "vim.version.version5", {}, nil], ["target", "vim.ResourcePool", "vim.version.version5", {}, nil], ["spec", "vim.vApp.CloneSpec", "vim.version.version5", {}, nil]], [{}, "vim.Task", "vim.VirtualApp"], "VApp.Clone", ["vim.fault.InvalidState", "vim.fault.InvalidDatastore", "vim.fault.TaskInProgress", "vim.fault.VmConfigFault", "vim.fault.FileFault", "vim.fault.MigrationFault", "vim.fault.InsufficientResourcesFault"]], ["exportVApp", "ExportVApp", "vim.version.version5", [], [{}, "vim.HttpNfcLease", "vim.HttpNfcLease"], "VApp.Export", ["vim.fault.InvalidPowerState", "vim.fault.TaskInProgress", "vim.fault.InvalidState", "vim.fault.FileFault"]], ["powerOn", "PowerOnVApp_Task", "vim.version.version5", [], [{}, "vim.Task", "void"], "VApp.PowerOn", ["vim.fault.TaskInProgress", "vim.fault.InvalidState", "vim.fault.InsufficientResourcesFault", "vim.fault.VmConfigFault", "vim.fault.VAppConfigFault", "vim.fault.FileFault"]], ["powerOff", "PowerOffVApp_Task", "vim.version.version5", [["force", "boolean", "vim.version.version5", {}, nil]], [{}, "vim.Task", "void"], "VApp.PowerOff", ["vim.fault.TaskInProgress", "vim.fault.InvalidState", "vim.fault.VAppConfigFault"]], ["suspend", "SuspendVApp_Task", "vim.version.version6", [], [{}, "vim.Task", "void"], "VApp.Suspend", ["vim.fault.TaskInProgress", "vim.fault.InvalidState", "vim.fault.VAppConfigFault"]], ["unregister", "unregisterVApp_Task", "vim.version.version5", [], [{}, "vim.Task", "void"], "VApp.Unregister", ["vim.fault.ConcurrentAccess", "vim.fault.InvalidState"]]])
    create_enum_type("vim.VirtualApp.VAppState", "VirtualAppVAppState", "vim.version.version5", ["started", "stopped", "starting", "stopping"])
    create_data_type("vim.VirtualApp.Summary", "VirtualAppSummary", "vim.ResourcePool.Summary", "vim.version.version5", [["product", "vim.vApp.ProductInfo", "vim.version.version5", {:optional => true}], ["vAppState", "vim.VirtualApp.VAppState", "vim.version.version5", {:optional => true}], ["suspended", "boolean", "vim.version.version6", {:optional => true}], ["installBootRequired", "boolean", "vim.version.version5", {:optional => true}], ["instanceUuid", "string", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.VirtualApp.LinkInfo", "VirtualAppLinkInfo", "vmodl.DynamicData", "vim.version.version6", [["key", "vim.ManagedEntity", "vim.version.version6"], ["destroyWithParent", "boolean", "vim.version.version6", {:optional => true}]])
    create_managed_type("vim.VirtualDiskManager", "VirtualDiskManager", "vmodl.ManagedObject", "vim.version.version2", nil, [["createVirtualDisk", "CreateVirtualDisk_Task", "vim.version.version2", [["name", "string", "vim.version.version2", {}, nil], ["datacenter", "vim.Datacenter", "vim.version.version2", {:optional => true}, nil], ["spec", "vim.VirtualDiskManager.VirtualDiskSpec", "vim.version.version2", {}, nil]], [{}, "vim.Task", "string"], "System.View", ["vim.fault.FileFault", "vim.fault.InvalidDatastore"]], ["deleteVirtualDisk", "DeleteVirtualDisk_Task", "vim.version.version2", [["name", "string", "vim.version.version2", {}, nil], ["datacenter", "vim.Datacenter", "vim.version.version2", {:optional => true}, nil]], [{}, "vim.Task", "void"], "System.View", ["vim.fault.FileFault", "vim.fault.InvalidDatastore"]], ["moveVirtualDisk", "MoveVirtualDisk_Task", "vim.version.version2", [["sourceName", "string", "vim.version.version2", {}, nil], ["sourceDatacenter", "vim.Datacenter", "vim.version.version2", {:optional => true}, nil], ["destName", "string", "vim.version.version2", {}, nil], ["destDatacenter", "vim.Datacenter", "vim.version.version2", {:optional => true}, nil], ["force", "boolean", "vim.version.version2", {:optional => true}, nil], ["profile", "vim.vm.ProfileSpec[]", "vim.version.version9", {:optional => true}, nil]], [{}, "vim.Task", "string"], "System.View", ["vim.fault.FileFault", "vim.fault.InvalidDatastore"]], ["copyVirtualDisk", "CopyVirtualDisk_Task", "vim.version.version2", [["sourceName", "string", "vim.version.version2", {}, nil], ["sourceDatacenter", "vim.Datacenter", "vim.version.version2", {:optional => true}, nil], ["destName", "string", "vim.version.version2", {}, nil], ["destDatacenter", "vim.Datacenter", "vim.version.version2", {:optional => true}, nil], ["destSpec", "vim.VirtualDiskManager.VirtualDiskSpec", "vim.version.version2", {:optional => true}, nil], ["force", "boolean", "vim.version.version2", {:optional => true}, nil]], [{}, "vim.Task", "string"], "System.View", ["vim.fault.FileFault", "vim.fault.InvalidDiskFormat", "vim.fault.InvalidDatastore"]], ["extendVirtualDisk", "ExtendVirtualDisk_Task", "vim.version.version2", [["name", "string", "vim.version.version2", {}, nil], ["datacenter", "vim.Datacenter", "vim.version.version2", {:optional => true}, nil], ["newCapacityKb", "long", "vim.version.version2", {}, nil], ["eagerZero", "boolean", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.Task", "void"], "System.View", ["vim.fault.FileFault", "vim.fault.InvalidDatastore"]], ["queryVirtualDiskFragmentation", "QueryVirtualDiskFragmentation", "vim.version.version2", [["name", "string", "vim.version.version2", {}, nil], ["datacenter", "vim.Datacenter", "vim.version.version2", {:optional => true}, nil]], [{}, "int", "int"], "System.View", ["vim.fault.FileFault", "vim.fault.InvalidDatastore"]], ["defragmentVirtualDisk", "DefragmentVirtualDisk_Task", "vim.version.version2", [["name", "string", "vim.version.version2", {}, nil], ["datacenter", "vim.Datacenter", "vim.version.version2", {:optional => true}, nil]], [{}, "vim.Task", "void"], "System.View", ["vim.fault.FileFault", "vim.fault.InvalidDatastore"]], ["shrinkVirtualDisk", "ShrinkVirtualDisk_Task", "vim.version.version2", [["name", "string", "vim.version.version2", {}, nil], ["datacenter", "vim.Datacenter", "vim.version.version2", {:optional => true}, nil], ["copy", "boolean", "vim.version.version2", {:optional => true}, nil]], [{}, "vim.Task", "void"], "System.View", ["vim.fault.FileFault", "vim.fault.InvalidDatastore"]], ["inflateVirtualDisk", "InflateVirtualDisk_Task", "vim.version.version2", [["name", "string", "vim.version.version2", {}, nil], ["datacenter", "vim.Datacenter", "vim.version.version2", {:optional => true}, nil]], [{}, "vim.Task", "void"], "System.View", ["vim.fault.FileFault", "vim.fault.InvalidDatastore"]], ["eagerZeroVirtualDisk", "EagerZeroVirtualDisk_Task", "vim.version.version5", [["name", "string", "vim.version.version5", {}, nil], ["datacenter", "vim.Datacenter", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.Task", "void"], "System.View", ["vim.fault.FileFault", "vim.fault.InvalidDatastore"]], ["zeroFillVirtualDisk", "ZeroFillVirtualDisk_Task", "vim.version.version2", [["name", "string", "vim.version.version2", {}, nil], ["datacenter", "vim.Datacenter", "vim.version.version2", {:optional => true}, nil]], [{}, "vim.Task", "void"], "System.View", ["vim.fault.FileFault", "vim.fault.InvalidDatastore"]], ["setVirtualDiskUuid", "SetVirtualDiskUuid", "vim.version.version2", [["name", "string", "vim.version.version2", {}, nil], ["datacenter", "vim.Datacenter", "vim.version.version2", {:optional => true}, nil], ["uuid", "string", "vim.version.version2", {}, nil]], [{}, "void", "void"], "System.View", ["vim.fault.FileFault", "vim.fault.InvalidDatastore"]], ["queryVirtualDiskUuid", "QueryVirtualDiskUuid", "vim.version.version2", [["name", "string", "vim.version.version2", {}, nil], ["datacenter", "vim.Datacenter", "vim.version.version2", {:optional => true}, nil]], [{}, "string", "string"], "System.View", ["vim.fault.FileFault", "vim.fault.InvalidDatastore"]], ["queryVirtualDiskGeometry", "QueryVirtualDiskGeometry", "vim.version.version2", [["name", "string", "vim.version.version2", {}, nil], ["datacenter", "vim.Datacenter", "vim.version.version2", {:optional => true}, nil]], [{}, "vim.host.DiskDimensions.Chs", "vim.host.DiskDimensions.Chs"], "System.View", ["vim.fault.FileFault", "vim.fault.InvalidDatastore"]]])
    create_enum_type("vim.VirtualDiskManager.VirtualDiskType", "VirtualDiskType", "vim.version.version2", ["preallocated", "thin", "seSparse", "rdm", "rdmp", "raw", "delta", "sparse2Gb", "thick2Gb", "eagerZeroedThick", "sparseMonolithic", "flatMonolithic", "thick"])
    create_enum_type("vim.VirtualDiskManager.VirtualDiskAdapterType", "VirtualDiskAdapterType", "vim.version.version2", ["ide", "busLogic", "lsiLogic"])
    create_data_type("vim.VirtualDiskManager.VirtualDiskSpec", "VirtualDiskSpec", "vmodl.DynamicData", "vim.version.version2", [["diskType", "string", "vim.version.version2"], ["adapterType", "string", "vim.version.version2"]])
    create_data_type("vim.VirtualDiskManager.FileBackedVirtualDiskSpec", "FileBackedVirtualDiskSpec", "vim.VirtualDiskManager.VirtualDiskSpec", "vim.version.version2", [["capacityKb", "long", "vim.version.version2"], ["profile", "vim.vm.ProfileSpec[]", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.VirtualDiskManager.SeSparseVirtualDiskSpec", "SeSparseVirtualDiskSpec", "vim.VirtualDiskManager.FileBackedVirtualDiskSpec", "vim.version.version8", [["grainSizeKb", "int", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.VirtualDiskManager.DeviceBackedVirtualDiskSpec", "DeviceBackedVirtualDiskSpec", "vim.VirtualDiskManager.VirtualDiskSpec", "vim.version.version2", [["device", "string", "vim.version.version2"]])
    create_managed_type("vim.VirtualMachine", "VirtualMachine", "vim.ManagedEntity", "vim.version.version1", [["capability", "vim.vm.Capability", "vim.version.version1", {}, nil], ["config", "vim.vm.ConfigInfo", "vim.version.version1", {:optional => true}, nil], ["layout", "vim.vm.FileLayout", "vim.version.version1", {:optional => true}, nil], ["layoutEx", "vim.vm.FileLayoutEx", "vim.version.version5", {:optional => true}, nil], ["storage", "vim.vm.StorageInfo", "vim.version.version5", {:optional => true}, nil], ["environmentBrowser", "vim.EnvironmentBrowser", "vim.version.version1", {}, nil], ["resourcePool", "vim.ResourcePool", "vim.version.version1", {:optional => true}, nil], ["parentVApp", "vim.ManagedEntity", "vim.version.version6", {:optional => true}, nil], ["resourceConfig", "vim.ResourceConfigSpec", "vim.version.version1", {:optional => true}, nil], ["runtime", "vim.vm.RuntimeInfo", "vim.version.version1", {}, nil], ["guest", "vim.vm.GuestInfo", "vim.version.version1", {:optional => true}, nil], ["summary", "vim.vm.Summary", "vim.version.version1", {}, nil], ["datastore", "vim.Datastore[]", "vim.version.version1", {:optional => true}, "System.View"], ["network", "vim.Network[]", "vim.version.version1", {:optional => true}, "System.View"], ["snapshot", "vim.vm.SnapshotInfo", "vim.version.version1", {:optional => true}, nil], ["rootSnapshot", "vim.vm.Snapshot[]", "vim.version.version6", {:optional => true}, nil], ["guestHeartbeatStatus", "vim.ManagedEntity.Status", "vim.version.version1", {}, nil]], [["refreshStorageInfo", "RefreshStorageInfo", "vim.version.version5", [], [{}, "void", "void"], "System.Read", nil], ["createSnapshot", "CreateSnapshot_Task", "vim.version.version1", [["name", "string", "vim.version.version1", {}, nil], ["description", "string", "vim.version.version1", {:optional => true}, nil], ["memory", "boolean", "vim.version.version1", {}, nil], ["quiesce", "boolean", "vim.version.version1", {}, nil]], [{}, "vim.Task", "vim.vm.Snapshot"], "VirtualMachine.State.CreateSnapshot", ["vim.fault.TaskInProgress", "vim.fault.SnapshotFault", "vim.fault.VmConfigFault", "vim.fault.FileFault", "vim.fault.InvalidName", "vim.fault.InvalidState"]], ["revertToCurrentSnapshot", "RevertToCurrentSnapshot_Task", "vim.version.version1", [["host", "vim.HostSystem", "vim.version.version1", {:optional => true}, nil], ["suppressPowerOn", "boolean", "vim.version.version4", {:optional => true}, nil]], [{}, "vim.Task", "void"], "VirtualMachine.State.RevertToSnapshot", ["vim.fault.TaskInProgress", "vim.fault.SnapshotFault", "vim.fault.InsufficientResourcesFault", "vim.fault.InvalidState", "vim.fault.VmConfigFault", "vim.fault.NotFound"]], ["removeAllSnapshots", "RemoveAllSnapshots_Task", "vim.version.version1", [["consolidate", "boolean", "vim.version.version7", {:optional => true}, nil]], [{}, "vim.Task", "void"], "VirtualMachine.State.RemoveSnapshot", ["vim.fault.TaskInProgress", "vim.fault.InvalidState", "vim.fault.SnapshotFault"]], ["consolidateDisks", "ConsolidateVMDisks_Task", "vim.version.version7", [], [{}, "vim.Task", "void"], "VirtualMachine.State.RemoveSnapshot", ["vim.fault.TaskInProgress", "vim.fault.InvalidState", "vim.fault.FileFault", "vim.fault.VmConfigFault"]], ["estimateStorageRequirementForConsolidate", "EstimateStorageForConsolidateSnapshots_Task", "vim.version.version7", [], [{:optional => true}, "vim.Task", "vim.VirtualMachine.StorageRequirement[]"], "VirtualMachine.State.RemoveSnapshot", ["vim.fault.TaskInProgress", "vim.fault.InvalidState", "vim.fault.FileFault", "vim.fault.VmConfigFault"]], ["reconfigure", "ReconfigVM_Task", "vim.version.version1", [["spec", "vim.vm.ConfigSpec", "vim.version.version1", {}, nil]], [{}, "vim.Task", "void"], nil, ["vim.fault.TaskInProgress", "vim.fault.VmConfigFault", "vim.fault.ConcurrentAccess", "vim.fault.FileFault", "vim.fault.InvalidName", "vim.fault.DuplicateName", "vim.fault.InvalidState", "vim.fault.InsufficientResourcesFault", "vim.fault.InvalidDatastore"]], ["upgradeVirtualHardware", "UpgradeVM_Task", "vim.version.version1", [["version", "string", "vim.version.version1", {:optional => true}, nil]], [{}, "vim.Task", "void"], "VirtualMachine.Config.UpgradeVirtualHardware", ["vim.fault.InvalidState", "vim.fault.TaskInProgress", "vim.fault.AlreadyUpgraded", "vim.fault.NoDiskFound"]], ["extractOvfEnvironment", "ExtractOvfEnvironment", "vim.version.version5", [], [{}, "string", "string"], "VApp.ExtractOvfEnvironment", ["vim.fault.InvalidState"]], ["powerOn", "PowerOnVM_Task", "vim.version.version1", [["host", "vim.HostSystem", "vim.version.version1", {:optional => true}, nil]], [{}, "vim.Task", "void"], "VirtualMachine.Interact.PowerOn", ["vim.fault.TaskInProgress", "vim.fault.InvalidState", "vim.fault.InsufficientResourcesFault", "vim.fault.VmConfigFault", "vim.fault.FileFault"]], ["powerOff", "PowerOffVM_Task", "vim.version.version1", [], [{}, "vim.Task", "void"], "VirtualMachine.Interact.PowerOff", ["vim.fault.TaskInProgress", "vim.fault.InvalidState"]], ["suspend", "SuspendVM_Task", "vim.version.version1", [], [{}, "vim.Task", "void"], "VirtualMachine.Interact.Suspend", ["vim.fault.TaskInProgress", "vim.fault.InvalidState"]], ["reset", "ResetVM_Task", "vim.version.version1", [], [{}, "vim.Task", "void"], "VirtualMachine.Interact.Reset", ["vim.fault.TaskInProgress", "vim.fault.InvalidState"]], ["shutdownGuest", "ShutdownGuest", "vim.version.version1", [], [{}, "void", "void"], "VirtualMachine.Interact.PowerOff", ["vim.fault.ToolsUnavailable", "vim.fault.TaskInProgress", "vim.fault.InvalidState"]], ["rebootGuest", "RebootGuest", "vim.version.version1", [], [{}, "void", "void"], "VirtualMachine.Interact.Reset", ["vim.fault.ToolsUnavailable", "vim.fault.TaskInProgress", "vim.fault.InvalidState"]], ["standbyGuest", "StandbyGuest", "vim.version.version1", [], [{}, "void", "void"], "VirtualMachine.Interact.Suspend", ["vim.fault.ToolsUnavailable", "vim.fault.TaskInProgress", "vim.fault.InvalidState"]], ["answer", "AnswerVM", "vim.version.version1", [["questionId", "string", "vim.version.version1", {}, nil], ["answerChoice", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], "VirtualMachine.Interact.AnswerQuestion", ["vim.fault.ConcurrentAccess"]], ["customize", "CustomizeVM_Task", "vim.version.version1", [["spec", "vim.vm.customization.Specification", "vim.version.version1", {}, nil]], [{}, "vim.Task", "void"], "VirtualMachine.Provisioning.Customize", ["vim.fault.CustomizationFault"]], ["checkCustomizationSpec", "CheckCustomizationSpec", "vim.version.version1", [["spec", "vim.vm.customization.Specification", "vim.version.version1", {}, nil]], [{}, "void", "void"], "VirtualMachine.Provisioning.Customize", ["vim.fault.CustomizationFault"]], ["migrate", "MigrateVM_Task", "vim.version.version1", [["pool", "vim.ResourcePool", "vim.version.version1", {:optional => true}, "Resource.AssignVMToPool"], ["host", "vim.HostSystem", "vim.version.version1", {:optional => true}, nil], ["priority", "vim.VirtualMachine.MovePriority", "vim.version.version1", {}, nil], ["state", "vim.VirtualMachine.PowerState", "vim.version.version1", {:optional => true}, nil]], [{}, "vim.Task", "void"], nil, ["vim.fault.MigrationFault", "vim.fault.FileFault", "vim.fault.Timedout", "vim.fault.InsufficientResourcesFault", "vim.fault.InvalidState", "vim.fault.VmConfigFault"]], ["relocate", "RelocateVM_Task", "vim.version.version1", [["spec", "vim.vm.RelocateSpec", "vim.version.version1", {}, nil], ["priority", "vim.VirtualMachine.MovePriority", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.Task", "void"], "Resource.ColdMigrate", ["vim.fault.InvalidState", "vim.fault.InvalidDatastore", "vim.fault.MigrationFault", "vim.fault.VmConfigFault", "vim.fault.FileFault", "vim.fault.Timedout", "vim.fault.InsufficientResourcesFault"]], ["clone", "CloneVM_Task", "vim.version.version1", [["folder", "vim.Folder", "vim.version.version1", {}, "VirtualMachine.Inventory.CreateFromExisting"], ["name", "string", "vim.version.version1", {}, nil], ["spec", "vim.vm.CloneSpec", "vim.version.version1", {}, nil]], [{}, "vim.Task", "vim.VirtualMachine"], nil, ["vim.fault.CustomizationFault", "vim.fault.InvalidState", "vim.fault.InvalidDatastore", "vim.fault.TaskInProgress", "vim.fault.VmConfigFault", "vim.fault.FileFault", "vim.fault.MigrationFault", "vim.fault.InsufficientResourcesFault"]], ["exportVm", "ExportVm", "vim.version.version5", [], [{}, "vim.HttpNfcLease", "vim.HttpNfcLease"], "VApp.Export", ["vim.fault.InvalidPowerState", "vim.fault.TaskInProgress", "vim.fault.InvalidState", "vim.fault.FileFault"]], ["markAsTemplate", "MarkAsTemplate", "vim.version.version1", [], [{}, "void", "void"], "VirtualMachine.Provisioning.MarkAsTemplate", ["vim.fault.InvalidState", "vim.fault.VmConfigFault", "vim.fault.FileFault"]], ["markAsVirtualMachine", "MarkAsVirtualMachine", "vim.version.version1", [["pool", "vim.ResourcePool", "vim.version.version1", {}, "Resource.AssignVMToPool"], ["host", "vim.HostSystem", "vim.version.version1", {:optional => true}, nil]], [{}, "void", "void"], "VirtualMachine.Provisioning.MarkAsVM", ["vim.fault.InvalidState", "vim.fault.InvalidDatastore", "vim.fault.VmConfigFault", "vim.fault.FileFault"]], ["unregister", "UnregisterVM", "vim.version.version1", [], [{}, "void", "void"], "VirtualMachine.Inventory.Unregister", ["vim.fault.TaskInProgress", "vim.fault.InvalidPowerState"]], ["resetGuestInformation", "ResetGuestInformation", "vim.version.version1", [], [{}, "void", "void"], "VirtualMachine.Config.ResetGuestInfo", ["vim.fault.InvalidState"]], ["mountToolsInstaller", "MountToolsInstaller", "vim.version.version1", [], [{}, "void", "void"], "VirtualMachine.Interact.ToolsInstall", ["vim.fault.InvalidState", "vim.fault.VmConfigFault", "vim.fault.VmToolsUpgradeFault"]], ["unmountToolsInstaller", "UnmountToolsInstaller", "vim.version.version1", [], [{}, "void", "void"], "VirtualMachine.Interact.ToolsInstall", ["vim.fault.InvalidState", "vim.fault.VmConfigFault"]], ["upgradeTools", "UpgradeTools_Task", "vim.version.version1", [["installerOptions", "string", "vim.version.version1", {:optional => true}, nil]], [{}, "vim.Task", "void"], "VirtualMachine.Interact.ToolsInstall", ["vim.fault.InvalidState", "vim.fault.TaskInProgress", "vim.fault.VmToolsUpgradeFault", "vim.fault.ToolsUnavailable", "vim.fault.VmConfigFault"]], ["acquireMksTicket", "AcquireMksTicket", "vim.version.version1", [], [{}, "vim.VirtualMachine.MksTicket", "vim.VirtualMachine.MksTicket"], "VirtualMachine.Interact.ConsoleInteract", nil], ["acquireTicket", "AcquireTicket", "vim.version.version6", [["ticketType", "string", "vim.version.version6", {}, nil]], [{}, "vim.VirtualMachine.Ticket", "vim.VirtualMachine.Ticket"], nil, ["vim.fault.InvalidState"]], ["setScreenResolution", "SetScreenResolution", "vim.version.version1", [["width", "int", "vim.version.version1", {}, nil], ["height", "int", "vim.version.version1", {}, nil]], [{}, "void", "void"], "VirtualMachine.Interact.ConsoleInteract", ["vim.fault.InvalidState", "vim.fault.ToolsUnavailable"]], ["defragmentAllDisks", "DefragmentAllDisks", "vim.version.version2", [], [{}, "void", "void"], "VirtualMachine.Interact.DefragmentAllDisks", ["vim.fault.InvalidState", "vim.fault.InvalidPowerState", "vim.fault.TaskInProgress", "vim.fault.FileFault"]], ["createSecondary", "CreateSecondaryVM_Task", "vim.version.version5", [["host", "vim.HostSystem", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.Task", "vim.vm.FaultToleranceSecondaryOpResult"], "VirtualMachine.Interact.CreateSecondary", ["vim.fault.TaskInProgress", "vim.fault.InvalidState", "vim.fault.InsufficientResourcesFault", "vim.fault.VmFaultToleranceIssue", "vim.fault.FileFault", "vim.fault.VmConfigFault"]], ["turnOffFaultTolerance", "TurnOffFaultToleranceForVM_Task", "vim.version.version5", [], [{}, "vim.Task", "void"], "VirtualMachine.Interact.TurnOffFaultTolerance", ["vim.fault.TaskInProgress", "vim.fault.VmFaultToleranceIssue", "vim.fault.InvalidState"]], ["makePrimary", "MakePrimaryVM_Task", "vim.version.version5", [["vm", "vim.VirtualMachine", "vim.version.version5", {}, nil]], [{}, "vim.Task", "void"], "VirtualMachine.Interact.MakePrimary", ["vim.fault.TaskInProgress", "vim.fault.VmFaultToleranceIssue", "vim.fault.InvalidState"]], ["terminateFaultTolerantVM", "TerminateFaultTolerantVM_Task", "vim.version.version5", [["vm", "vim.VirtualMachine", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.Task", "void"], "VirtualMachine.Interact.TerminateFaultTolerantVM", ["vim.fault.TaskInProgress", "vim.fault.VmFaultToleranceIssue", "vim.fault.InvalidState"]], ["disableSecondary", "DisableSecondaryVM_Task", "vim.version.version5", [["vm", "vim.VirtualMachine", "vim.version.version5", {}, nil]], [{}, "vim.Task", "void"], "VirtualMachine.Interact.DisableSecondary", ["vim.fault.TaskInProgress", "vim.fault.VmFaultToleranceIssue", "vim.fault.InvalidState"]], ["enableSecondary", "EnableSecondaryVM_Task", "vim.version.version5", [["vm", "vim.VirtualMachine", "vim.version.version5", {}, nil], ["host", "vim.HostSystem", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.Task", "vim.vm.FaultToleranceSecondaryOpResult"], "VirtualMachine.Interact.EnableSecondary", ["vim.fault.TaskInProgress", "vim.fault.VmFaultToleranceIssue", "vim.fault.InvalidState", "vim.fault.VmConfigFault"]], ["setDisplayTopology", "SetDisplayTopology", "vim.version.version4", [["displays", "vim.VirtualMachine.DisplayTopology[]", "vim.version.version4", {}, nil]], [{}, "void", "void"], "VirtualMachine.Interact.ConsoleInteract", ["vim.fault.InvalidState", "vim.fault.ToolsUnavailable"]], ["startRecording", "StartRecording_Task", "vim.version.version5", [["name", "string", "vim.version.version5", {}, nil], ["description", "string", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.Task", "vim.vm.Snapshot"], "VirtualMachine.Interact.Record", ["vim.fault.InvalidState", "vim.fault.InvalidPowerState", "vim.fault.TaskInProgress", "vim.fault.FileFault", "vim.fault.SnapshotFault", "vim.fault.VmConfigFault", "vim.fault.RecordReplayDisabled", "vim.fault.HostIncompatibleForRecordReplay", "vim.fault.InvalidName"]], ["stopRecording", "StopRecording_Task", "vim.version.version5", [], [{}, "vim.Task", "void"], "VirtualMachine.Interact.Record", ["vim.fault.InvalidState", "vim.fault.InvalidPowerState", "vim.fault.TaskInProgress", "vim.fault.FileFault", "vim.fault.SnapshotFault"]], ["startReplaying", "StartReplaying_Task", "vim.version.version5", [["replaySnapshot", "vim.vm.Snapshot", "vim.version.version5", {}, nil]], [{}, "vim.Task", "void"], "VirtualMachine.Interact.Replay", ["vim.fault.InvalidState", "vim.fault.InvalidPowerState", "vim.fault.TaskInProgress", "vim.fault.FileFault", "vim.fault.SnapshotFault", "vim.fault.NotFound", "vim.fault.VmConfigFault", "vim.fault.RecordReplayDisabled", "vim.fault.HostIncompatibleForRecordReplay"]], ["stopReplaying", "StopReplaying_Task", "vim.version.version5", [], [{}, "vim.Task", "void"], "VirtualMachine.Interact.Replay", ["vim.fault.InvalidState", "vim.fault.InvalidPowerState", "vim.fault.TaskInProgress", "vim.fault.FileFault", "vim.fault.SnapshotFault"]], ["promoteDisks", "PromoteDisks_Task", "vim.version.version5", [["unlink", "boolean", "vim.version.version5", {}, nil], ["disks", "vim.vm.device.VirtualDisk[]", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.Task", "void"], "VirtualMachine.Provisioning.PromoteDisks", ["vim.fault.InvalidState", "vim.fault.InvalidPowerState", "vim.fault.TaskInProgress"]], ["createScreenshot", "CreateScreenshot_Task", "vim.version.version5", [], [{}, "vim.Task", "string"], "VirtualMachine.Interact.CreateScreenshot", ["vim.fault.TaskInProgress", "vim.fault.FileFault", "vim.fault.InvalidState"]], ["queryChangedDiskAreas", "QueryChangedDiskAreas", "vim.version.version5", [["snapshot", "vim.vm.Snapshot", "vim.version.version5", {:optional => true}, nil], ["deviceKey", "int", "vim.version.version5", {}, nil], ["startOffset", "long", "vim.version.version5", {}, nil], ["changeId", "string", "vim.version.version5", {}, nil]], [{}, "vim.VirtualMachine.DiskChangeInfo", "vim.VirtualMachine.DiskChangeInfo"], "VirtualMachine.Provisioning.DiskRandomRead", ["vim.fault.FileFault", "vim.fault.NotFound"]], ["queryUnownedFiles", "QueryUnownedFiles", "vim.version.version5", [], [{:optional => true}, "string[]", "string[]"], "VirtualMachine.Config.QueryUnownedFiles", nil], ["reloadFromPath", "reloadVirtualMachineFromPath_Task", "vim.version.version6", [["configurationPath", "string", "vim.version.version6", {}, nil]], [{}, "vim.Task", "void"], "VirtualMachine.Config.ReloadFromPath", ["vim.fault.InvalidPowerState", "vim.fault.TaskInProgress", "vim.fault.FileFault", "vim.fault.InvalidState", "vim.fault.VmConfigFault", "vim.fault.AlreadyExists"]], ["queryFaultToleranceCompatibility", "QueryFaultToleranceCompatibility", "vim.version.version6", [], [{:optional => true}, "vmodl.MethodFault[]", "vmodl.MethodFault[]"], "VirtualMachine.Config.QueryFTCompatibility", ["vim.fault.InvalidState", "vim.fault.VmConfigFault"]], ["terminate", "TerminateVM", "vim.version.version7", [], [{}, "void", "void"], "VirtualMachine.Interact.PowerOff", ["vim.fault.InvalidState", "vim.fault.TaskInProgress"]]])
    create_data_type("vim.VirtualMachine.StorageRequirement", "StorageRequirement", "vmodl.DynamicData", "vim.version.version7", [["datastore", "vim.Datastore", "vim.version.version7"], ["freeSpaceRequiredInKb", "long", "vim.version.version7"]])
    create_enum_type("vim.VirtualMachine.PowerState", "VirtualMachinePowerState", "vim.version.version1", ["poweredOff", "poweredOn", "suspended"])
    create_enum_type("vim.VirtualMachine.AppHeartbeatStatusType", "VirtualMachineAppHeartbeatStatusType", "vim.version.version6", ["appStatusGray", "appStatusGreen", "appStatusRed"])
    create_enum_type("vim.VirtualMachine.ConnectionState", "VirtualMachineConnectionState", "vim.version.version1", ["connected", "disconnected", "orphaned", "inaccessible", "invalid"])
    create_enum_type("vim.VirtualMachine.MovePriority", "VirtualMachineMovePriority", "vim.version.version1", ["lowPriority", "highPriority", "defaultPriority"])
    create_data_type("vim.VirtualMachine.Ticket", "VirtualMachineTicket", "vmodl.DynamicData", "vim.version.version6", [["ticket", "string", "vim.version.version6"], ["cfgFile", "string", "vim.version.version6"], ["host", "string", "vim.version.version6", {:optional => true}], ["port", "int", "vim.version.version6", {:optional => true}], ["sslThumbprint", "string", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.VirtualMachine.MksTicket", "VirtualMachineMksTicket", "vmodl.DynamicData", "vim.version.version1", [["ticket", "string", "vim.version.version1"], ["cfgFile", "string", "vim.version.version1"], ["host", "string", "vim.version.version1", {:optional => true}], ["port", "int", "vim.version.version1", {:optional => true}], ["sslThumbprint", "string", "vim.version.version2", {:optional => true}]])
    create_enum_type("vim.VirtualMachine.FaultToleranceState", "VirtualMachineFaultToleranceState", "vim.version.version5", ["notConfigured", "disabled", "enabled", "needSecondary", "starting", "running"])
    create_enum_type("vim.VirtualMachine.RecordReplayState", "VirtualMachineRecordReplayState", "vim.version.version5", ["recording", "replaying", "inactive"])
    create_enum_type("vim.VirtualMachine.NeedSecondaryReason", "VirtualMachineNeedSecondaryReason", "vim.version.version5", ["initializing", "divergence", "lostConnection", "partialHardwareFailure", "userAction", "checkpointError", "other"])
    create_enum_type("vim.VirtualMachine.TicketType", "VirtualMachineTicketType", "vim.version.version6", ["mks", "device", "guestControl"])
    create_data_type("vim.VirtualMachine.DisplayTopology", "VirtualMachineDisplayTopology", "vmodl.DynamicData", "vim.version.version4", [["x", "int", "vim.version.version4"], ["y", "int", "vim.version.version4"], ["width", "int", "vim.version.version4"], ["height", "int", "vim.version.version4"]])
    create_data_type("vim.VirtualMachine.DiskChangeInfo", "DiskChangeInfo", "vmodl.DynamicData", "vim.version.version5", [["startOffset", "long", "vim.version.version5"], ["length", "long", "vim.version.version5"], ["changedArea", "vim.VirtualMachine.DiskChangeInfo.DiskChangeExtent[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.VirtualMachine.DiskChangeInfo.DiskChangeExtent", "DiskChangeExtent", "vmodl.DynamicData", "vim.version.version5", [["start", "long", "vim.version.version5"], ["length", "long", "vim.version.version5"]])
    create_data_type("vim.VirtualMachine.WipeResult", "VirtualMachineWipeResult", "vmodl.DynamicData", "vim.version.version8", [["diskId", "int", "vim.version.version8"], ["shrinkableDiskSpace", "long", "vim.version.version8"]])
    create_data_type("vim.alarm.AlarmTriggeringAction", "AlarmTriggeringAction", "vim.alarm.AlarmAction", "vim.version.version1", [["action", "vim.action.Action", "vim.version.version1"], ["transitionSpecs", "vim.alarm.AlarmTriggeringAction.TransitionSpec[]", "vim.version.version5", {:optional => true}], ["green2yellow", "boolean", "vim.version.version1"], ["yellow2red", "boolean", "vim.version.version1"], ["red2yellow", "boolean", "vim.version.version1"], ["yellow2green", "boolean", "vim.version.version1"]])
    create_data_type("vim.alarm.AlarmTriggeringAction.TransitionSpec", "AlarmTriggeringActionTransitionSpec", "vmodl.DynamicData", "vim.version.version5", [["startState", "vim.ManagedEntity.Status", "vim.version.version5"], ["finalState", "vim.ManagedEntity.Status", "vim.version.version5"], ["repeats", "boolean", "vim.version.version5"]])
    create_data_type("vim.alarm.EventAlarmExpression", "EventAlarmExpression", "vim.alarm.AlarmExpression", "vim.version.version2", [["comparisons", "vim.alarm.EventAlarmExpression.Comparison[]", "vim.version.version5", {:optional => true}], ["eventType", "vmodl.TypeName", "vim.version.version2"], ["eventTypeId", "string", "vim.version.version2", {:optional => true}], ["objectType", "vmodl.TypeName", "vim.version.version5", {:optional => true}], ["status", "vim.ManagedEntity.Status", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.alarm.EventAlarmExpression.ComparisonOperator", "EventAlarmExpressionComparisonOperator", "vim.version.version5", ["equals", "notEqualTo", "startsWith", "doesNotStartWith", "endsWith", "doesNotEndWith"])
    create_data_type("vim.alarm.EventAlarmExpression.Comparison", "EventAlarmExpressionComparison", "vmodl.DynamicData", "vim.version.version5", [["attributeName", "string", "vim.version.version5"], ["operator", "string", "vim.version.version5"], ["value", "string", "vim.version.version5"]])
    create_data_type("vim.alarm.AlarmInfo", "AlarmInfo", "vim.alarm.AlarmSpec", "vim.version.version1", [["key", "string", "vim.version.version1"], ["alarm", "vim.alarm.Alarm", "vim.version.version1"], ["entity", "vim.ManagedEntity", "vim.version.version1"], ["lastModifiedTime", "vmodl.DateTime", "vim.version.version1"], ["lastModifiedUser", "string", "vim.version.version1"], ["creationEventId", "int", "vim.version.version1"]])
    create_managed_type("vim.alarm.AlarmManager", "AlarmManager", "vmodl.ManagedObject", "vim.version.version1", [["defaultExpression", "vim.alarm.AlarmExpression[]", "vim.version.version1", {:optional => true}, "System.View"], ["description", "vim.alarm.AlarmDescription", "vim.version.version1", {}, "System.View"]], [["create", "CreateAlarm", "vim.version.version1", [["entity", "vim.ManagedEntity", "vim.version.version1", {}, "Alarm.Create"], ["spec", "vim.alarm.AlarmSpec", "vim.version.version1", {}, nil]], [{}, "vim.alarm.Alarm", "vim.alarm.Alarm"], nil, ["vim.fault.InvalidName", "vim.fault.DuplicateName"]], ["getAlarm", "GetAlarm", "vim.version.version1", [["entity", "vim.ManagedEntity", "vim.version.version1", {:optional => true}, nil]], [{:optional => true}, "vim.alarm.Alarm[]", "vim.alarm.Alarm[]"], "System.View", nil], ["getAlarmActionsEnabled", "AreAlarmActionsEnabled", "vim.version.version5", [["entity", "vim.ManagedEntity", "vim.version.version5", {}, "System.Read"]], [{}, "boolean", "boolean"], nil, nil], ["setAlarmActionsEnabled", "EnableAlarmActions", "vim.version.version5", [["entity", "vim.ManagedEntity", "vim.version.version5", {}, "Alarm.DisableActions"], ["enabled", "boolean", "vim.version.version5", {}, nil]], [{}, "void", "void"], nil, nil], ["getAlarmState", "GetAlarmState", "vim.version.version1", [["entity", "vim.ManagedEntity", "vim.version.version1", {}, "System.Read"]], [{:optional => true}, "vim.alarm.AlarmState[]", "vim.alarm.AlarmState[]"], nil, nil], ["acknowledgeAlarm", "AcknowledgeAlarm", "vim.version.version5", [["alarm", "vim.alarm.Alarm", "vim.version.version5", {}, "Alarm.Acknowledge"], ["entity", "vim.ManagedEntity", "vim.version.version5", {}, "System.Read"]], [{}, "void", "void"], nil, nil]])
    create_data_type("vim.alarm.AlarmState", "AlarmState", "vmodl.DynamicData", "vim.version.version1", [["key", "string", "vim.version.version1"], ["entity", "vim.ManagedEntity", "vim.version.version1"], ["alarm", "vim.alarm.Alarm", "vim.version.version1"], ["overallStatus", "vim.ManagedEntity.Status", "vim.version.version1"], ["time", "vmodl.DateTime", "vim.version.version1"], ["acknowledged", "boolean", "vim.version.version5", {:optional => true}], ["acknowledgedByUser", "string", "vim.version.version5", {:optional => true}], ["acknowledgedTime", "vmodl.DateTime", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.cluster.DasVmConfigSpec", "ClusterDasVmConfigSpec", "vim.option.ArrayUpdateSpec", "vim.version.version1", [["info", "vim.cluster.DasVmConfigInfo", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.cluster.DrsVmConfigSpec", "ClusterDrsVmConfigSpec", "vim.option.ArrayUpdateSpec", "vim.version.version1", [["info", "vim.cluster.DrsVmConfigInfo", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.cluster.DpmHostConfigSpec", "ClusterDpmHostConfigSpec", "vim.option.ArrayUpdateSpec", "vim.version.version2", [["info", "vim.cluster.DpmHostConfigInfo", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.cluster.GroupSpec", "ClusterGroupSpec", "vim.option.ArrayUpdateSpec", "vim.version.version6", [["info", "vim.cluster.GroupInfo", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.cluster.DasAamHostInfo", "ClusterDasAamHostInfo", "vim.cluster.DasHostInfo", "vim.version.version5", [["hostDasState", "vim.cluster.DasAamNodeState[]", "vim.version.version5", {:optional => true}], ["primaryHosts", "string[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.cluster.FailoverHostAdmissionControlInfo", "ClusterFailoverHostAdmissionControlInfo", "vim.cluster.DasAdmissionControlInfo", "vim.version.version5", [["hostStatus", "vim.cluster.FailoverHostAdmissionControlInfo.HostStatus[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.cluster.FailoverHostAdmissionControlInfo.HostStatus", "ClusterFailoverHostAdmissionControlInfoHostStatus", "vmodl.DynamicData", "vim.version.version5", [["host", "vim.HostSystem", "vim.version.version5"], ["status", "vim.ManagedEntity.Status", "vim.version.version5"]])
    create_data_type("vim.cluster.RuleInfo", "ClusterRuleInfo", "vmodl.DynamicData", "vim.version.version1", [["key", "int", "vim.version.version1", {:optional => true}], ["status", "vim.ManagedEntity.Status", "vim.version.version1", {:optional => true}], ["enabled", "boolean", "vim.version.version1", {:optional => true}], ["name", "string", "vim.version.version1", {:optional => true}], ["mandatory", "boolean", "vim.version.version6", {:optional => true}], ["userCreated", "boolean", "vim.version.version6", {:optional => true}], ["inCompliance", "boolean", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.cluster.RuleSpec", "ClusterRuleSpec", "vim.option.ArrayUpdateSpec", "vim.version.version1", [["info", "vim.cluster.RuleInfo", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.cluster.VmHostRuleInfo", "ClusterVmHostRuleInfo", "vim.cluster.RuleInfo", "vim.version.version6", [["vmGroupName", "string", "vim.version.version6", {:optional => true}], ["affineHostGroupName", "string", "vim.version.version6", {:optional => true}], ["antiAffineHostGroupName", "string", "vim.version.version6", {:optional => true}]])
    create_managed_type("vim.dvs.DistributedVirtualPortgroup", "DistributedVirtualPortgroup", "vim.Network", "vim.version.version5", [["key", "string", "vim.version.version5", {}, nil], ["config", "vim.dvs.DistributedVirtualPortgroup.ConfigInfo", "vim.version.version5", {}, nil], ["portKeys", "string[]", "vim.version.version5", {:optional => true}, nil]], [["reconfigure", "ReconfigureDVPortgroup_Task", "vim.version.version5", [["spec", "vim.dvs.DistributedVirtualPortgroup.ConfigSpec", "vim.version.version5", {}, nil]], [{}, "vim.Task", "void"], nil, ["vim.fault.DvsFault", "vim.fault.ConcurrentAccess", "vim.fault.DuplicateName", "vim.fault.InvalidName"]], ["rollback", "DVPortgroupRollback_Task", "vim.version.version8", [["entityBackup", "vim.dvs.EntityBackup.Config", "vim.version.version8", {:optional => true}, nil]], [{:optional => true}, "vim.Task", "vim.dvs.DistributedVirtualPortgroup.ConfigSpec"], nil, ["vim.fault.DvsFault", "vim.fault.RollbackFailure"]]])
    create_enum_type("vim.dvs.DistributedVirtualPortgroup.PortgroupType", "DistributedVirtualPortgroupPortgroupType", "vim.version.version5", ["earlyBinding", "lateBinding", "ephemeral"])
    create_data_type("vim.dvs.DistributedVirtualPortgroup.PortgroupPolicy", "DVPortgroupPolicy", "vmodl.DynamicData", "vim.version.version5", [["blockOverrideAllowed", "boolean", "vim.version.version5"], ["shapingOverrideAllowed", "boolean", "vim.version.version5"], ["vendorConfigOverrideAllowed", "boolean", "vim.version.version5"], ["livePortMovingAllowed", "boolean", "vim.version.version5"], ["portConfigResetAtDisconnect", "boolean", "vim.version.version5"], ["networkResourcePoolOverrideAllowed", "boolean", "vim.version.version7", {:optional => true}], ["trafficFilterOverrideAllowed", "boolean", "vim.version.version9", {:optional => true}]])
    create_enum_type("vim.dvs.DistributedVirtualPortgroup.MetaTagName", "DistributedVirtualPortgroupMetaTagName", "vim.version.version5", ["dvsName", "portgroupName", "portIndex"])
    create_data_type("vim.dvs.DistributedVirtualPortgroup.ConfigSpec", "DVPortgroupConfigSpec", "vmodl.DynamicData", "vim.version.version5", [["configVersion", "string", "vim.version.version5", {:optional => true}], ["name", "string", "vim.version.version5", {:optional => true}], ["numPorts", "int", "vim.version.version5", {:optional => true}], ["portNameFormat", "string", "vim.version.version5", {:optional => true}], ["defaultPortConfig", "vim.dvs.DistributedVirtualPort.Setting", "vim.version.version5", {:optional => true}], ["description", "string", "vim.version.version5", {:optional => true}], ["type", "string", "vim.version.version5", {:optional => true}], ["scope", "vim.ManagedEntity[]", "vim.version.version5", {:optional => true}], ["policy", "vim.dvs.DistributedVirtualPortgroup.PortgroupPolicy", "vim.version.version5", {:optional => true}], ["vendorSpecificConfig", "vim.dvs.KeyedOpaqueBlob[]", "vim.version.version5", {:optional => true}], ["autoExpand", "boolean", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.dvs.DistributedVirtualPortgroup.ConfigInfo", "DVPortgroupConfigInfo", "vmodl.DynamicData", "vim.version.version5", [["key", "string", "vim.version.version5"], ["name", "string", "vim.version.version5"], ["numPorts", "int", "vim.version.version5"], ["distributedVirtualSwitch", "vim.DistributedVirtualSwitch", "vim.version.version5", {:optional => true}], ["defaultPortConfig", "vim.dvs.DistributedVirtualPort.Setting", "vim.version.version5", {:optional => true}], ["description", "string", "vim.version.version5", {:optional => true}], ["type", "string", "vim.version.version5"], ["policy", "vim.dvs.DistributedVirtualPortgroup.PortgroupPolicy", "vim.version.version5"], ["portNameFormat", "string", "vim.version.version5", {:optional => true}], ["scope", "vim.ManagedEntity[]", "vim.version.version5", {:optional => true}], ["vendorSpecificConfig", "vim.dvs.KeyedOpaqueBlob[]", "vim.version.version5", {:optional => true}], ["configVersion", "string", "vim.version.version5", {:optional => true}], ["autoExpand", "boolean", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.event.AccountCreatedEvent", "AccountCreatedEvent", "vim.event.HostEvent", "vim.version.version1", [["spec", "vim.host.LocalAccountManager.AccountSpecification", "vim.version.version1"], ["group", "boolean", "vim.version.version1"]])
    create_data_type("vim.event.AccountUpdatedEvent", "AccountUpdatedEvent", "vim.event.HostEvent", "vim.version.version1", [["spec", "vim.host.LocalAccountManager.AccountSpecification", "vim.version.version1"], ["group", "boolean", "vim.version.version1"]])
    create_data_type("vim.event.ClusterComplianceCheckedEvent", "ClusterComplianceCheckedEvent", "vim.event.ClusterEvent", "vim.version.version5", [["profile", "vim.event.ProfileEventArgument", "vim.version.version5"]])
    create_data_type("vim.event.VmFaultToleranceStateChangedEvent", "VmFaultToleranceStateChangedEvent", "vim.event.VmEvent", "vim.version.version5", [["oldState", "vim.VirtualMachine.FaultToleranceState", "vim.version.version5"], ["newState", "vim.VirtualMachine.FaultToleranceState", "vim.version.version5"]])
    create_data_type("vim.event.HostEnableAdminFailedEvent", "HostEnableAdminFailedEvent", "vim.event.HostEvent", "vim.version.version2", [["permissions", "vim.AuthorizationManager.Permission[]", "vim.version.version2"]])
    create_data_type("vim.event.DVPortgroupReconfiguredEvent", "DVPortgroupReconfiguredEvent", "vim.event.DVPortgroupEvent", "vim.version.version5", [["configSpec", "vim.dvs.DistributedVirtualPortgroup.ConfigSpec", "vim.version.version5"]])
    create_data_type("vim.fault.ActiveDirectoryFault", "ActiveDirectoryFault", "vim.fault.VimFault", "vim.version.version6", [["errorCode", "int", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.fault.AlreadyExists", "AlreadyExists", "vim.fault.VimFault", "vim.version.version1", [["name", "string", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.fault.AlreadyUpgraded", "AlreadyUpgraded", "vim.fault.VimFault", "vim.version.version1", nil)
    create_data_type("vim.fault.AnswerFileUpdateFailed", "AnswerFileUpdateFailed", "vim.fault.VimFault", "vim.version.version7", [["failure", "vim.fault.AnswerFileUpdateFailed.UpdateFailure[]", "vim.version.version7"]])
    create_data_type("vim.fault.AnswerFileUpdateFailed.UpdateFailure", "AnswerFileUpdateFailure", "vmodl.DynamicData", "vim.version.version7", [["userInputPath", "vim.profile.ProfilePropertyPath", "vim.version.version7"], ["errMsg", "vmodl.LocalizableMessage", "vim.version.version7"]])
    create_data_type("vim.fault.AuthMinimumAdminPermission", "AuthMinimumAdminPermission", "vim.fault.VimFault", "vim.version.version1", nil)
    create_data_type("vim.fault.CannotAccessLocalSource", "CannotAccessLocalSource", "vim.fault.VimFault", "vim.version.version1", nil)
    create_data_type("vim.fault.CannotAccessVmComponent", "CannotAccessVmComponent", "vim.fault.VmConfigFault", "vim.version.version1", nil)
    create_data_type("vim.fault.CannotAccessVmConfig", "CannotAccessVmConfig", "vim.fault.CannotAccessVmComponent", "vim.version.version1", [["reason", "vmodl.MethodFault", "vim.version.version1"]])
    create_data_type("vim.fault.CannotAccessVmDevice", "CannotAccessVmDevice", "vim.fault.CannotAccessVmComponent", "vim.version.version1", [["device", "string", "vim.version.version1"], ["backing", "string", "vim.version.version1"], ["connected", "boolean", "vim.version.version1"]])
    create_data_type("vim.fault.CannotAccessVmDisk", "CannotAccessVmDisk", "vim.fault.CannotAccessVmDevice", "vim.version.version1", [["fault", "vmodl.MethodFault", "vim.version.version1"]])
    create_data_type("vim.fault.CannotChangeDrsBehaviorForFtSecondary", "CannotChangeDrsBehaviorForFtSecondary", "vim.fault.VmFaultToleranceIssue", "vim.version.version6", [["vm", "vim.VirtualMachine", "vim.version.version6"], ["vmName", "string", "vim.version.version6"]])
    create_data_type("vim.fault.CannotChangeHaSettingsForFtSecondary", "CannotChangeHaSettingsForFtSecondary", "vim.fault.VmFaultToleranceIssue", "vim.version.version6", [["vm", "vim.VirtualMachine", "vim.version.version6"], ["vmName", "string", "vim.version.version6"]])
    create_data_type("vim.fault.CannotChangeVsanClusterUuid", "CannotChangeVsanClusterUuid", "vim.fault.VsanFault", "vim.version.version9", nil)
    create_data_type("vim.fault.CannotChangeVsanNodeUuid", "CannotChangeVsanNodeUuid", "vim.fault.VsanFault", "vim.version.version9", nil)
    create_data_type("vim.fault.CannotDisableSnapshot", "CannotDisableSnapshot", "vim.fault.VmConfigFault", "vim.version.version2", nil)
    create_data_type("vim.fault.CannotDisconnectHostWithFaultToleranceVm", "CannotDisconnectHostWithFaultToleranceVm", "vim.fault.VimFault", "vim.version.version5", [["hostName", "string", "vim.version.version5"]])
    create_data_type("vim.fault.CannotMoveFaultToleranceVm", "CannotMoveFaultToleranceVm", "vim.fault.VimFault", "vim.version.version5", [["moveType", "string", "vim.version.version5"], ["vmName", "string", "vim.version.version5"]])
    create_enum_type("vim.fault.CannotMoveFaultToleranceVm.MoveType", "CannotMoveFaultToleranceVmMoveType", "vim.version.version5", ["resourcePool", "cluster"])
    create_data_type("vim.fault.CannotMoveHostWithFaultToleranceVm", "CannotMoveHostWithFaultToleranceVm", "vim.fault.VimFault", "vim.version.version5", nil)
    create_data_type("vim.fault.CannotMoveVsanEnabledHost", "CannotMoveVsanEnabledHost", "vim.fault.VsanFault", "vim.version.version9", nil)
    create_data_type("vim.fault.CannotPlaceWithoutPrerequisiteMoves", "CannotPlaceWithoutPrerequisiteMoves", "vim.fault.VimFault", "vim.version.version8", nil)
    create_data_type("vim.fault.CannotReconfigureVsanWhenHaEnabled", "CannotReconfigureVsanWhenHaEnabled", "vim.fault.VsanFault", "vim.version.version9", nil)
    create_data_type("vim.fault.CannotUseNetwork", "CannotUseNetwork", "vim.fault.VmConfigFault", "vim.version.version9", [["device", "string", "vim.version.version9"], ["backing", "string", "vim.version.version9"], ["connected", "boolean", "vim.version.version9"], ["reason", "string", "vim.version.version9"]])
    create_enum_type("vim.fault.CannotUseNetwork.Reason", "CannotUseNetworkReason", "vim.version.version9", ["NetworkReservationNotSupported", "MismatchedNetworkPolicies", "MismatchedDvsVersionOrVendor", "VMotionToUnsupportedNetworkType"])
    create_data_type("vim.fault.ConcurrentAccess", "ConcurrentAccess", "vim.fault.VimFault", "vim.version.version1", nil)
    create_data_type("vim.fault.CpuHotPlugNotSupported", "CpuHotPlugNotSupported", "vim.fault.VmConfigFault", "vim.version.version5", nil)
    create_data_type("vim.fault.CustomizationFault", "CustomizationFault", "vim.fault.VimFault", "vim.version.version1", nil)
    create_data_type("vim.fault.CustomizationPending", "CustomizationPending", "vim.fault.CustomizationFault", "vim.version.version2", nil)
    create_data_type("vim.fault.DasConfigFault", "DasConfigFault", "vim.fault.VimFault", "vim.version.version1", [["reason", "string", "vim.version.version5", {:optional => true}], ["output", "string", "vim.version.version5", {:optional => true}], ["event", "vim.event.Event[]", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.fault.DasConfigFault.DasConfigFaultReason", "DasConfigFaultDasConfigFaultReason", "vim.version.version5", ["HostNetworkMisconfiguration", "HostMisconfiguration", "InsufficientPrivileges", "NoPrimaryAgentAvailable", "Other", "NoDatastoresConfigured", "CreateConfigVvolFailed", "VSanNotSupportedOnHost"])
    create_data_type("vim.fault.DeltaDiskFormatNotSupported", "DeltaDiskFormatNotSupported", "vim.fault.VmConfigFault", "vim.version.version7", [["datastore", "vim.Datastore[]", "vim.version.version7", {:optional => true}], ["deltaDiskFormat", "string", "vim.version.version7"]])
    create_data_type("vim.fault.DestinationVsanDisabled", "DestinationVsanDisabled", "vim.fault.CannotMoveVsanEnabledHost", "vim.version.version9", [["destinationCluster", "string", "vim.version.version9"]])
    create_data_type("vim.fault.DomainNotFound", "DomainNotFound", "vim.fault.ActiveDirectoryFault", "vim.version.version6", [["domainName", "string", "vim.version.version6"]])
    create_data_type("vim.fault.DrsDisabledOnVm", "DrsDisabledOnVm", "vim.fault.VimFault", "vim.version.version5", nil)
    create_data_type("vim.fault.DuplicateName", "DuplicateName", "vim.fault.VimFault", "vim.version.version1", [["name", "string", "vim.version.version1"], ["object", "vmodl.ManagedObject", "vim.version.version1"]])
    create_data_type("vim.fault.DuplicateVsanNetworkInterface", "DuplicateVsanNetworkInterface", "vim.fault.VsanFault", "vim.version.version9", [["device", "string", "vim.version.version9"]])
    create_data_type("vim.fault.DvsFault", "DvsFault", "vim.fault.VimFault", "vim.version.version5", nil)
    create_data_type("vim.fault.DvsNotAuthorized", "DvsNotAuthorized", "vim.fault.DvsFault", "vim.version.version5", [["sessionExtensionKey", "string", "vim.version.version5", {:optional => true}], ["dvsExtensionKey", "string", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.fault.DvsOperationBulkFault", "DvsOperationBulkFault", "vim.fault.DvsFault", "vim.version.version5", [["hostFault", "vim.fault.DvsOperationBulkFault.FaultOnHost[]", "vim.version.version5"]])
    create_data_type("vim.fault.DvsOperationBulkFault.FaultOnHost", "DvsOperationBulkFaultFaultOnHost", "vmodl.DynamicData", "vim.version.version5", [["host", "vim.HostSystem", "vim.version.version5"], ["fault", "vmodl.MethodFault", "vim.version.version5"]])
    create_data_type("vim.fault.DvsScopeViolated", "DvsScopeViolated", "vim.fault.DvsFault", "vim.version.version5", [["scope", "vim.ManagedEntity[]", "vim.version.version5"], ["entity", "vim.ManagedEntity", "vim.version.version5"]])
    create_data_type("vim.fault.EightHostLimitViolated", "EightHostLimitViolated", "vim.fault.VmConfigFault", "vim.version.version5", nil)
    create_data_type("vim.fault.ExpiredAddonLicense", "ExpiredAddonLicense", "vim.fault.ExpiredFeatureLicense", "vim.version.version2", nil)
    create_data_type("vim.fault.ExpiredEditionLicense", "ExpiredEditionLicense", "vim.fault.ExpiredFeatureLicense", "vim.version.version2", nil)
    create_data_type("vim.fault.ExtendedFault", "ExtendedFault", "vim.fault.VimFault", "vim.version.version2", [["faultTypeId", "string", "vim.version.version2"], ["data", "vim.KeyValue[]", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.fault.FaultToleranceCannotEditMem", "FaultToleranceCannotEditMem", "vim.fault.VmConfigFault", "vim.version.version6", [["vmName", "string", "vim.version.version6"], ["vm", "vim.VirtualMachine", "vim.version.version6"]])
    create_data_type("vim.fault.FaultToleranceNotLicensed", "FaultToleranceNotLicensed", "vim.fault.VmFaultToleranceIssue", "vim.version.version5", [["hostName", "string", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.fault.FaultTolerancePrimaryPowerOnNotAttempted", "FaultTolerancePrimaryPowerOnNotAttempted", "vim.fault.VmFaultToleranceIssue", "vim.version.version5", [["secondaryVm", "vim.VirtualMachine", "vim.version.version5"], ["primaryVm", "vim.VirtualMachine", "vim.version.version5"]])
    create_data_type("vim.fault.FaultToleranceVmNotDasProtected", "FaultToleranceVmNotDasProtected", "vim.fault.VimFault", "vim.version.version7", [["vm", "vim.VirtualMachine", "vim.version.version7"], ["vmName", "string", "vim.version.version7"]])
    create_data_type("vim.fault.FcoeFault", "FcoeFault", "vim.fault.VimFault", "vim.version.version7", nil)
    create_data_type("vim.fault.FcoeFaultPnicHasNoPortSet", "FcoeFaultPnicHasNoPortSet", "vim.fault.FcoeFault", "vim.version.version7", [["nicDevice", "string", "vim.version.version7"]])
    create_data_type("vim.fault.FileFault", "FileFault", "vim.fault.VimFault", "vim.version.version1", [["file", "string", "vim.version.version1"]])
    create_data_type("vim.fault.FileLocked", "FileLocked", "vim.fault.FileFault", "vim.version.version1", nil)
    create_data_type("vim.fault.FileNameTooLong", "FileNameTooLong", "vim.fault.FileFault", "vim.version.version7", nil)
    create_data_type("vim.fault.FileNotFound", "FileNotFound", "vim.fault.FileFault", "vim.version.version1", nil)
    create_data_type("vim.fault.FileNotWritable", "FileNotWritable", "vim.fault.FileFault", "vim.version.version1", nil)
    create_data_type("vim.fault.FileTooLarge", "FileTooLarge", "vim.fault.FileFault", "vim.version.version2", [["datastore", "string", "vim.version.version2"], ["fileSize", "long", "vim.version.version2"], ["maxFileSize", "long", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.fault.FtIssuesOnHost", "FtIssuesOnHost", "vim.fault.VmFaultToleranceIssue", "vim.version.version5", [["host", "vim.HostSystem", "vim.version.version5"], ["hostName", "string", "vim.version.version5"], ["errors", "vmodl.MethodFault[]", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.fault.FtIssuesOnHost.HostSelectionType", "FtIssuesOnHostHostSelectionType", "vim.version.version5", ["user", "vc", "drs"])
    create_data_type("vim.fault.GenericDrsFault", "GenericDrsFault", "vim.fault.VimFault", "vim.version.version2", [["hostFaults", "vmodl.MethodFault[]", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.fault.GenericVmConfigFault", "GenericVmConfigFault", "vim.fault.VmConfigFault", "vim.version.version1", [["reason", "string", "vim.version.version1"]])
    create_data_type("vim.fault.GuestOperationsFault", "GuestOperationsFault", "vim.fault.VimFault", "vim.version.version7", nil)
    create_data_type("vim.fault.GuestOperationsUnavailable", "GuestOperationsUnavailable", "vim.fault.GuestOperationsFault", "vim.version.version7", nil)
    create_data_type("vim.fault.GuestPermissionDenied", "GuestPermissionDenied", "vim.fault.GuestOperationsFault", "vim.version.version7", nil)
    create_data_type("vim.fault.GuestProcessNotFound", "GuestProcessNotFound", "vim.fault.GuestOperationsFault", "vim.version.version7", [["pid", "long", "vim.version.version7"]])
    create_data_type("vim.fault.HostConfigFault", "HostConfigFault", "vim.fault.VimFault", "vim.version.version1", nil)
    create_data_type("vim.fault.HostConnectFault", "HostConnectFault", "vim.fault.VimFault", "vim.version.version1", nil)
    create_data_type("vim.fault.HostInDomain", "HostInDomain", "vim.fault.HostConfigFault", "vim.version.version6", nil)
    create_data_type("vim.fault.HostIncompatibleForFaultTolerance", "HostIncompatibleForFaultTolerance", "vim.fault.VmFaultToleranceIssue", "vim.version.version5", [["hostName", "string", "vim.version.version5", {:optional => true}], ["reason", "string", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.fault.HostIncompatibleForFaultTolerance.Reason", "HostIncompatibleForFaultToleranceReason", "vim.version.version5", ["product", "processor"])
    create_data_type("vim.fault.HostIncompatibleForRecordReplay", "HostIncompatibleForRecordReplay", "vim.fault.VimFault", "vim.version.version5", [["hostName", "string", "vim.version.version5", {:optional => true}], ["reason", "string", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.fault.HostIncompatibleForRecordReplay.Reason", "HostIncompatibleForRecordReplayReason", "vim.version.version5", ["product", "processor"])
    create_data_type("vim.fault.HostPowerOpFailed", "HostPowerOpFailed", "vim.fault.VimFault", "vim.version.version2", nil)
    create_data_type("vim.fault.IORMNotSupportedHostOnDatastore", "IORMNotSupportedHostOnDatastore", "vim.fault.VimFault", "vim.version.version6", [["datastore", "vim.Datastore", "vim.version.version6"], ["datastoreName", "string", "vim.version.version6"], ["host", "vim.HostSystem[]", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.fault.ImportHostAddFailure", "ImportHostAddFailure", "vim.fault.DvsFault", "vim.version.version8", [["hostIp", "string[]", "vim.version.version8"]])
    create_data_type("vim.fault.ImportOperationBulkFault", "ImportOperationBulkFault", "vim.fault.DvsFault", "vim.version.version8", [["importFaults", "vim.fault.ImportOperationBulkFault.FaultOnImport[]", "vim.version.version8"]])
    create_data_type("vim.fault.ImportOperationBulkFault.FaultOnImport", "ImportOperationBulkFaultFaultOnImport", "vmodl.DynamicData", "vim.version.version8", [["entityType", "string", "vim.version.version8", {:optional => true}], ["key", "string", "vim.version.version8", {:optional => true}], ["fault", "vmodl.MethodFault", "vim.version.version8"]])
    create_data_type("vim.fault.InaccessibleVFlashSource", "InaccessibleVFlashSource", "vim.fault.VimFault", "vim.version.version9", [["hostName", "string", "vim.version.version9"]])
    create_data_type("vim.fault.IncompatibleHostForFtSecondary", "IncompatibleHostForFtSecondary", "vim.fault.VmFaultToleranceIssue", "vim.version.version5", [["host", "vim.HostSystem", "vim.version.version5"], ["error", "vmodl.MethodFault[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.fault.IncorrectFileType", "IncorrectFileType", "vim.fault.FileFault", "vim.version.version1", nil)
    create_data_type("vim.fault.InsufficientResourcesFault", "InsufficientResourcesFault", "vim.fault.VimFault", "vim.version.version1", nil)
    create_data_type("vim.fault.InsufficientStandbyResource", "InsufficientStandbyResource", "vim.fault.InsufficientResourcesFault", "vim.version.version5", nil)
    create_data_type("vim.fault.InsufficientStorageSpace", "InsufficientStorageSpace", "vim.fault.InsufficientResourcesFault", "vim.version.version7", nil)
    create_data_type("vim.fault.InsufficientVFlashResourcesFault", "InsufficientVFlashResourcesFault", "vim.fault.InsufficientResourcesFault", "vim.version.version9", [["freeSpace", "long", "vim.version.version9"], ["requestedSpace", "long", "vim.version.version9"]])
    create_data_type("vim.fault.InvalidAffinitySettingFault", "InvalidAffinitySettingFault", "vim.fault.VimFault", "vim.version.version2", nil)
    create_data_type("vim.fault.InvalidBmcRole", "InvalidBmcRole", "vim.fault.VimFault", "vim.version.version5", nil)
    create_data_type("vim.fault.InvalidCAMServer", "InvalidCAMServer", "vim.fault.ActiveDirectoryFault", "vim.version.version7", [["camServer", "string", "vim.version.version7"]])
    create_data_type("vim.fault.InvalidDatastore", "InvalidDatastore", "vim.fault.VimFault", "vim.version.version1", [["datastore", "vim.Datastore", "vim.version.version1", {:optional => true}], ["name", "string", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.fault.InvalidDatastorePath", "InvalidDatastorePath", "vim.fault.InvalidDatastore", "vim.version.version1", [["datastorePath", "string", "vim.version.version1"]])
    create_data_type("vim.fault.InvalidEvent", "InvalidEvent", "vim.fault.VimFault", "vim.version.version2", nil)
    create_data_type("vim.fault.InvalidFolder", "InvalidFolder", "vim.fault.VimFault", "vim.version.version1", [["target", "vim.ManagedEntity", "vim.version.version1"]])
    create_data_type("vim.fault.InvalidFormat", "InvalidFormat", "vim.fault.VmConfigFault", "vim.version.version1", nil)
    create_data_type("vim.fault.InvalidGuestLogin", "InvalidGuestLogin", "vim.fault.GuestOperationsFault", "vim.version.version7", nil)
    create_data_type("vim.fault.InvalidHostName", "InvalidHostName", "vim.fault.HostConfigFault", "vim.version.version6", nil)
    create_data_type("vim.fault.InvalidIpfixConfig", "InvalidIpfixConfig", "vim.fault.DvsFault", "vim.version.version8", [["property", "vmodl.PropertyPath", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.fault.InvalidIpmiLoginInfo", "InvalidIpmiLoginInfo", "vim.fault.VimFault", "vim.version.version5", nil)
    create_data_type("vim.fault.InvalidIpmiMacAddress", "InvalidIpmiMacAddress", "vim.fault.VimFault", "vim.version.version5", [["userProvidedMacAddress", "string", "vim.version.version5"], ["observedMacAddress", "string", "vim.version.version5"]])
    create_data_type("vim.fault.InvalidLicense", "InvalidLicense", "vim.fault.VimFault", "vim.version.version1", [["licenseContent", "string", "vim.version.version1"]])
    create_data_type("vim.fault.InvalidLocale", "InvalidLocale", "vim.fault.VimFault", "vim.version.version1", nil)
    create_data_type("vim.fault.InvalidLogin", "InvalidLogin", "vim.fault.VimFault", "vim.version.version1", nil)
    create_data_type("vim.fault.InvalidName", "InvalidName", "vim.fault.VimFault", "vim.version.version1", [["name", "string", "vim.version.version1"], ["entity", "vim.ManagedEntity", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.fault.InvalidOperationOnSecondaryVm", "InvalidOperationOnSecondaryVm", "vim.fault.VmFaultToleranceIssue", "vim.version.version5", [["instanceUuid", "string", "vim.version.version5"]])
    create_data_type("vim.fault.InvalidPrivilege", "InvalidPrivilege", "vim.fault.VimFault", "vim.version.version1", [["privilege", "string", "vim.version.version1"]])
    create_data_type("vim.fault.InvalidResourcePoolStructureFault", "InvalidResourcePoolStructureFault", "vim.fault.InsufficientResourcesFault", "vim.version.version1", nil)
    create_data_type("vim.fault.InvalidSnapshotFormat", "InvalidSnapshotFormat", "vim.fault.InvalidFormat", "vim.version.version1", nil)
    create_data_type("vim.fault.InvalidState", "InvalidState", "vim.fault.VimFault", "vim.version.version1", nil)
    create_data_type("vim.fault.InvalidVmConfig", "InvalidVmConfig", "vim.fault.VmConfigFault", "vim.version.version1", [["property", "vmodl.PropertyPath", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.fault.IpHostnameGeneratorError", "IpHostnameGeneratorError", "vim.fault.CustomizationFault", "vim.version.version1", nil)
    create_data_type("vim.fault.IscsiFault", "IscsiFault", "vim.fault.VimFault", "vim.version.version7", nil)
    create_data_type("vim.fault.IscsiFaultInvalidVnic", "IscsiFaultInvalidVnic", "vim.fault.IscsiFault", "vim.version.version7", [["vnicDevice", "string", "vim.version.version7"]])
    create_data_type("vim.fault.IscsiFaultPnicInUse", "IscsiFaultPnicInUse", "vim.fault.IscsiFault", "vim.version.version7", [["pnicDevice", "string", "vim.version.version7"]])
    create_data_type("vim.fault.IscsiFaultVnicAlreadyBound", "IscsiFaultVnicAlreadyBound", "vim.fault.IscsiFault", "vim.version.version7", [["vnicDevice", "string", "vim.version.version7"]])
    create_data_type("vim.fault.IscsiFaultVnicHasActivePaths", "IscsiFaultVnicHasActivePaths", "vim.fault.IscsiFault", "vim.version.version7", [["vnicDevice", "string", "vim.version.version7"]])
    create_data_type("vim.fault.IscsiFaultVnicHasMultipleUplinks", "IscsiFaultVnicHasMultipleUplinks", "vim.fault.IscsiFault", "vim.version.version7", [["vnicDevice", "string", "vim.version.version7"]])
    create_data_type("vim.fault.IscsiFaultVnicHasNoUplinks", "IscsiFaultVnicHasNoUplinks", "vim.fault.IscsiFault", "vim.version.version7", [["vnicDevice", "string", "vim.version.version7"]])
    create_data_type("vim.fault.IscsiFaultVnicHasWrongUplink", "IscsiFaultVnicHasWrongUplink", "vim.fault.IscsiFault", "vim.version.version7", [["vnicDevice", "string", "vim.version.version7"]])
    create_data_type("vim.fault.IscsiFaultVnicInUse", "IscsiFaultVnicInUse", "vim.fault.IscsiFault", "vim.version.version7", [["vnicDevice", "string", "vim.version.version7"]])
    create_data_type("vim.fault.IscsiFaultVnicIsLastPath", "IscsiFaultVnicIsLastPath", "vim.fault.IscsiFault", "vim.version.version7", [["vnicDevice", "string", "vim.version.version7"]])
    create_data_type("vim.fault.IscsiFaultVnicNotBound", "IscsiFaultVnicNotBound", "vim.fault.IscsiFault", "vim.version.version7", [["vnicDevice", "string", "vim.version.version7"]])
    create_data_type("vim.fault.IscsiFaultVnicNotFound", "IscsiFaultVnicNotFound", "vim.fault.IscsiFault", "vim.version.version7", [["vnicDevice", "string", "vim.version.version7"]])
    create_data_type("vim.fault.LargeRDMNotSupportedOnDatastore", "LargeRDMNotSupportedOnDatastore", "vim.fault.VmConfigFault", "vim.version.version7", [["device", "string", "vim.version.version7"], ["datastore", "vim.Datastore", "vim.version.version7"], ["datastoreName", "string", "vim.version.version7"]])
    create_data_type("vim.fault.LicenseEntityNotFound", "LicenseEntityNotFound", "vim.fault.VimFault", "vim.version.version5", [["entityId", "string", "vim.version.version5"]])
    create_data_type("vim.fault.LicenseServerUnavailable", "LicenseServerUnavailable", "vim.fault.VimFault", "vim.version.version1", [["licenseServer", "string", "vim.version.version1"]])
    create_data_type("vim.fault.LimitExceeded", "LimitExceeded", "vim.fault.VimFault", "vim.version.version5", [["property", "vmodl.PropertyPath", "vim.version.version5", {:optional => true}], ["limit", "int", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.fault.LinuxVolumeNotClean", "LinuxVolumeNotClean", "vim.fault.CustomizationFault", "vim.version.version1", nil)
    create_data_type("vim.fault.LogBundlingFailed", "LogBundlingFailed", "vim.fault.VimFault", "vim.version.version1", nil)
    create_data_type("vim.fault.MemoryHotPlugNotSupported", "MemoryHotPlugNotSupported", "vim.fault.VmConfigFault", "vim.version.version5", nil)
    create_data_type("vim.fault.MigrationFault", "MigrationFault", "vim.fault.VimFault", "vim.version.version1", nil)
    create_data_type("vim.fault.MigrationFeatureNotSupported", "MigrationFeatureNotSupported", "vim.fault.MigrationFault", "vim.version.version2", [["atSourceHost", "boolean", "vim.version.version2"], ["failedHostName", "string", "vim.version.version2"], ["failedHost", "vim.HostSystem", "vim.version.version2"]])
    create_data_type("vim.fault.MigrationNotReady", "MigrationNotReady", "vim.fault.MigrationFault", "vim.version.version5", [["reason", "string", "vim.version.version5"]])
    create_data_type("vim.fault.MismatchedBundle", "MismatchedBundle", "vim.fault.VimFault", "vim.version.version2", [["bundleUuid", "string", "vim.version.version2"], ["hostUuid", "string", "vim.version.version2"], ["bundleBuildNumber", "int", "vim.version.version2"], ["hostBuildNumber", "int", "vim.version.version2"]])
    create_data_type("vim.fault.MismatchedNetworkPolicies", "MismatchedNetworkPolicies", "vim.fault.MigrationFault", "vim.version.version1", [["device", "string", "vim.version.version1"], ["backing", "string", "vim.version.version1"], ["connected", "boolean", "vim.version.version1"]])
    create_data_type("vim.fault.MismatchedVMotionNetworkNames", "MismatchedVMotionNetworkNames", "vim.fault.MigrationFault", "vim.version.version1", [["sourceNetwork", "string", "vim.version.version1"], ["destNetwork", "string", "vim.version.version1"]])
    create_data_type("vim.fault.MissingBmcSupport", "MissingBmcSupport", "vim.fault.VimFault", "vim.version.version5", nil)
    create_data_type("vim.fault.MissingLinuxCustResources", "MissingLinuxCustResources", "vim.fault.CustomizationFault", "vim.version.version1", nil)
    create_data_type("vim.fault.MissingWindowsCustResources", "MissingWindowsCustResources", "vim.fault.CustomizationFault", "vim.version.version1", nil)
    create_data_type("vim.fault.MksConnectionLimitReached", "MksConnectionLimitReached", "vim.fault.InvalidState", "vim.version.version7", [["connectionLimit", "int", "vim.version.version7"]])
    create_data_type("vim.fault.MountError", "MountError", "vim.fault.CustomizationFault", "vim.version.version1", [["vm", "vim.VirtualMachine", "vim.version.version1"], ["diskIndex", "int", "vim.version.version1"]])
    create_data_type("vim.fault.MultipleCertificatesVerifyFault", "MultipleCertificatesVerifyFault", "vim.fault.HostConnectFault", "vim.version.version5", [["thumbprintData", "vim.fault.MultipleCertificatesVerifyFault.ThumbprintData[]", "vim.version.version5"]])
    create_data_type("vim.fault.MultipleCertificatesVerifyFault.ThumbprintData", "MultipleCertificatesVerifyFaultThumbprintData", "vmodl.DynamicData", "vim.version.version5", [["port", "int", "vim.version.version5"], ["thumbprint", "string", "vim.version.version5"]])
    create_data_type("vim.fault.NamespaceFull", "NamespaceFull", "vim.fault.VimFault", "vim.version.version8", [["name", "string", "vim.version.version8"], ["currentMaxSize", "long", "vim.version.version8"], ["requiredSize", "long", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.fault.NamespaceLimitReached", "NamespaceLimitReached", "vim.fault.VimFault", "vim.version.version8", [["limit", "int", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.fault.NamespaceWriteProtected", "NamespaceWriteProtected", "vim.fault.VimFault", "vim.version.version8", [["name", "string", "vim.version.version8"]])
    create_data_type("vim.fault.NasConfigFault", "NasConfigFault", "vim.fault.HostConfigFault", "vim.version.version4", [["name", "string", "vim.version.version4"]])
    create_data_type("vim.fault.NasConnectionLimitReached", "NasConnectionLimitReached", "vim.fault.NasConfigFault", "vim.version.version4", [["remoteHost", "string", "vim.version.version4"], ["remotePath", "string", "vim.version.version4"]])
    create_data_type("vim.fault.NasSessionCredentialConflict", "NasSessionCredentialConflict", "vim.fault.NasConfigFault", "vim.version.version4", [["remoteHost", "string", "vim.version.version4"], ["remotePath", "string", "vim.version.version4"], ["userName", "string", "vim.version.version4"]])
    create_data_type("vim.fault.NasVolumeNotMounted", "NasVolumeNotMounted", "vim.fault.NasConfigFault", "vim.version.version4", [["remoteHost", "string", "vim.version.version4"], ["remotePath", "string", "vim.version.version4"]])
    create_data_type("vim.fault.NetworkCopyFault", "NetworkCopyFault", "vim.fault.FileFault", "vim.version.version1", nil)
    create_data_type("vim.fault.NetworkDisruptedAndConfigRolledBack", "NetworkDisruptedAndConfigRolledBack", "vim.fault.VimFault", "vim.version.version8", [["host", "string", "vim.version.version8"]])
    create_data_type("vim.fault.NetworkInaccessible", "NetworkInaccessible", "vim.fault.NasConfigFault", "vim.version.version4", nil)
    create_data_type("vim.fault.NetworksMayNotBeTheSame", "NetworksMayNotBeTheSame", "vim.fault.MigrationFault", "vim.version.version2", [["name", "string", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.fault.NicSettingMismatch", "NicSettingMismatch", "vim.fault.CustomizationFault", "vim.version.version2", [["numberOfNicsInSpec", "int", "vim.version.version2"], ["numberOfNicsInVM", "int", "vim.version.version2"]])
    create_data_type("vim.fault.NoActiveHostInCluster", "NoActiveHostInCluster", "vim.fault.InvalidState", "vim.version.version1", [["computeResource", "vim.ComputeResource", "vim.version.version1"]])
    create_data_type("vim.fault.NoClientCertificate", "NoClientCertificate", "vim.fault.VimFault", "vim.version.version2", nil)
    create_data_type("vim.fault.NoCompatibleDatastore", "NoCompatibleDatastore", "vim.fault.VimFault", "vim.version.version7", nil)
    create_data_type("vim.fault.NoCompatibleHardAffinityHost", "NoCompatibleHardAffinityHost", "vim.fault.VmConfigFault", "vim.version.version6", [["vmName", "string", "vim.version.version6"]])
    create_data_type("vim.fault.NoCompatibleHost", "NoCompatibleHost", "vim.fault.VimFault", "vim.version.version5", [["host", "vim.HostSystem[]", "vim.version.version5", {:optional => true}], ["error", "vmodl.MethodFault[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.fault.NoCompatibleHostWithAccessToDevice", "NoCompatibleHostWithAccessToDevice", "vim.fault.NoCompatibleHost", "vim.version.version6", nil)
    create_data_type("vim.fault.NoCompatibleSoftAffinityHost", "NoCompatibleSoftAffinityHost", "vim.fault.VmConfigFault", "vim.version.version6", [["vmName", "string", "vim.version.version6"]])
    create_data_type("vim.fault.NoConnectedDatastore", "NoConnectedDatastore", "vim.fault.VimFault", "vim.version.version7", nil)
    create_data_type("vim.fault.NoDiskFound", "NoDiskFound", "vim.fault.VimFault", "vim.version.version1", nil)
    create_data_type("vim.fault.NoDiskSpace", "NoDiskSpace", "vim.fault.FileFault", "vim.version.version1", [["datastore", "string", "vim.version.version1"]])
    create_data_type("vim.fault.NoDisksToCustomize", "NoDisksToCustomize", "vim.fault.CustomizationFault", "vim.version.version1", nil)
    create_data_type("vim.fault.NoGateway", "NoGateway", "vim.fault.HostConfigFault", "vim.version.version1", nil)
    create_data_type("vim.fault.NoGuestHeartbeat", "NoGuestHeartbeat", "vim.fault.MigrationFault", "vim.version.version1", nil)
    create_data_type("vim.fault.NoHost", "NoHost", "vim.fault.HostConnectFault", "vim.version.version1", [["name", "string", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.fault.NoHostSuitableForFtSecondary", "NoHostSuitableForFtSecondary", "vim.fault.VmFaultToleranceIssue", "vim.version.version5", [["vm", "vim.VirtualMachine", "vim.version.version5"], ["vmName", "string", "vim.version.version5"]])
    create_data_type("vim.fault.NoPeerHostFound", "NoPeerHostFound", "vim.fault.HostPowerOpFailed", "vim.version.version2", nil)
    create_data_type("vim.fault.NoPermissionOnAD", "NoPermissionOnAD", "vim.fault.ActiveDirectoryFault", "vim.version.version6", nil)
    create_data_type("vim.fault.NoPermissionOnHost", "NoPermissionOnHost", "vim.fault.HostConnectFault", "vim.version.version1", nil)
    create_data_type("vim.fault.NoPermissionOnNasVolume", "NoPermissionOnNasVolume", "vim.fault.NasConfigFault", "vim.version.version4", [["userName", "string", "vim.version.version4", {:optional => true}]])
    create_data_type("vim.fault.NoSubjectName", "NoSubjectName", "vim.fault.VimFault", "vim.version.version2", nil)
    create_data_type("vim.fault.NoVirtualNic", "NoVirtualNic", "vim.fault.HostConfigFault", "vim.version.version1", nil)
    create_data_type("vim.fault.NonADUserRequired", "NonADUserRequired", "vim.fault.ActiveDirectoryFault", "vim.version.version6", nil)
    create_data_type("vim.fault.NonHomeRDMVMotionNotSupported", "NonHomeRDMVMotionNotSupported", "vim.fault.MigrationFeatureNotSupported", "vim.version.version2", [["device", "string", "vim.version.version2"]])
    create_data_type("vim.fault.NotADirectory", "NotADirectory", "vim.fault.FileFault", "vim.version.version7", nil)
    create_data_type("vim.fault.NotAFile", "NotAFile", "vim.fault.FileFault", "vim.version.version7", nil)
    create_data_type("vim.fault.NotFound", "NotFound", "vim.fault.VimFault", "vim.version.version1", nil)
    create_data_type("vim.fault.NotSupportedDeviceForFT", "NotSupportedDeviceForFT", "vim.fault.VmFaultToleranceIssue", "vim.version.version6", [["host", "vim.HostSystem", "vim.version.version6"], ["hostName", "string", "vim.version.version6", {:optional => true}], ["vm", "vim.VirtualMachine", "vim.version.version6"], ["vmName", "string", "vim.version.version6", {:optional => true}], ["deviceType", "string", "vim.version.version6"], ["deviceLabel", "string", "vim.version.version6", {:optional => true}]])
    create_enum_type("vim.fault.NotSupportedDeviceForFT.DeviceType", "NotSupportedDeviceForFTDeviceType", "vim.version.version6", ["virtualVmxnet3", "paraVirtualSCSIController"])
    create_data_type("vim.fault.NotSupportedHost", "NotSupportedHost", "vim.fault.HostConnectFault", "vim.version.version1", [["productName", "string", "vim.version.version1", {:optional => true}], ["productVersion", "string", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.fault.NotSupportedHostForVFlash", "NotSupportedHostForVFlash", "vim.fault.NotSupportedHost", "vim.version.version9", [["hostName", "string", "vim.version.version9"]])
    create_data_type("vim.fault.NotSupportedHostForVsan", "NotSupportedHostForVsan", "vim.fault.NotSupportedHost", "vim.version.version9", [["hostName", "string", "vim.version.version9"]])
    create_data_type("vim.fault.NotSupportedHostInCluster", "NotSupportedHostInCluster", "vim.fault.NotSupportedHost", "vim.version.version5", nil)
    create_data_type("vim.fault.NotSupportedHostInDvs", "NotSupportedHostInDvs", "vim.fault.NotSupportedHost", "vim.version.version6", [["switchProductSpec", "vim.dvs.ProductSpec", "vim.version.version6"]])
    create_data_type("vim.fault.NotSupportedHostInHACluster", "NotSupportedHostInHACluster", "vim.fault.NotSupportedHost", "vim.version.version7", [["hostName", "string", "vim.version.version7"], ["build", "string", "vim.version.version7"]])
    create_data_type("vim.fault.NumVirtualCpusExceedsLimit", "NumVirtualCpusExceedsLimit", "vim.fault.InsufficientResourcesFault", "vim.version.version6", [["maxSupportedVcpus", "int", "vim.version.version6"]])
    create_data_type("vim.fault.NumVirtualCpusIncompatible", "NumVirtualCpusIncompatible", "vim.fault.VmConfigFault", "vim.version.version5", [["reason", "string", "vim.version.version5"], ["numCpu", "int", "vim.version.version5"]])
    create_enum_type("vim.fault.NumVirtualCpusIncompatible.Reason", "NumVirtualCpusIncompatibleReason", "vim.version.version5", ["recordReplay", "faultTolerance"])
    create_data_type("vim.fault.OperationDisabledByGuest", "OperationDisabledByGuest", "vim.fault.GuestOperationsFault", "vim.version.version7", nil)
    create_data_type("vim.fault.OperationNotSupportedByGuest", "OperationNotSupportedByGuest", "vim.fault.GuestOperationsFault", "vim.version.version7", nil)
    create_data_type("vim.fault.OutOfBounds", "OutOfBounds", "vim.fault.VimFault", "vim.version.version1", [["argumentName", "vmodl.PropertyPath", "vim.version.version1"]])
    create_data_type("vim.fault.OvfConsumerPowerOnFault", "OvfConsumerPowerOnFault", "vim.fault.InvalidState", "vim.version.version7", [["extensionKey", "string", "vim.version.version7"], ["extensionName", "string", "vim.version.version7"], ["description", "string", "vim.version.version7"]])
    create_data_type("vim.fault.OvfConsumerValidationFault", "OvfConsumerValidationFault", "vim.fault.VmConfigFault", "vim.version.version7", [["extensionKey", "string", "vim.version.version7"], ["extensionName", "string", "vim.version.version7"], ["message", "string", "vim.version.version7"]])
    create_data_type("vim.fault.OvfFault", "OvfFault", "vim.fault.VimFault", "vim.version.version5", nil)
    create_data_type("vim.fault.OvfImport", "OvfImport", "vim.fault.OvfFault", "vim.version.version5", nil)
    create_data_type("vim.fault.OvfImportFailed", "OvfImportFailed", "vim.fault.OvfImport", "vim.version.version6", nil)
    create_data_type("vim.fault.OvfInvalidPackage", "OvfInvalidPackage", "vim.fault.OvfFault", "vim.version.version5", [["lineNumber", "int", "vim.version.version5"]])
    create_data_type("vim.fault.OvfMappedOsId", "OvfMappedOsId", "vim.fault.OvfImport", "vim.version.version5", [["ovfId", "int", "vim.version.version5"], ["ovfDescription", "string", "vim.version.version5"], ["targetDescription", "string", "vim.version.version5"]])
    create_data_type("vim.fault.OvfMissingHardware", "OvfMissingHardware", "vim.fault.OvfImport", "vim.version.version5", [["name", "string", "vim.version.version5"], ["resourceType", "int", "vim.version.version5"]])
    create_data_type("vim.fault.OvfNetworkMappingNotSupported", "OvfNetworkMappingNotSupported", "vim.fault.OvfImport", "vim.version.version8", nil)
    create_data_type("vim.fault.OvfProperty", "OvfProperty", "vim.fault.OvfInvalidPackage", "vim.version.version5", [["type", "string", "vim.version.version5"], ["value", "string", "vim.version.version5"]])
    create_data_type("vim.fault.OvfPropertyNetwork", "OvfPropertyNetwork", "vim.fault.OvfProperty", "vim.version.version5", nil)
    create_data_type("vim.fault.OvfPropertyQualifier", "OvfPropertyQualifier", "vim.fault.OvfProperty", "vim.version.version5", [["qualifier", "string", "vim.version.version5"]])
    create_data_type("vim.fault.OvfPropertyQualifierDuplicate", "OvfPropertyQualifierDuplicate", "vim.fault.OvfProperty", "vim.version.version5", [["qualifier", "string", "vim.version.version5"]])
    create_data_type("vim.fault.OvfPropertyQualifierIgnored", "OvfPropertyQualifierIgnored", "vim.fault.OvfProperty", "vim.version.version5", [["qualifier", "string", "vim.version.version5"]])
    create_data_type("vim.fault.OvfPropertyType", "OvfPropertyType", "vim.fault.OvfProperty", "vim.version.version5", nil)
    create_data_type("vim.fault.OvfPropertyValue", "OvfPropertyValue", "vim.fault.OvfProperty", "vim.version.version5", nil)
    create_data_type("vim.fault.OvfSystemFault", "OvfSystemFault", "vim.fault.OvfFault", "vim.version.version5", nil)
    create_data_type("vim.fault.OvfToXmlUnsupportedElement", "OvfToXmlUnsupportedElement", "vim.fault.OvfSystemFault", "vim.version.version5", [["name", "string", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.fault.OvfUnknownDevice", "OvfUnknownDevice", "vim.fault.OvfSystemFault", "vim.version.version5", [["device", "vim.vm.device.VirtualDevice", "vim.version.version5", {:optional => true}], ["vmName", "string", "vim.version.version5"]])
    create_data_type("vim.fault.OvfUnknownEntity", "OvfUnknownEntity", "vim.fault.OvfSystemFault", "vim.version.version5", [["lineNumber", "int", "vim.version.version5"]])
    create_data_type("vim.fault.OvfUnsupportedDeviceBackingInfo", "OvfUnsupportedDeviceBackingInfo", "vim.fault.OvfSystemFault", "vim.version.version5", [["elementName", "string", "vim.version.version5", {:optional => true}], ["instanceId", "string", "vim.version.version5", {:optional => true}], ["deviceName", "string", "vim.version.version5"], ["backingName", "string", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.fault.OvfUnsupportedDeviceBackingOption", "OvfUnsupportedDeviceBackingOption", "vim.fault.OvfSystemFault", "vim.version.version5", [["elementName", "string", "vim.version.version5", {:optional => true}], ["instanceId", "string", "vim.version.version5", {:optional => true}], ["deviceName", "string", "vim.version.version5"], ["backingName", "string", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.fault.OvfUnsupportedDiskProvisioning", "OvfUnsupportedDiskProvisioning", "vim.fault.OvfImport", "vim.version.version6", [["diskProvisioning", "string", "vim.version.version6"], ["supportedDiskProvisioning", "string", "vim.version.version6"]])
    create_data_type("vim.fault.OvfUnsupportedPackage", "OvfUnsupportedPackage", "vim.fault.OvfFault", "vim.version.version5", [["lineNumber", "int", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.fault.OvfUnsupportedSubType", "OvfUnsupportedSubType", "vim.fault.OvfUnsupportedPackage", "vim.version.version5", [["elementName", "string", "vim.version.version5"], ["instanceId", "string", "vim.version.version5"], ["deviceType", "int", "vim.version.version5"], ["deviceSubType", "string", "vim.version.version5"]])
    create_data_type("vim.fault.OvfUnsupportedType", "OvfUnsupportedType", "vim.fault.OvfUnsupportedPackage", "vim.version.version5", [["name", "string", "vim.version.version5"], ["instanceId", "string", "vim.version.version5"], ["deviceType", "int", "vim.version.version5"]])
    create_data_type("vim.fault.OvfWrongNamespace", "OvfWrongNamespace", "vim.fault.OvfInvalidPackage", "vim.version.version5", [["namespaceName", "string", "vim.version.version5"]])
    create_data_type("vim.fault.OvfXmlFormat", "OvfXmlFormat", "vim.fault.OvfInvalidPackage", "vim.version.version5", [["description", "string", "vim.version.version5"]])
    create_data_type("vim.fault.PatchBinariesNotFound", "PatchBinariesNotFound", "vim.fault.VimFault", "vim.version.version1", [["patchID", "string", "vim.version.version1"], ["binary", "string[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.fault.PatchMetadataInvalid", "PatchMetadataInvalid", "vim.fault.VimFault", "vim.version.version1", [["patchID", "string", "vim.version.version1"], ["metaData", "string[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.fault.PatchMetadataNotFound", "PatchMetadataNotFound", "vim.fault.PatchMetadataInvalid", "vim.version.version1", nil)
    create_data_type("vim.fault.PatchNotApplicable", "PatchNotApplicable", "vim.fault.VimFault", "vim.version.version1", [["patchID", "string", "vim.version.version1"]])
    create_data_type("vim.fault.PatchSuperseded", "PatchSuperseded", "vim.fault.PatchNotApplicable", "vim.version.version1", [["supersede", "string[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.fault.PlatformConfigFault", "PlatformConfigFault", "vim.fault.HostConfigFault", "vim.version.version1", [["text", "string", "vim.version.version1"]])
    create_data_type("vim.fault.PowerOnFtSecondaryFailed", "PowerOnFtSecondaryFailed", "vim.fault.VmFaultToleranceIssue", "vim.version.version5", [["vm", "vim.VirtualMachine", "vim.version.version5"], ["vmName", "string", "vim.version.version5"], ["hostSelectionBy", "vim.fault.FtIssuesOnHost.HostSelectionType", "vim.version.version5"], ["hostErrors", "vmodl.MethodFault[]", "vim.version.version5", {:optional => true}], ["rootCause", "vmodl.MethodFault", "vim.version.version5"]])
    create_data_type("vim.fault.ProfileUpdateFailed", "ProfileUpdateFailed", "vim.fault.VimFault", "vim.version.version5", [["failure", "vim.fault.ProfileUpdateFailed.UpdateFailure[]", "vim.version.version5"]])
    create_data_type("vim.fault.ProfileUpdateFailed.UpdateFailure", "ProfileUpdateFailedUpdateFailure", "vmodl.DynamicData", "vim.version.version5", [["profilePath", "vim.profile.ProfilePropertyPath", "vim.version.version5"], ["errMsg", "vmodl.LocalizableMessage", "vim.version.version5"]])
    create_data_type("vim.fault.QuestionPending", "QuestionPending", "vim.fault.InvalidState", "vim.version.version6", [["text", "string", "vim.version.version6"]])
    create_data_type("vim.fault.RDMConversionNotSupported", "RDMConversionNotSupported", "vim.fault.MigrationFault", "vim.version.version5", [["device", "string", "vim.version.version5"]])
    create_data_type("vim.fault.RDMNotPreserved", "RDMNotPreserved", "vim.fault.MigrationFault", "vim.version.version1", [["device", "string", "vim.version.version1"]])
    create_data_type("vim.fault.RDMNotSupportedOnDatastore", "RDMNotSupportedOnDatastore", "vim.fault.VmConfigFault", "vim.version.version2", [["device", "string", "vim.version.version2"], ["datastore", "vim.Datastore", "vim.version.version2"], ["datastoreName", "string", "vim.version.version2"]])
    create_data_type("vim.fault.RDMPointsToInaccessibleDisk", "RDMPointsToInaccessibleDisk", "vim.fault.CannotAccessVmDisk", "vim.version.version1", nil)
    create_data_type("vim.fault.ReadHostResourcePoolTreeFailed", "ReadHostResourcePoolTreeFailed", "vim.fault.HostConnectFault", "vim.version.version7", nil)
    create_data_type("vim.fault.ReadOnlyDisksWithLegacyDestination", "ReadOnlyDisksWithLegacyDestination", "vim.fault.MigrationFault", "vim.version.version1", [["roDiskCount", "int", "vim.version.version1"], ["timeoutDanger", "boolean", "vim.version.version1"]])
    create_data_type("vim.fault.RebootRequired", "RebootRequired", "vim.fault.VimFault", "vim.version.version1", [["patch", "string", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.fault.RecordReplayDisabled", "RecordReplayDisabled", "vim.fault.VimFault", "vim.version.version5", nil)
    create_data_type("vim.fault.RemoveFailed", "RemoveFailed", "vim.fault.VimFault", "vim.version.version1", nil)
    create_data_type("vim.fault.ReplicationFault", "ReplicationFault", "vim.fault.VimFault", "vim.version.version7", nil)
    create_data_type("vim.fault.ReplicationIncompatibleWithFT", "ReplicationIncompatibleWithFT", "vim.fault.ReplicationFault", "vim.version.version7", nil)
    create_data_type("vim.fault.ReplicationInvalidOptions", "ReplicationInvalidOptions", "vim.fault.ReplicationFault", "vim.version.version7", [["options", "string", "vim.version.version7"], ["entity", "vim.ManagedEntity", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.fault.ReplicationNotSupportedOnHost", "ReplicationNotSupportedOnHost", "vim.fault.ReplicationFault", "vim.version.version7", nil)
    create_data_type("vim.fault.ReplicationVmFault", "ReplicationVmFault", "vim.fault.ReplicationFault", "vim.version.version7", [["reason", "string", "vim.version.version7"], ["state", "string", "vim.version.version7", {:optional => true}], ["instanceId", "string", "vim.version.version7", {:optional => true}], ["vm", "vim.VirtualMachine", "vim.version.version7"]])
    create_enum_type("vim.fault.ReplicationVmFault.ReasonForFault", "ReplicationVmFaultReasonForFault", "vim.version.version7", ["notConfigured", "poweredOff", "suspended", "poweredOn", "offlineReplicating", "invalidState", "invalidInstanceId"])
    create_data_type("vim.fault.ResourceInUse", "ResourceInUse", "vim.fault.VimFault", "vim.version.version1", [["type", "vmodl.TypeName", "vim.version.version1", {:optional => true}], ["name", "string", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.fault.ResourceNotAvailable", "ResourceNotAvailable", "vim.fault.VimFault", "vim.version.version5", [["containerType", "vmodl.TypeName", "vim.version.version5", {:optional => true}], ["containerName", "string", "vim.version.version5", {:optional => true}], ["type", "vmodl.TypeName", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.fault.RollbackFailure", "RollbackFailure", "vim.fault.DvsFault", "vim.version.version8", [["entityName", "string", "vim.version.version8"], ["entityType", "string", "vim.version.version8"]])
    create_data_type("vim.fault.RuleViolation", "RuleViolation", "vim.fault.VmConfigFault", "vim.version.version1", [["host", "vim.HostSystem", "vim.version.version2", {:optional => true}], ["rule", "vim.cluster.RuleInfo", "vim.version.version5"]])
    create_data_type("vim.fault.SSLDisabledFault", "SSLDisabledFault", "vim.fault.HostConnectFault", "vim.version.version5", nil)
    create_data_type("vim.fault.SSLVerifyFault", "SSLVerifyFault", "vim.fault.HostConnectFault", "vim.version.version2", [["selfSigned", "boolean", "vim.version.version2"], ["thumbprint", "string", "vim.version.version2"]])
    create_data_type("vim.fault.SSPIChallenge", "SSPIChallenge", "vim.fault.VimFault", "vim.version.version2", [["base64Token", "string", "vim.version.version2"]])
    create_data_type("vim.fault.SecondaryVmAlreadyDisabled", "SecondaryVmAlreadyDisabled", "vim.fault.VmFaultToleranceIssue", "vim.version.version5", [["instanceUuid", "string", "vim.version.version5"]])
    create_data_type("vim.fault.SecondaryVmAlreadyEnabled", "SecondaryVmAlreadyEnabled", "vim.fault.VmFaultToleranceIssue", "vim.version.version5", [["instanceUuid", "string", "vim.version.version5"]])
    create_data_type("vim.fault.SecondaryVmAlreadyRegistered", "SecondaryVmAlreadyRegistered", "vim.fault.VmFaultToleranceIssue", "vim.version.version5", [["instanceUuid", "string", "vim.version.version5"]])
    create_data_type("vim.fault.SecondaryVmNotRegistered", "SecondaryVmNotRegistered", "vim.fault.VmFaultToleranceIssue", "vim.version.version5", [["instanceUuid", "string", "vim.version.version5"]])
    create_data_type("vim.fault.ShrinkDiskFault", "ShrinkDiskFault", "vim.fault.VimFault", "vim.version.version8", [["diskId", "int", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.fault.SnapshotCopyNotSupported", "SnapshotCopyNotSupported", "vim.fault.MigrationFault", "vim.version.version1", nil)
    create_data_type("vim.fault.SnapshotFault", "SnapshotFault", "vim.fault.VimFault", "vim.version.version1", nil)
    create_data_type("vim.fault.SnapshotIncompatibleDeviceInVm", "SnapshotIncompatibleDeviceInVm", "vim.fault.SnapshotFault", "vim.version.version1", [["fault", "vmodl.MethodFault", "vim.version.version1"]])
    create_data_type("vim.fault.SnapshotLocked", "SnapshotLocked", "vim.fault.SnapshotFault", "vim.version.version2", nil)
    create_data_type("vim.fault.SnapshotMoveFromNonHomeNotSupported", "SnapshotMoveFromNonHomeNotSupported", "vim.fault.SnapshotCopyNotSupported", "vim.version.version2", nil)
    create_data_type("vim.fault.SnapshotMoveNotSupported", "SnapshotMoveNotSupported", "vim.fault.SnapshotCopyNotSupported", "vim.version.version2", nil)
    create_data_type("vim.fault.SnapshotMoveToNonHomeNotSupported", "SnapshotMoveToNonHomeNotSupported", "vim.fault.SnapshotCopyNotSupported", "vim.version.version2", nil)
    create_data_type("vim.fault.SnapshotNoChange", "SnapshotNoChange", "vim.fault.SnapshotFault", "vim.version.version2", nil)
    create_data_type("vim.fault.SnapshotRevertIssue", "SnapshotRevertIssue", "vim.fault.MigrationFault", "vim.version.version1", [["snapshotName", "string", "vim.version.version1", {:optional => true}], ["event", "vim.event.Event[]", "vim.version.version1", {:optional => true}], ["errors", "boolean", "vim.version.version1"]])
    create_data_type("vim.fault.SoftRuleVioCorrectionDisallowed", "SoftRuleVioCorrectionDisallowed", "vim.fault.VmConfigFault", "vim.version.version6", [["vmName", "string", "vim.version.version6"]])
    create_data_type("vim.fault.SoftRuleVioCorrectionImpact", "SoftRuleVioCorrectionImpact", "vim.fault.VmConfigFault", "vim.version.version6", [["vmName", "string", "vim.version.version6"]])
    create_data_type("vim.fault.SsdDiskNotAvailable", "SsdDiskNotAvailable", "vim.fault.VimFault", "vim.version.version9", [["devicePath", "string", "vim.version.version9"]])
    create_data_type("vim.fault.StorageDrsCannotMoveDiskInMultiWriterMode", "StorageDrsCannotMoveDiskInMultiWriterMode", "vim.fault.VimFault", "vim.version.version8", nil)
    create_data_type("vim.fault.StorageDrsCannotMoveFTVm", "StorageDrsCannotMoveFTVm", "vim.fault.VimFault", "vim.version.version8", nil)
    create_data_type("vim.fault.StorageDrsCannotMoveIndependentDisk", "StorageDrsCannotMoveIndependentDisk", "vim.fault.VimFault", "vim.version.version8", nil)
    create_data_type("vim.fault.StorageDrsCannotMoveManuallyPlacedSwapFile", "StorageDrsCannotMoveManuallyPlacedSwapFile", "vim.fault.VimFault", "vim.version.version8", nil)
    create_data_type("vim.fault.StorageDrsCannotMoveManuallyPlacedVm", "StorageDrsCannotMoveManuallyPlacedVm", "vim.fault.VimFault", "vim.version.version8", nil)
    create_data_type("vim.fault.StorageDrsCannotMoveSharedDisk", "StorageDrsCannotMoveSharedDisk", "vim.fault.VimFault", "vim.version.version8", nil)
    create_data_type("vim.fault.StorageDrsCannotMoveTemplate", "StorageDrsCannotMoveTemplate", "vim.fault.VimFault", "vim.version.version8", nil)
    create_data_type("vim.fault.StorageDrsCannotMoveVmInUserFolder", "StorageDrsCannotMoveVmInUserFolder", "vim.fault.VimFault", "vim.version.version8", nil)
    create_data_type("vim.fault.StorageDrsCannotMoveVmWithMountedCDROM", "StorageDrsCannotMoveVmWithMountedCDROM", "vim.fault.VimFault", "vim.version.version8", nil)
    create_data_type("vim.fault.StorageDrsCannotMoveVmWithNoFilesInLayout", "StorageDrsCannotMoveVmWithNoFilesInLayout", "vim.fault.VimFault", "vim.version.version8", nil)
    create_data_type("vim.fault.StorageDrsDatacentersCannotShareDatastore", "StorageDrsDatacentersCannotShareDatastore", "vim.fault.VimFault", "vim.version.version9", nil)
    create_data_type("vim.fault.StorageDrsDisabledOnVm", "StorageDrsDisabledOnVm", "vim.fault.VimFault", "vim.version.version7", nil)
    create_data_type("vim.fault.StorageDrsIolbDisabledInternally", "StorageDrsIolbDisabledInternally", "vim.fault.VimFault", "vim.version.version7", nil)
    create_data_type("vim.fault.StorageDrsUnableToMoveFiles", "StorageDrsUnableToMoveFiles", "vim.fault.VimFault", "vim.version.version8", nil)
    create_data_type("vim.fault.StorageVMotionNotSupported", "StorageVMotionNotSupported", "vim.fault.MigrationFeatureNotSupported", "vim.version.version5", nil)
    create_data_type("vim.fault.SuspendedRelocateNotSupported", "SuspendedRelocateNotSupported", "vim.fault.MigrationFault", "vim.version.version1", nil)
    create_data_type("vim.fault.SwapDatastoreUnset", "SwapDatastoreUnset", "vim.fault.VimFault", "vim.version.version2", nil)
    create_data_type("vim.fault.SwapPlacementOverrideNotSupported", "SwapPlacementOverrideNotSupported", "vim.fault.InvalidVmConfig", "vim.version.version2", nil)
    create_data_type("vim.fault.SwitchIpUnset", "SwitchIpUnset", "vim.fault.DvsFault", "vim.version.version8", nil)
    create_data_type("vim.fault.SwitchNotInUpgradeMode", "SwitchNotInUpgradeMode", "vim.fault.DvsFault", "vim.version.version5", nil)
    create_data_type("vim.fault.TaskInProgress", "TaskInProgress", "vim.fault.VimFault", "vim.version.version1", [["task", "vim.Task", "vim.version.version1"]])
    create_data_type("vim.fault.Timedout", "Timedout", "vim.fault.VimFault", "vim.version.version1", nil)
    create_data_type("vim.fault.TooManyConcurrentNativeClones", "TooManyConcurrentNativeClones", "vim.fault.FileFault", "vim.version.version7", nil)
    create_data_type("vim.fault.TooManyConsecutiveOverrides", "TooManyConsecutiveOverrides", "vim.fault.VimFault", "vim.version.version2", nil)
    create_data_type("vim.fault.TooManyDevices", "TooManyDevices", "vim.fault.InvalidVmConfig", "vim.version.version1", nil)
    create_data_type("vim.fault.TooManyDisksOnLegacyHost", "TooManyDisksOnLegacyHost", "vim.fault.MigrationFault", "vim.version.version2", [["diskCount", "int", "vim.version.version2"], ["timeoutDanger", "boolean", "vim.version.version2"]])
    create_data_type("vim.fault.TooManyGuestLogons", "TooManyGuestLogons", "vim.fault.GuestOperationsFault", "vim.version.version7", nil)
    create_data_type("vim.fault.TooManyHosts", "TooManyHosts", "vim.fault.HostConnectFault", "vim.version.version1", nil)
    create_data_type("vim.fault.TooManyNativeCloneLevels", "TooManyNativeCloneLevels", "vim.fault.FileFault", "vim.version.version7", nil)
    create_data_type("vim.fault.TooManyNativeClonesOnFile", "TooManyNativeClonesOnFile", "vim.fault.FileFault", "vim.version.version7", nil)
    create_data_type("vim.fault.TooManySnapshotLevels", "TooManySnapshotLevels", "vim.fault.SnapshotFault", "vim.version.version1", nil)
    create_data_type("vim.fault.ToolsAlreadyUpgraded", "ToolsAlreadyUpgraded", "vim.fault.VmToolsUpgradeFault", "vim.version.version5", nil)
    create_data_type("vim.fault.ToolsAutoUpgradeNotSupported", "ToolsAutoUpgradeNotSupported", "vim.fault.VmToolsUpgradeFault", "vim.version.version5", nil)
    create_data_type("vim.fault.ToolsImageCopyFailed", "ToolsImageCopyFailed", "vim.fault.VmToolsUpgradeFault", "vim.version.version8", nil)
    create_data_type("vim.fault.ToolsImageNotAvailable", "ToolsImageNotAvailable", "vim.fault.VmToolsUpgradeFault", "vim.version.version5", nil)
    create_data_type("vim.fault.ToolsImageSignatureCheckFailed", "ToolsImageSignatureCheckFailed", "vim.fault.VmToolsUpgradeFault", "vim.version.version5", nil)
    create_data_type("vim.fault.ToolsInstallationInProgress", "ToolsInstallationInProgress", "vim.fault.MigrationFault", "vim.version.version5", nil)
    create_data_type("vim.fault.ToolsUnavailable", "ToolsUnavailable", "vim.fault.VimFault", "vim.version.version1", nil)
    create_data_type("vim.fault.ToolsUpgradeCancelled", "ToolsUpgradeCancelled", "vim.fault.VmToolsUpgradeFault", "vim.version.version5", nil)
    create_data_type("vim.fault.UncommittedUndoableDisk", "UncommittedUndoableDisk", "vim.fault.MigrationFault", "vim.version.version1", nil)
    create_data_type("vim.fault.UncustomizableGuest", "UncustomizableGuest", "vim.fault.CustomizationFault", "vim.version.version1", [["uncustomizableGuestOS", "string", "vim.version.version1"]])
    create_data_type("vim.fault.UnexpectedCustomizationFault", "UnexpectedCustomizationFault", "vim.fault.CustomizationFault", "vim.version.version1", nil)
    create_data_type("vim.fault.UnrecognizedHost", "UnrecognizedHost", "vim.fault.VimFault", "vim.version.version2", [["hostName", "string", "vim.version.version2"]])
    create_data_type("vim.fault.UnsharedSwapVMotionNotSupported", "UnsharedSwapVMotionNotSupported", "vim.fault.MigrationFeatureNotSupported", "vim.version.version2", nil)
    create_data_type("vim.fault.UnsupportedDatastore", "UnsupportedDatastore", "vim.fault.VmConfigFault", "vim.version.version1", [["datastore", "vim.Datastore", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.fault.UnsupportedGuest", "UnsupportedGuest", "vim.fault.InvalidVmConfig", "vim.version.version1", [["unsupportedGuestOS", "string", "vim.version.version1"]])
    create_data_type("vim.fault.UnsupportedVimApiVersion", "UnsupportedVimApiVersion", "vim.fault.VimFault", "vim.version.version5", [["version", "string", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.fault.UnsupportedVmxLocation", "UnsupportedVmxLocation", "vim.fault.VmConfigFault", "vim.version.version1", nil)
    create_data_type("vim.fault.UserNotFound", "UserNotFound", "vim.fault.VimFault", "vim.version.version1", [["principal", "string", "vim.version.version1"], ["unresolved", "boolean", "vim.version.version1"]])
    create_data_type("vim.fault.VAppConfigFault", "VAppConfigFault", "vim.fault.VimFault", "vim.version.version5", nil)
    create_data_type("vim.fault.VAppNotRunning", "VAppNotRunning", "vim.fault.VmConfigFault", "vim.version.version5", nil)
    create_data_type("vim.fault.VAppPropertyFault", "VAppPropertyFault", "vim.fault.VmConfigFault", "vim.version.version5", [["id", "string", "vim.version.version5"], ["category", "string", "vim.version.version5"], ["label", "string", "vim.version.version5"], ["type", "string", "vim.version.version5"], ["value", "string", "vim.version.version5"]])
    create_data_type("vim.fault.VAppTaskInProgress", "VAppTaskInProgress", "vim.fault.TaskInProgress", "vim.version.version5", nil)
    create_data_type("vim.fault.VFlashModuleNotSupported", "VFlashModuleNotSupported", "vim.fault.VmConfigFault", "vim.version.version9", [["vmName", "string", "vim.version.version9"], ["moduleName", "string", "vim.version.version9"], ["reason", "string", "vim.version.version9"], ["hostName", "string", "vim.version.version9"]])
    create_enum_type("vim.fault.VFlashModuleNotSupported.Reason", "VFlashModuleNotSupportedReason", "vim.version.version9", ["CacheModeNotSupported", "CacheConsistencyTypeNotSupported", "CacheBlockSizeNotSupported", "CacheReservationNotSupported", "DiskSizeNotSupported"])
    create_data_type("vim.fault.VFlashModuleVersionIncompatible", "VFlashModuleVersionIncompatible", "vim.fault.VimFault", "vim.version.version9", [["moduleName", "string", "vim.version.version9"], ["vmRequestModuleVersion", "string", "vim.version.version9"], ["hostMinSupportedVerson", "string", "vim.version.version9"], ["hostModuleVersion", "string", "vim.version.version9"]])
    create_data_type("vim.fault.VMotionAcrossNetworkNotSupported", "VMotionAcrossNetworkNotSupported", "vim.fault.MigrationFeatureNotSupported", "vim.version.version9", nil)
    create_data_type("vim.fault.VMotionInterfaceIssue", "VMotionInterfaceIssue", "vim.fault.MigrationFault", "vim.version.version1", [["atSourceHost", "boolean", "vim.version.version1"], ["failedHost", "string", "vim.version.version1"], ["failedHostEntity", "vim.HostSystem", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.fault.VMotionLinkCapacityLow", "VMotionLinkCapacityLow", "vim.fault.VMotionInterfaceIssue", "vim.version.version1", [["network", "string", "vim.version.version1"]])
    create_data_type("vim.fault.VMotionLinkDown", "VMotionLinkDown", "vim.fault.VMotionInterfaceIssue", "vim.version.version1", [["network", "string", "vim.version.version1"]])
    create_data_type("vim.fault.VMotionNotConfigured", "VMotionNotConfigured", "vim.fault.VMotionInterfaceIssue", "vim.version.version1", nil)
    create_data_type("vim.fault.VMotionNotLicensed", "VMotionNotLicensed", "vim.fault.VMotionInterfaceIssue", "vim.version.version1", nil)
    create_data_type("vim.fault.VMotionNotSupported", "VMotionNotSupported", "vim.fault.VMotionInterfaceIssue", "vim.version.version1", nil)
    create_data_type("vim.fault.VMotionProtocolIncompatible", "VMotionProtocolIncompatible", "vim.fault.MigrationFault", "vim.version.version1", nil)
    create_data_type("vim.fault.VirtualHardwareCompatibilityIssue", "VirtualHardwareCompatibilityIssue", "vim.fault.VmConfigFault", "vim.version.version1", nil)
    create_data_type("vim.fault.VirtualHardwareVersionNotSupported", "VirtualHardwareVersionNotSupported", "vim.fault.VirtualHardwareCompatibilityIssue", "vim.version.version1", [["hostName", "string", "vim.version.version2"], ["host", "vim.HostSystem", "vim.version.version2"]])
    create_data_type("vim.fault.VmAlreadyExistsInDatacenter", "VmAlreadyExistsInDatacenter", "vim.fault.InvalidFolder", "vim.version.version5", [["host", "vim.HostSystem", "vim.version.version5"], ["hostname", "string", "vim.version.version5"], ["vm", "vim.VirtualMachine[]", "vim.version.version5"]])
    create_data_type("vim.fault.VmFaultToleranceConfigIssue", "VmFaultToleranceConfigIssue", "vim.fault.VmFaultToleranceIssue", "vim.version.version5", [["reason", "string", "vim.version.version5", {:optional => true}], ["entityName", "string", "vim.version.version5", {:optional => true}], ["entity", "vim.ManagedEntity", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.fault.VmFaultToleranceConfigIssue.ReasonForIssue", "VmFaultToleranceConfigIssueReasonForIssue", "vim.version.version5", ["haNotEnabled", "moreThanOneSecondary", "recordReplayNotSupported", "replayNotSupported", "templateVm", "multipleVCPU", "hostInactive", "ftUnsupportedHardware", "ftUnsupportedProduct", "missingVMotionNic", "missingFTLoggingNic", "thinDisk", "verifySSLCertificateFlagNotSet", "hasSnapshots", "noConfig", "ftSecondaryVm", "hasLocalDisk", "esxAgentVm", "video3dEnabled", "hasUnsupportedDisk", "insufficientBandwidth", "hasNestedHVConfiguration", "hasVFlashConfiguration", "unsupportedProduct", "cpuHvUnsupported", "cpuHwmmuUnsupported", "cpuHvDisabled"])
    create_data_type("vim.fault.VmFaultToleranceConfigIssueWrapper", "VmFaultToleranceConfigIssueWrapper", "vim.fault.VmFaultToleranceIssue", "vim.version.version6", [["entityName", "string", "vim.version.version6", {:optional => true}], ["entity", "vim.ManagedEntity", "vim.version.version6", {:optional => true}], ["error", "vmodl.MethodFault", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.fault.VmFaultToleranceInvalidFileBacking", "VmFaultToleranceInvalidFileBacking", "vim.fault.VmFaultToleranceIssue", "vim.version.version5", [["backingType", "string", "vim.version.version5", {:optional => true}], ["backingFilename", "string", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.fault.VmFaultToleranceInvalidFileBacking.DeviceType", "VmFaultToleranceInvalidFileBackingDeviceType", "vim.version.version5", ["virtualFloppy", "virtualCdrom", "virtualSerialPort", "virtualParallelPort", "virtualDisk"])
    create_data_type("vim.fault.VmFaultToleranceTooManyVMsOnHost", "VmFaultToleranceTooManyVMsOnHost", "vim.fault.InsufficientResourcesFault", "vim.version.version6", [["hostName", "string", "vim.version.version6", {:optional => true}], ["maxNumFtVms", "int", "vim.version.version6"]])
    create_data_type("vim.fault.VmPowerOnDisabled", "VmPowerOnDisabled", "vim.fault.InvalidState", "vim.version.version5", nil)
    create_data_type("vim.fault.VmWwnConflict", "VmWwnConflict", "vim.fault.InvalidVmConfig", "vim.version.version2", [["vm", "vim.VirtualMachine", "vim.version.version2", {:optional => true}], ["host", "vim.HostSystem", "vim.version.version2", {:optional => true}], ["name", "string", "vim.version.version2", {:optional => true}], ["wwn", "long", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.fault.VmfsMountFault", "VmfsMountFault", "vim.fault.HostConfigFault", "vim.version.version5", [["uuid", "string", "vim.version.version5"]])
    create_data_type("vim.fault.VmotionInterfaceNotEnabled", "VmotionInterfaceNotEnabled", "vim.fault.HostPowerOpFailed", "vim.version.version2", nil)
    create_data_type("vim.fault.VolumeEditorError", "VolumeEditorError", "vim.fault.CustomizationFault", "vim.version.version1", nil)
    create_data_type("vim.fault.VsanClusterUuidMismatch", "VsanClusterUuidMismatch", "vim.fault.CannotMoveVsanEnabledHost", "vim.version.version9", [["hostClusterUuid", "string", "vim.version.version9"], ["destinationClusterUuid", "string", "vim.version.version9"]])
    create_data_type("vim.fault.VsanDiskFault", "VsanDiskFault", "vim.fault.VsanFault", "vim.version.version9", [["device", "string", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.fault.VspanDestPortConflict", "VspanDestPortConflict", "vim.fault.DvsFault", "vim.version.version7", [["vspanSessionKey1", "string", "vim.version.version7"], ["vspanSessionKey2", "string", "vim.version.version7"], ["portKey", "string", "vim.version.version7"]])
    create_data_type("vim.fault.VspanPortConflict", "VspanPortConflict", "vim.fault.DvsFault", "vim.version.version7", [["vspanSessionKey1", "string", "vim.version.version7"], ["vspanSessionKey2", "string", "vim.version.version7"], ["portKey", "string", "vim.version.version7"]])
    create_data_type("vim.fault.VspanPortMoveFault", "VspanPortMoveFault", "vim.fault.DvsFault", "vim.version.version7", [["srcPortgroupName", "string", "vim.version.version7"], ["destPortgroupName", "string", "vim.version.version7"], ["portKey", "string", "vim.version.version7"]])
    create_data_type("vim.fault.VspanPortPromiscChangeFault", "VspanPortPromiscChangeFault", "vim.fault.DvsFault", "vim.version.version7", [["portKey", "string", "vim.version.version7"]])
    create_data_type("vim.fault.VspanPortgroupPromiscChangeFault", "VspanPortgroupPromiscChangeFault", "vim.fault.DvsFault", "vim.version.version7", [["portgroupName", "string", "vim.version.version7"]])
    create_data_type("vim.fault.VspanPortgroupTypeChangeFault", "VspanPortgroupTypeChangeFault", "vim.fault.DvsFault", "vim.version.version7", [["portgroupName", "string", "vim.version.version7"]])
    create_data_type("vim.fault.VspanPromiscuousPortNotSupported", "VspanPromiscuousPortNotSupported", "vim.fault.DvsFault", "vim.version.version7", [["vspanSessionKey", "string", "vim.version.version7"], ["portKey", "string", "vim.version.version7"]])
    create_data_type("vim.fault.VspanSameSessionPortConflict", "VspanSameSessionPortConflict", "vim.fault.DvsFault", "vim.version.version7", [["vspanSessionKey", "string", "vim.version.version7"], ["portKey", "string", "vim.version.version7"]])
    create_data_type("vim.fault.WakeOnLanNotSupported", "WakeOnLanNotSupported", "vim.fault.VirtualHardwareCompatibilityIssue", "vim.version.version2", nil)
    create_data_type("vim.fault.WakeOnLanNotSupportedByVmotionNIC", "WakeOnLanNotSupportedByVmotionNIC", "vim.fault.HostPowerOpFailed", "vim.version.version2", nil)
    create_data_type("vim.fault.WillLoseHAProtection", "WillLoseHAProtection", "vim.fault.MigrationFault", "vim.version.version7", [["resolution", "string", "vim.version.version7"]])
    create_enum_type("vim.fault.WillLoseHAProtection.Resolution", "WillLoseHAProtectionResolution", "vim.version.version7", ["svmotion", "relocate"])
    create_data_type("vim.fault.WillModifyConfigCpuRequirements", "WillModifyConfigCpuRequirements", "vim.fault.MigrationFault", "vim.version.version1", nil)
    create_data_type("vim.fault.WillResetSnapshotDirectory", "WillResetSnapshotDirectory", "vim.fault.MigrationFault", "vim.version.version7", nil)
    create_managed_type("vim.host.ActiveDirectoryAuthentication", "HostActiveDirectoryAuthentication", "vim.host.DirectoryStore", "vim.version.version6", nil, [["joinDomain", "JoinDomain_Task", "vim.version.version6", [["domainName", "string", "vim.version.version6", {}, nil], ["userName", "string", "vim.version.version6", {}, nil], ["password", "string", "vim.version.version6", {}, nil]], [{}, "vim.Task", "void"], "Host.Config.AuthenticationStore", ["vim.fault.InvalidState", "vim.fault.HostConfigFault", "vim.fault.InvalidLogin", "vim.fault.ActiveDirectoryFault", "vim.fault.TaskInProgress"]], ["joinDomainWithCAM", "JoinDomainWithCAM_Task", "vim.version.version7", [["domainName", "string", "vim.version.version7", {}, nil], ["camServer", "string", "vim.version.version7", {}, nil]], [{}, "vim.Task", "void"], "Host.Config.AuthenticationStore", ["vim.fault.InvalidState", "vim.fault.HostConfigFault", "vim.fault.ActiveDirectoryFault", "vim.fault.TaskInProgress"]], ["importCertificateForCAM", "ImportCertificateForCAM_Task", "vim.version.version7", [["certPath", "string", "vim.version.version7", {}, nil], ["camServer", "string", "vim.version.version7", {}, nil]], [{}, "vim.Task", "void"], "Host.Config.AuthenticationStore", ["vim.fault.FileNotFound", "vim.fault.ActiveDirectoryFault"]], ["leaveCurrentDomain", "LeaveCurrentDomain_Task", "vim.version.version6", [["force", "boolean", "vim.version.version6", {}, nil]], [{}, "vim.Task", "void"], "Host.Config.AuthenticationStore", ["vim.fault.InvalidState", "vim.fault.AuthMinimumAdminPermission", "vim.fault.ActiveDirectoryFault", "vim.fault.TaskInProgress"]]])
    create_data_type("vim.host.ActiveDirectoryInfo", "HostActiveDirectoryInfo", "vim.host.DirectoryStoreInfo", "vim.version.version6", [["joinedDomain", "string", "vim.version.version6", {:optional => true}], ["trustedDomain", "string[]", "vim.version.version6", {:optional => true}], ["domainMembershipStatus", "string", "vim.version.version6", {:optional => true}]])
    create_enum_type("vim.host.ActiveDirectoryInfo.DomainMembershipStatus", "HostActiveDirectoryInfoDomainMembershipStatus", "vim.version.version6", ["unknown", "ok", "noServers", "clientTrustBroken", "serverTrustBroken", "inconsistentTrust", "otherProblem"])
    create_data_type("vim.host.BootDeviceInfo", "HostBootDeviceInfo", "vmodl.DynamicData", "vim.version.version2", [["bootDevices", "vim.host.BootDeviceSystem.BootDevice[]", "vim.version.version2", {:optional => true}], ["currentBootDeviceKey", "string", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.host.ConfigSpec", "HostConfigSpec", "vmodl.DynamicData", "vim.version.version5", [["nasDatastore", "vim.host.NasVolume.Config[]", "vim.version.version5", {:optional => true}], ["network", "vim.host.NetworkConfig", "vim.version.version5", {:optional => true}], ["nicTypeSelection", "vim.host.VirtualNicManager.NicTypeSelection[]", "vim.version.version5", {:optional => true}], ["service", "vim.host.ServiceConfig[]", "vim.version.version5", {:optional => true}], ["firewall", "vim.host.FirewallConfig", "vim.version.version5", {:optional => true}], ["option", "vim.option.OptionValue[]", "vim.version.version5", {:optional => true}], ["datastorePrincipal", "string", "vim.version.version5", {:optional => true}], ["datastorePrincipalPasswd", "string", "vim.version.version5", {:optional => true}], ["datetime", "vim.host.DateTimeConfig", "vim.version.version5", {:optional => true}], ["storageDevice", "vim.host.StorageDeviceInfo", "vim.version.version5", {:optional => true}], ["license", "vim.host.LicenseSpec", "vim.version.version5", {:optional => true}], ["security", "vim.host.SecuritySpec", "vim.version.version5", {:optional => true}], ["userAccount", "vim.host.LocalAccountManager.AccountSpecification[]", "vim.version.version5", {:optional => true}], ["usergroupAccount", "vim.host.LocalAccountManager.AccountSpecification[]", "vim.version.version5", {:optional => true}], ["memory", "vim.host.MemorySpec", "vim.version.version5", {:optional => true}], ["activeDirectory", "vim.host.ActiveDirectorySpec[]", "vim.version.version6", {:optional => true}], ["genericConfig", "vmodl.KeyAnyValue[]", "vim.version.version7", {:optional => true}]])
    create_managed_type("vim.host.DatastoreSystem", "HostDatastoreSystem", "vmodl.ManagedObject", "vim.version.version1", [["datastore", "vim.Datastore[]", "vim.version.version1", {:optional => true}, "System.View"], ["capabilities", "vim.host.DatastoreSystem.Capabilities", "vim.version.version2", {}, nil]], [["updateLocalSwapDatastore", "UpdateLocalSwapDatastore", "vim.version.version2", [["datastore", "vim.Datastore", "vim.version.version2", {:optional => true}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.InaccessibleDatastore", "vim.fault.DatastoreNotWritableOnHost"]], ["queryAvailableDisksForVmfs", "QueryAvailableDisksForVmfs", "vim.version.version1", [["datastore", "vim.Datastore", "vim.version.version1", {:optional => true}, nil]], [{:optional => true}, "vim.host.ScsiDisk[]", "vim.host.ScsiDisk[]"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["queryVmfsDatastoreCreateOptions", "QueryVmfsDatastoreCreateOptions", "vim.version.version1", [["devicePath", "string", "vim.version.version1", {}, nil], ["vmfsMajorVersion", "int", "vim.version.version7", {:optional => true}, nil]], [{:optional => true}, "vim.host.VmfsDatastoreOption[]", "vim.host.VmfsDatastoreOption[]"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["createVmfsDatastore", "CreateVmfsDatastore", "vim.version.version1", [["spec", "vim.host.VmfsDatastoreCreateSpec", "vim.version.version1", {}, nil]], [{}, "vim.Datastore", "vim.Datastore"], "Host.Config.Storage", ["vim.fault.DuplicateName", "vim.fault.HostConfigFault"]], ["queryVmfsDatastoreExtendOptions", "QueryVmfsDatastoreExtendOptions", "vim.version.version1", [["datastore", "vim.Datastore", "vim.version.version1", {}, nil], ["devicePath", "string", "vim.version.version1", {}, nil], ["suppressExpandCandidates", "boolean", "vim.version.version5", {:optional => true}, nil]], [{:optional => true}, "vim.host.VmfsDatastoreOption[]", "vim.host.VmfsDatastoreOption[]"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["queryVmfsDatastoreExpandOptions", "QueryVmfsDatastoreExpandOptions", "vim.version.version5", [["datastore", "vim.Datastore", "vim.version.version5", {}, nil]], [{:optional => true}, "vim.host.VmfsDatastoreOption[]", "vim.host.VmfsDatastoreOption[]"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["extendVmfsDatastore", "ExtendVmfsDatastore", "vim.version.version1", [["datastore", "vim.Datastore", "vim.version.version1", {}, nil], ["spec", "vim.host.VmfsDatastoreExtendSpec", "vim.version.version1", {}, nil]], [{}, "vim.Datastore", "vim.Datastore"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["expandVmfsDatastore", "ExpandVmfsDatastore", "vim.version.version5", [["datastore", "vim.Datastore", "vim.version.version5", {}, nil], ["spec", "vim.host.VmfsDatastoreExpandSpec", "vim.version.version5", {}, nil]], [{}, "vim.Datastore", "vim.Datastore"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["createNasDatastore", "CreateNasDatastore", "vim.version.version1", [["spec", "vim.host.NasVolume.Specification", "vim.version.version1", {}, nil]], [{}, "vim.Datastore", "vim.Datastore"], "Host.Config.Storage", ["vim.fault.DuplicateName", "vim.fault.AlreadyExists", "vim.fault.HostConfigFault"]], ["createLocalDatastore", "CreateLocalDatastore", "vim.version.version1", [["name", "string", "vim.version.version1", {}, nil], ["path", "string", "vim.version.version1", {}, nil]], [{}, "vim.Datastore", "vim.Datastore"], "Host.Config.Storage", ["vim.fault.DuplicateName", "vim.fault.HostConfigFault", "vim.fault.FileNotFound", "vim.fault.InvalidName"]], ["removeDatastore", "RemoveDatastore", "vim.version.version1", [["datastore", "vim.Datastore", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault", "vim.fault.ResourceInUse"]], ["configureDatastorePrincipal", "ConfigureDatastorePrincipal", "vim.version.version1", [["userName", "string", "vim.version.version1", {}, nil], ["password", "string", "vim.version.version1", {:optional => true}, nil]], [{}, "void", "void"], "Host.Config.Maintenance", ["vim.fault.InvalidState", "vim.fault.HostConfigFault"]], ["queryUnresolvedVmfsVolumes", "QueryUnresolvedVmfsVolumes", "vim.version.version5", [], [{:optional => true}, "vim.host.UnresolvedVmfsVolume[]", "vim.host.UnresolvedVmfsVolume[]"], "System.Read", nil], ["resignatureUnresolvedVmfsVolume", "ResignatureUnresolvedVmfsVolume_Task", "vim.version.version5", [["resolutionSpec", "vim.host.UnresolvedVmfsResignatureSpec", "vim.version.version5", {}, nil]], [{:optional => true}, "vim.Task", "vim.host.ResignatureRescanResult"], "Host.Config.Storage", ["vim.fault.VmfsAmbiguousMount", "vim.fault.HostConfigFault"]]])
    create_data_type("vim.host.DatastoreSystem.Capabilities", "HostDatastoreSystemCapabilities", "vmodl.DynamicData", "vim.version.version2", [["nfsMountCreationRequired", "boolean", "vim.version.version2"], ["nfsMountCreationSupported", "boolean", "vim.version.version2"], ["localDatastoreSupported", "boolean", "vim.version.version2"], ["vmfsExtentExpansionSupported", "boolean", "vim.version.version5"]])
    create_data_type("vim.host.VmfsDatastoreOption", "VmfsDatastoreOption", "vmodl.DynamicData", "vim.version.version1", [["info", "vim.host.VmfsDatastoreOption.Info", "vim.version.version1"], ["spec", "vim.host.VmfsDatastoreSpec", "vim.version.version1"]])
    create_data_type("vim.host.VmfsDatastoreOption.Info", "VmfsDatastoreBaseOption", "vmodl.DynamicData", "vim.version.version1", [["layout", "vim.host.DiskPartitionInfo.Layout", "vim.version.version1"], ["partitionFormatChange", "boolean", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.host.VmfsDatastoreOption.SingleExtentInfo", "VmfsDatastoreSingleExtentOption", "vim.host.VmfsDatastoreOption.Info", "vim.version.version1", [["vmfsExtent", "vim.host.DiskPartitionInfo.BlockRange", "vim.version.version1"]])
    create_data_type("vim.host.VmfsDatastoreOption.AllExtentInfo", "VmfsDatastoreAllExtentOption", "vim.host.VmfsDatastoreOption.SingleExtentInfo", "vim.version.version1", nil)
    create_data_type("vim.host.VmfsDatastoreOption.MultipleExtentInfo", "VmfsDatastoreMultipleExtentOption", "vim.host.VmfsDatastoreOption.Info", "vim.version.version1", [["vmfsExtent", "vim.host.DiskPartitionInfo.BlockRange[]", "vim.version.version1"]])
    create_data_type("vim.host.DateTimeInfo", "HostDateTimeInfo", "vmodl.DynamicData", "vim.version.version2", [["timeZone", "vim.host.DateTimeSystem.TimeZone", "vim.version.version2"], ["ntpConfig", "vim.host.NtpConfig", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.host.FirewallConfig", "HostFirewallConfig", "vmodl.DynamicData", "vim.version.version5", [["rule", "vim.host.FirewallConfig.RuleSetConfig[]", "vim.version.version5", {:optional => true}], ["defaultBlockingPolicy", "vim.host.FirewallInfo.DefaultPolicy", "vim.version.version5"]])
    create_data_type("vim.host.FirewallConfig.RuleSetConfig", "HostFirewallConfigRuleSetConfig", "vmodl.DynamicData", "vim.version.version5", [["rulesetId", "string", "vim.version.version5"], ["enabled", "boolean", "vim.version.version5"], ["allowedHosts", "vim.host.Ruleset.IpList", "vim.version.version7", {:optional => true}]])
    create_managed_type("vim.host.FirewallSystem", "HostFirewallSystem", "vim.ExtensibleManagedObject", "vim.version.version1", [["firewallInfo", "vim.host.FirewallInfo", "vim.version.version1", {:optional => true}, nil]], [["updateDefaultPolicy", "UpdateDefaultPolicy", "vim.version.version1", [["defaultPolicy", "vim.host.FirewallInfo.DefaultPolicy", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.NetService", nil], ["enableRuleset", "EnableRuleset", "vim.version.version1", [["id", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.NetService", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["disableRuleset", "DisableRuleset", "vim.version.version1", [["id", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.NetService", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["updateRuleset", "UpdateRuleset", "vim.version.version7", [["id", "string", "vim.version.version7", {}, nil], ["spec", "vim.host.Ruleset.RulesetSpec", "vim.version.version7", {}, nil]], [{}, "void", "void"], "Host.Config.NetService", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["refresh", "RefreshFirewall", "vim.version.version1", [], [{}, "void", "void"], "Host.Config.NetService", nil]])
    create_data_type("vim.host.InternetScsiHba", "HostInternetScsiHba", "vim.host.HostBusAdapter", "vim.version.version1", [["isSoftwareBased", "boolean", "vim.version.version1"], ["canBeDisabled", "boolean", "vim.version.version7", {:optional => true}], ["networkBindingSupport", "vim.host.InternetScsiHba.NetworkBindingSupportType", "vim.version.version7", {:optional => true}], ["discoveryCapabilities", "vim.host.InternetScsiHba.DiscoveryCapabilities", "vim.version.version1"], ["discoveryProperties", "vim.host.InternetScsiHba.DiscoveryProperties", "vim.version.version1"], ["authenticationCapabilities", "vim.host.InternetScsiHba.AuthenticationCapabilities", "vim.version.version1"], ["authenticationProperties", "vim.host.InternetScsiHba.AuthenticationProperties", "vim.version.version1"], ["digestCapabilities", "vim.host.InternetScsiHba.DigestCapabilities", "vim.version.version5", {:optional => true}], ["digestProperties", "vim.host.InternetScsiHba.DigestProperties", "vim.version.version5", {:optional => true}], ["ipCapabilities", "vim.host.InternetScsiHba.IPCapabilities", "vim.version.version1"], ["ipProperties", "vim.host.InternetScsiHba.IPProperties", "vim.version.version1"], ["supportedAdvancedOptions", "vim.option.OptionDef[]", "vim.version.version5", {:optional => true}], ["advancedOptions", "vim.host.InternetScsiHba.ParamValue[]", "vim.version.version5", {:optional => true}], ["iScsiName", "string", "vim.version.version1"], ["iScsiAlias", "string", "vim.version.version1", {:optional => true}], ["configuredSendTarget", "vim.host.InternetScsiHba.SendTarget[]", "vim.version.version1", {:optional => true}], ["configuredStaticTarget", "vim.host.InternetScsiHba.StaticTarget[]", "vim.version.version1", {:optional => true}], ["maxSpeedMb", "int", "vim.version.version1", {:optional => true}], ["currentSpeedMb", "int", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.InternetScsiHba.ParamValue", "HostInternetScsiHbaParamValue", "vim.option.OptionValue", "vim.version.version5", [["isInherited", "boolean", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.InternetScsiHba.DiscoveryCapabilities", "HostInternetScsiHbaDiscoveryCapabilities", "vmodl.DynamicData", "vim.version.version1", [["iSnsDiscoverySettable", "boolean", "vim.version.version1"], ["slpDiscoverySettable", "boolean", "vim.version.version1"], ["staticTargetDiscoverySettable", "boolean", "vim.version.version1"], ["sendTargetsDiscoverySettable", "boolean", "vim.version.version1"]])
    create_data_type("vim.host.InternetScsiHba.DiscoveryProperties", "HostInternetScsiHbaDiscoveryProperties", "vmodl.DynamicData", "vim.version.version1", [["iSnsDiscoveryEnabled", "boolean", "vim.version.version1"], ["iSnsDiscoveryMethod", "string", "vim.version.version1", {:optional => true}], ["iSnsHost", "string", "vim.version.version1", {:optional => true}], ["slpDiscoveryEnabled", "boolean", "vim.version.version1"], ["slpDiscoveryMethod", "string", "vim.version.version1", {:optional => true}], ["slpHost", "string", "vim.version.version1", {:optional => true}], ["staticTargetDiscoveryEnabled", "boolean", "vim.version.version1"], ["sendTargetsDiscoveryEnabled", "boolean", "vim.version.version1"]])
    create_enum_type("vim.host.InternetScsiHba.DiscoveryProperties.ISnsDiscoveryMethod", "InternetScsiSnsDiscoveryMethod", "vim.version.version1", ["isnsStatic", "isnsDhcp", "isnsSlp"])
    create_enum_type("vim.host.InternetScsiHba.DiscoveryProperties.SlpDiscoveryMethod", "SlpDiscoveryMethod", "vim.version.version1", ["slpDhcp", "slpAutoUnicast", "slpAutoMulticast", "slpManual"])
    create_enum_type("vim.host.InternetScsiHba.ChapAuthenticationType", "HostInternetScsiHbaChapAuthenticationType", "vim.version.version5", ["chapProhibited", "chapDiscouraged", "chapPreferred", "chapRequired"])
    create_data_type("vim.host.InternetScsiHba.AuthenticationCapabilities", "HostInternetScsiHbaAuthenticationCapabilities", "vmodl.DynamicData", "vim.version.version1", [["chapAuthSettable", "boolean", "vim.version.version1"], ["krb5AuthSettable", "boolean", "vim.version.version1"], ["srpAuthSettable", "boolean", "vim.version.version1"], ["spkmAuthSettable", "boolean", "vim.version.version1"], ["mutualChapSettable", "boolean", "vim.version.version5", {:optional => true}], ["targetChapSettable", "boolean", "vim.version.version5", {:optional => true}], ["targetMutualChapSettable", "boolean", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.InternetScsiHba.AuthenticationProperties", "HostInternetScsiHbaAuthenticationProperties", "vmodl.DynamicData", "vim.version.version1", [["chapAuthEnabled", "boolean", "vim.version.version1"], ["chapName", "string", "vim.version.version1", {:optional => true}], ["chapSecret", "string", "vim.version.version1", {:optional => true}], ["chapAuthenticationType", "string", "vim.version.version5", {:optional => true}], ["chapInherited", "boolean", "vim.version.version5", {:optional => true}], ["mutualChapName", "string", "vim.version.version5", {:optional => true}], ["mutualChapSecret", "string", "vim.version.version5", {:optional => true}], ["mutualChapAuthenticationType", "string", "vim.version.version5", {:optional => true}], ["mutualChapInherited", "boolean", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.host.InternetScsiHba.DigestType", "HostInternetScsiHbaDigestType", "vim.version.version5", ["digestProhibited", "digestDiscouraged", "digestPreferred", "digestRequired"])
    create_data_type("vim.host.InternetScsiHba.DigestCapabilities", "HostInternetScsiHbaDigestCapabilities", "vmodl.DynamicData", "vim.version.version5", [["headerDigestSettable", "boolean", "vim.version.version5", {:optional => true}], ["dataDigestSettable", "boolean", "vim.version.version5", {:optional => true}], ["targetHeaderDigestSettable", "boolean", "vim.version.version5", {:optional => true}], ["targetDataDigestSettable", "boolean", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.InternetScsiHba.DigestProperties", "HostInternetScsiHbaDigestProperties", "vmodl.DynamicData", "vim.version.version5", [["headerDigestType", "string", "vim.version.version5", {:optional => true}], ["headerDigestInherited", "boolean", "vim.version.version5", {:optional => true}], ["dataDigestType", "string", "vim.version.version5", {:optional => true}], ["dataDigestInherited", "boolean", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.InternetScsiHba.IPCapabilities", "HostInternetScsiHbaIPCapabilities", "vmodl.DynamicData", "vim.version.version1", [["addressSettable", "boolean", "vim.version.version1"], ["ipConfigurationMethodSettable", "boolean", "vim.version.version1"], ["subnetMaskSettable", "boolean", "vim.version.version1"], ["defaultGatewaySettable", "boolean", "vim.version.version1"], ["primaryDnsServerAddressSettable", "boolean", "vim.version.version1"], ["alternateDnsServerAddressSettable", "boolean", "vim.version.version1"], ["ipv6Supported", "boolean", "vim.version.version5", {:optional => true}], ["arpRedirectSettable", "boolean", "vim.version.version5", {:optional => true}], ["mtuSettable", "boolean", "vim.version.version5", {:optional => true}], ["hostNameAsTargetAddress", "boolean", "vim.version.version5", {:optional => true}], ["nameAliasSettable", "boolean", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.host.InternetScsiHba.IPProperties", "HostInternetScsiHbaIPProperties", "vmodl.DynamicData", "vim.version.version1", [["mac", "string", "vim.version.version1", {:optional => true}], ["address", "string", "vim.version.version1", {:optional => true}], ["dhcpConfigurationEnabled", "boolean", "vim.version.version1"], ["subnetMask", "string", "vim.version.version1", {:optional => true}], ["defaultGateway", "string", "vim.version.version1", {:optional => true}], ["primaryDnsServerAddress", "string", "vim.version.version1", {:optional => true}], ["alternateDnsServerAddress", "string", "vim.version.version1", {:optional => true}], ["ipv6Address", "string", "vim.version.version5", {:optional => true}], ["ipv6SubnetMask", "string", "vim.version.version5", {:optional => true}], ["ipv6DefaultGateway", "string", "vim.version.version5", {:optional => true}], ["arpRedirectEnabled", "boolean", "vim.version.version5", {:optional => true}], ["mtu", "int", "vim.version.version5", {:optional => true}], ["jumboFramesEnabled", "boolean", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.InternetScsiHba.SendTarget", "HostInternetScsiHbaSendTarget", "vmodl.DynamicData", "vim.version.version1", [["address", "string", "vim.version.version1"], ["port", "int", "vim.version.version1", {:optional => true}], ["authenticationProperties", "vim.host.InternetScsiHba.AuthenticationProperties", "vim.version.version5", {:optional => true}], ["digestProperties", "vim.host.InternetScsiHba.DigestProperties", "vim.version.version5", {:optional => true}], ["supportedAdvancedOptions", "vim.option.OptionDef[]", "vim.version.version5", {:optional => true}], ["advancedOptions", "vim.host.InternetScsiHba.ParamValue[]", "vim.version.version5", {:optional => true}], ["parent", "string", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.InternetScsiHba.StaticTarget", "HostInternetScsiHbaStaticTarget", "vmodl.DynamicData", "vim.version.version1", [["address", "string", "vim.version.version1"], ["port", "int", "vim.version.version1", {:optional => true}], ["iScsiName", "string", "vim.version.version1"], ["discoveryMethod", "string", "vim.version.version8", {:optional => true}], ["authenticationProperties", "vim.host.InternetScsiHba.AuthenticationProperties", "vim.version.version5", {:optional => true}], ["digestProperties", "vim.host.InternetScsiHba.DigestProperties", "vim.version.version5", {:optional => true}], ["supportedAdvancedOptions", "vim.option.OptionDef[]", "vim.version.version5", {:optional => true}], ["advancedOptions", "vim.host.InternetScsiHba.ParamValue[]", "vim.version.version5", {:optional => true}], ["parent", "string", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.host.InternetScsiHba.StaticTarget.TargetDiscoveryMethod", "HostInternetScsiHbaStaticTargetTargetDiscoveryMethod", "vim.version.version8", ["staticMethod", "sendTargetMethod", "slpMethod", "isnsMethod", "unknownMethod"])
    create_data_type("vim.host.InternetScsiHba.TargetSet", "HostInternetScsiHbaTargetSet", "vmodl.DynamicData", "vim.version.version5", [["staticTargets", "vim.host.InternetScsiHba.StaticTarget[]", "vim.version.version5", {:optional => true}], ["sendTargets", "vim.host.InternetScsiHba.SendTarget[]", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.host.InternetScsiHba.NetworkBindingSupportType", "HostInternetScsiHbaNetworkBindingSupportType", "vim.version.version7", ["notsupported", "optional", "required"])
    create_data_type("vim.host.NetworkConfig", "HostNetworkConfig", "vmodl.DynamicData", "vim.version.version1", [["vswitch", "vim.host.VirtualSwitch.Config[]", "vim.version.version1", {:optional => true}], ["proxySwitch", "vim.host.HostProxySwitch.Config[]", "vim.version.version5", {:optional => true}], ["portgroup", "vim.host.PortGroup.Config[]", "vim.version.version1", {:optional => true}], ["pnic", "vim.host.PhysicalNic.Config[]", "vim.version.version1", {:optional => true}], ["vnic", "vim.host.VirtualNic.Config[]", "vim.version.version1", {:optional => true}], ["consoleVnic", "vim.host.VirtualNic.Config[]", "vim.version.version1", {:optional => true}], ["dnsConfig", "vim.host.DnsConfig", "vim.version.version1", {:optional => true}], ["ipRouteConfig", "vim.host.IpRouteConfig", "vim.version.version1", {:optional => true}], ["consoleIpRouteConfig", "vim.host.IpRouteConfig", "vim.version.version1", {:optional => true}], ["routeTableConfig", "vim.host.IpRouteTableConfig", "vim.version.version5", {:optional => true}], ["dhcp", "vim.host.DhcpService.Config[]", "vim.version.version2", {:optional => true}], ["nat", "vim.host.NatService.Config[]", "vim.version.version2", {:optional => true}], ["ipV6Enabled", "boolean", "vim.version.version5", {:optional => true}], ["netStackSpec", "vim.host.NetworkConfig.NetStackSpec[]", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.host.NetworkConfig.Result", "HostNetworkConfigResult", "vmodl.DynamicData", "vim.version.version1", [["vnicDevice", "string[]", "vim.version.version1", {:optional => true}], ["consoleVnicDevice", "string[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.NetworkConfig.NetStackSpec", "HostNetworkConfigNetStackSpec", "vmodl.DynamicData", "vim.version.version9", [["netStackInstance", "vim.host.NetStackInstance", "vim.version.version9"], ["operation", "string", "vim.version.version9", {:optional => true}]])
    create_managed_type("vim.host.NetworkSystem", "HostNetworkSystem", "vim.ExtensibleManagedObject", "vim.version.version1", [["capabilities", "vim.host.NetCapabilities", "vim.version.version1", {:optional => true}, nil], ["networkInfo", "vim.host.NetworkInfo", "vim.version.version1", {:optional => true}, nil], ["offloadCapabilities", "vim.host.NetOffloadCapabilities", "vim.version.version1", {:optional => true}, nil], ["networkConfig", "vim.host.NetworkConfig", "vim.version.version1", {:optional => true}, nil], ["dnsConfig", "vim.host.DnsConfig", "vim.version.version1", {:optional => true}, nil], ["ipRouteConfig", "vim.host.IpRouteConfig", "vim.version.version1", {:optional => true}, nil], ["consoleIpRouteConfig", "vim.host.IpRouteConfig", "vim.version.version1", {:optional => true}, nil]], [["updateNetworkConfig", "UpdateNetworkConfig", "vim.version.version1", [["config", "vim.host.NetworkConfig", "vim.version.version1", {}, nil], ["changeMode", "string", "vim.version.version1", {}, nil]], [{}, "vim.host.NetworkConfig.Result", "vim.host.NetworkConfig.Result"], nil, ["vim.fault.AlreadyExists", "vim.fault.NotFound", "vim.fault.HostConfigFault", "vim.fault.ResourceInUse"]], ["updateDnsConfig", "UpdateDnsConfig", "vim.version.version1", [["config", "vim.host.DnsConfig", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.Network", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["updateIpRouteConfig", "UpdateIpRouteConfig", "vim.version.version1", [["config", "vim.host.IpRouteConfig", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.Network", ["vim.fault.HostConfigFault", "vim.fault.InvalidState"]], ["updateConsoleIpRouteConfig", "UpdateConsoleIpRouteConfig", "vim.version.version1", [["config", "vim.host.IpRouteConfig", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.Network", ["vim.fault.HostConfigFault"]], ["updateIpRouteTableConfig", "UpdateIpRouteTableConfig", "vim.version.version5", [["config", "vim.host.IpRouteTableConfig", "vim.version.version5", {}, nil]], [{}, "void", "void"], "Host.Config.Network", ["vim.fault.HostConfigFault"]], ["addVirtualSwitch", "AddVirtualSwitch", "vim.version.version1", [["vswitchName", "string", "vim.version.version1", {}, nil], ["spec", "vim.host.VirtualSwitch.Specification", "vim.version.version1", {:optional => true}, nil]], [{}, "void", "void"], "Host.Config.Network", ["vim.fault.AlreadyExists", "vim.fault.ResourceInUse", "vim.fault.HostConfigFault"]], ["removeVirtualSwitch", "RemoveVirtualSwitch", "vim.version.version1", [["vswitchName", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.Network", ["vim.fault.NotFound", "vim.fault.ResourceInUse", "vim.fault.HostConfigFault"]], ["updateVirtualSwitch", "UpdateVirtualSwitch", "vim.version.version1", [["vswitchName", "string", "vim.version.version1", {}, nil], ["spec", "vim.host.VirtualSwitch.Specification", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.Network", ["vim.fault.ResourceInUse", "vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["addPortGroup", "AddPortGroup", "vim.version.version1", [["portgrp", "vim.host.PortGroup.Specification", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.Network", ["vim.fault.AlreadyExists", "vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["removePortGroup", "RemovePortGroup", "vim.version.version1", [["pgName", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.Network", ["vim.fault.NotFound", "vim.fault.ResourceInUse", "vim.fault.HostConfigFault"]], ["updatePortGroup", "UpdatePortGroup", "vim.version.version1", [["pgName", "string", "vim.version.version1", {}, nil], ["portgrp", "vim.host.PortGroup.Specification", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.Network", ["vim.fault.AlreadyExists", "vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["updatePhysicalNicLinkSpeed", "UpdatePhysicalNicLinkSpeed", "vim.version.version1", [["device", "string", "vim.version.version1", {}, nil], ["linkSpeed", "vim.host.PhysicalNic.LinkSpeedDuplex", "vim.version.version1", {:optional => true}, nil]], [{}, "void", "void"], "Host.Config.Network", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["queryNetworkHint", "QueryNetworkHint", "vim.version.version1", [["device", "string[]", "vim.version.version1", {:optional => true}, nil]], [{:optional => true}, "vim.host.PhysicalNic.NetworkHint[]", "vim.host.PhysicalNic.NetworkHint[]"], "System.Read", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["addVirtualNic", "AddVirtualNic", "vim.version.version1", [["portgroup", "string", "vim.version.version1", {}, nil], ["nic", "vim.host.VirtualNic.Specification", "vim.version.version1", {}, nil]], [{}, "string", "string"], nil, ["vim.fault.AlreadyExists", "vim.fault.HostConfigFault", "vim.fault.InvalidState"]], ["removeVirtualNic", "RemoveVirtualNic", "vim.version.version1", [["device", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.Network", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["updateVirtualNic", "UpdateVirtualNic", "vim.version.version1", [["device", "string", "vim.version.version1", {}, nil], ["nic", "vim.host.VirtualNic.Specification", "vim.version.version1", {}, nil]], [{}, "void", "void"], nil, ["vim.fault.NotFound", "vim.fault.HostConfigFault", "vim.fault.InvalidState"]], ["addServiceConsoleVirtualNic", "AddServiceConsoleVirtualNic", "vim.version.version1", [["portgroup", "string", "vim.version.version1", {}, nil], ["nic", "vim.host.VirtualNic.Specification", "vim.version.version1", {}, nil]], [{}, "string", "string"], nil, ["vim.fault.HostConfigFault"]], ["removeServiceConsoleVirtualNic", "RemoveServiceConsoleVirtualNic", "vim.version.version1", [["device", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.Network", ["vim.fault.NotFound", "vim.fault.ResourceInUse", "vim.fault.HostConfigFault"]], ["updateServiceConsoleVirtualNic", "UpdateServiceConsoleVirtualNic", "vim.version.version1", [["device", "string", "vim.version.version1", {}, nil], ["nic", "vim.host.VirtualNic.Specification", "vim.version.version1", {}, nil]], [{}, "void", "void"], nil, ["vim.fault.NotFound", "vim.fault.ResourceInUse", "vim.fault.HostConfigFault"]], ["restartServiceConsoleVirtualNic", "RestartServiceConsoleVirtualNic", "vim.version.version1", [["device", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.Network", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["refresh", "RefreshNetworkSystem", "vim.version.version1", [], [{}, "void", "void"], "Host.Config.Network", nil]])
    create_data_type("vim.host.ScsiDisk", "HostScsiDisk", "vim.host.ScsiLun", "vim.version.version1", [["capacity", "vim.host.DiskDimensions.Lba", "vim.version.version1"], ["devicePath", "string", "vim.version.version1"], ["ssd", "boolean", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.host.ScsiDisk.Partition", "HostScsiDiskPartition", "vmodl.DynamicData", "vim.version.version1", [["diskName", "string", "vim.version.version1"], ["partition", "int", "vim.version.version1"]])
    create_data_type("vim.host.SecuritySpec", "HostSecuritySpec", "vmodl.DynamicData", "vim.version.version5", [["adminPassword", "string", "vim.version.version5", {:optional => true}], ["removePermission", "vim.AuthorizationManager.Permission[]", "vim.version.version6", {:optional => true}], ["addPermission", "vim.AuthorizationManager.Permission[]", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.host.Summary", "HostListSummary", "vmodl.DynamicData", "vim.version.version1", [["host", "vim.HostSystem", "vim.version.version1", {:optional => true}], ["hardware", "vim.host.Summary.HardwareSummary", "vim.version.version1", {:optional => true}], ["runtime", "vim.host.RuntimeInfo", "vim.version.version1", {:optional => true}], ["config", "vim.host.Summary.ConfigSummary", "vim.version.version1"], ["quickStats", "vim.host.Summary.QuickStats", "vim.version.version1"], ["overallStatus", "vim.ManagedEntity.Status", "vim.version.version1"], ["rebootRequired", "boolean", "vim.version.version1"], ["customValue", "vim.CustomFieldsManager.Value[]", "vim.version.version1", {:optional => true}], ["managementServerIp", "string", "vim.version.version2", {:optional => true}], ["maxEVCModeKey", "string", "vim.version.version5", {:optional => true}], ["currentEVCModeKey", "string", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.Summary.HardwareSummary", "HostHardwareSummary", "vmodl.DynamicData", "vim.version.version1", [["vendor", "string", "vim.version.version1"], ["model", "string", "vim.version.version1"], ["uuid", "string", "vim.version.version1"], ["otherIdentifyingInfo", "vim.host.SystemIdentificationInfo[]", "vim.version.version2", {:optional => true}], ["memorySize", "long", "vim.version.version1"], ["cpuModel", "string", "vim.version.version1"], ["cpuMhz", "int", "vim.version.version1"], ["numCpuPkgs", "short", "vim.version.version1"], ["numCpuCores", "short", "vim.version.version1"], ["numCpuThreads", "short", "vim.version.version1"], ["numNics", "int", "vim.version.version1"], ["numHBAs", "int", "vim.version.version1"]])
    create_data_type("vim.host.Summary.QuickStats", "HostListSummaryQuickStats", "vmodl.DynamicData", "vim.version.version1", [["overallCpuUsage", "int", "vim.version.version1", {:optional => true}], ["overallMemoryUsage", "int", "vim.version.version1", {:optional => true}], ["distributedCpuFairness", "int", "vim.version.version1", {:optional => true}], ["distributedMemoryFairness", "int", "vim.version.version1", {:optional => true}], ["uptime", "int", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.host.Summary.ConfigSummary", "HostConfigSummary", "vmodl.DynamicData", "vim.version.version1", [["name", "string", "vim.version.version1"], ["port", "int", "vim.version.version1"], ["sslThumbprint", "string", "vim.version.version5", {:optional => true}], ["product", "vim.AboutInfo", "vim.version.version1", {:optional => true}], ["vmotionEnabled", "boolean", "vim.version.version1"], ["faultToleranceEnabled", "boolean", "vim.version.version5"], ["featureVersion", "vim.host.FeatureVersionInfo[]", "vim.version.version6", {:optional => true}], ["agentVmDatastore", "vim.Datastore", "vim.version.version7", {:optional => true}], ["agentVmNetwork", "vim.Network", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.host.TpmBootSecurityOptionEventDetails", "HostTpmBootSecurityOptionEventDetails", "vim.host.TpmEventDetails", "vim.version.version8", [["bootSecurityOption", "string", "vim.version.version8"]])
    create_data_type("vim.host.TpmCommandEventDetails", "HostTpmCommandEventDetails", "vim.host.TpmEventDetails", "vim.version.version8", [["commandLine", "string", "vim.version.version8"]])
    create_data_type("vim.host.UnresolvedVmfsExtent", "HostUnresolvedVmfsExtent", "vmodl.DynamicData", "vim.version.version5", [["device", "vim.host.ScsiDisk.Partition", "vim.version.version5"], ["devicePath", "string", "vim.version.version5"], ["vmfsUuid", "string", "vim.version.version5"], ["isHeadExtent", "boolean", "vim.version.version5"], ["ordinal", "int", "vim.version.version5"], ["startBlock", "int", "vim.version.version5"], ["endBlock", "int", "vim.version.version5"], ["reason", "string", "vim.version.version5"]])
    create_enum_type("vim.host.UnresolvedVmfsExtent.UnresolvedReason", "HostUnresolvedVmfsExtentUnresolvedReason", "vim.version.version5", ["diskIdMismatch", "uuidConflict"])
    create_managed_type("vim.host.VFlashManager", "HostVFlashManager", "vmodl.ManagedObject", "vim.version.version9", [["vFlashConfigInfo", "vim.host.VFlashManager.VFlashConfigInfo", "vim.version.version9", {:optional => true}, nil]], [["configureVFlashResourceEx", "ConfigureVFlashResourceEx_Task", "vim.version.version9", [["devicePath", "string[]", "vim.version.version9", {:optional => true}, nil]], [{:optional => true}, "vim.Task", "vim.host.VFlashResourceConfigurationResult"], "Host.Config.Storage", ["vim.fault.HostConfigFault"]], ["configureVFlashResource", "HostConfigureVFlashResource", "vim.version.version9", [["spec", "vim.host.VFlashManager.VFlashResourceConfigSpec", "vim.version.version9", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.HostConfigFault", "vim.fault.ResourceInUse"]], ["removeVFlashResource", "HostRemoveVFlashResource", "vim.version.version9", [], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault", "vim.fault.ResourceInUse"]], ["configureHostVFlashCache", "HostConfigVFlashCache", "vim.version.version9", [["spec", "vim.host.VFlashManager.VFlashCacheConfigSpec", "vim.version.version9", {}, nil]], [{}, "void", "void"], "Host.Config.AdvancedConfig", ["vim.fault.HostConfigFault", "vim.fault.InaccessibleVFlashSource", "vim.fault.ResourceInUse"]], ["getVFlashModuleDefaultConfig", "HostGetVFlashModuleDefaultConfig", "vim.version.version9", [["vFlashModule", "string", "vim.version.version9", {}, nil]], [{}, "vim.vm.device.VirtualDisk.VFlashCacheConfigInfo", "vim.vm.device.VirtualDisk.VFlashCacheConfigInfo"], "Host.Config.AdvancedConfig", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]]])
    create_data_type("vim.host.VFlashManager.VFlashResourceConfigSpec", "HostVFlashManagerVFlashResourceConfigSpec", "vmodl.DynamicData", "vim.version.version9", [["vffsUuid", "string", "vim.version.version9"]])
    create_data_type("vim.host.VFlashManager.VFlashResourceConfigInfo", "HostVFlashManagerVFlashResourceConfigInfo", "vmodl.DynamicData", "vim.version.version9", [["vffs", "vim.host.VffsVolume", "vim.version.version9", {:optional => true}], ["capacity", "long", "vim.version.version9"]])
    create_data_type("vim.host.VFlashManager.VFlashResourceRunTimeInfo", "HostVFlashManagerVFlashResourceRunTimeInfo", "vmodl.DynamicData", "vim.version.version9", [["usage", "long", "vim.version.version9"], ["capacity", "long", "vim.version.version9"], ["accessible", "boolean", "vim.version.version9"], ["capacityForVmCache", "long", "vim.version.version9"], ["freeForVmCache", "long", "vim.version.version9"]])
    create_data_type("vim.host.VFlashManager.VFlashCacheConfigSpec", "HostVFlashManagerVFlashCacheConfigSpec", "vmodl.DynamicData", "vim.version.version9", [["defaultVFlashModule", "string", "vim.version.version9"], ["swapCacheReservationInGB", "long", "vim.version.version9"]])
    create_data_type("vim.host.VFlashManager.VFlashCacheConfigInfo", "HostVFlashManagerVFlashCacheConfigInfo", "vmodl.DynamicData", "vim.version.version9", [["vFlashModuleConfigOption", "vim.host.VFlashManager.VFlashCacheConfigInfo.VFlashModuleConfigOption[]", "vim.version.version9", {:optional => true}], ["defaultVFlashModule", "string", "vim.version.version9", {:optional => true}], ["swapCacheReservationInGB", "long", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.host.VFlashManager.VFlashCacheConfigInfo.VFlashModuleConfigOption", "HostVFlashManagerVFlashCacheConfigInfoVFlashModuleConfigOption", "vmodl.DynamicData", "vim.version.version9", [["vFlashModule", "string", "vim.version.version9"], ["vFlashModuleVersion", "string", "vim.version.version9"], ["minSupportedModuleVersion", "string", "vim.version.version9"], ["cacheConsistencyType", "vim.option.ChoiceOption", "vim.version.version9"], ["cacheMode", "vim.option.ChoiceOption", "vim.version.version9"], ["blockSizeInKBOption", "vim.option.LongOption", "vim.version.version9"], ["reservationInMBOption", "vim.option.LongOption", "vim.version.version9"], ["maxDiskSizeInKB", "long", "vim.version.version9"]])
    create_data_type("vim.host.VFlashManager.VFlashConfigInfo", "HostVFlashManagerVFlashConfigInfo", "vmodl.DynamicData", "vim.version.version9", [["vFlashResourceConfigInfo", "vim.host.VFlashManager.VFlashResourceConfigInfo", "vim.version.version9", {:optional => true}], ["vFlashCacheConfigInfo", "vim.host.VFlashManager.VFlashCacheConfigInfo", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.host.VMotionInfo", "HostVMotionInfo", "vmodl.DynamicData", "vim.version.version1", [["netConfig", "vim.host.VMotionSystem.NetConfig", "vim.version.version1", {:optional => true}], ["ipConfig", "vim.host.IpConfig", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.VffsVolume", "HostVffsVolume", "vim.host.FileSystemVolume", "vim.version.version9", [["majorVersion", "int", "vim.version.version9"], ["version", "string", "vim.version.version9"], ["uuid", "string", "vim.version.version9"], ["extent", "vim.host.ScsiDisk.Partition[]", "vim.version.version9"]])
    create_data_type("vim.host.VffsVolume.Specification", "HostVffsSpec", "vmodl.DynamicData", "vim.version.version9", [["devicePath", "string", "vim.version.version9"], ["partition", "vim.host.DiskPartitionInfo.Specification", "vim.version.version9", {:optional => true}], ["majorVersion", "int", "vim.version.version9"], ["volumeName", "string", "vim.version.version9"]])
    create_data_type("vim.host.VmfsVolume", "HostVmfsVolume", "vim.host.FileSystemVolume", "vim.version.version1", [["blockSizeMb", "int", "vim.version.version1"], ["maxBlocks", "int", "vim.version.version1"], ["majorVersion", "int", "vim.version.version1"], ["version", "string", "vim.version.version1"], ["uuid", "string", "vim.version.version1"], ["extent", "vim.host.ScsiDisk.Partition[]", "vim.version.version1"], ["vmfsUpgradable", "boolean", "vim.version.version1"], ["forceMountedInfo", "vim.host.ForceMountedInfo", "vim.version.version5", {:optional => true}], ["ssd", "boolean", "vim.version.version7", {:optional => true}], ["local", "boolean", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.host.VmfsVolume.Specification", "HostVmfsSpec", "vmodl.DynamicData", "vim.version.version1", [["extent", "vim.host.ScsiDisk.Partition", "vim.version.version1"], ["blockSizeMb", "int", "vim.version.version1", {:optional => true}], ["majorVersion", "int", "vim.version.version1"], ["volumeName", "string", "vim.version.version1"]])
    create_data_type("vim.option.BoolOption", "BoolOption", "vim.option.OptionType", "vim.version.version1", [["supported", "boolean", "vim.version.version1"], ["defaultValue", "boolean", "vim.version.version1"]])
    create_data_type("vim.option.ChoiceOption", "ChoiceOption", "vim.option.OptionType", "vim.version.version1", [["choiceInfo", "vim.ElementDescription[]", "vim.version.version1"], ["defaultIndex", "int", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.option.FloatOption", "FloatOption", "vim.option.OptionType", "vim.version.version1", [["min", "float", "vim.version.version1"], ["max", "float", "vim.version.version1"], ["defaultValue", "float", "vim.version.version1"]])
    create_data_type("vim.option.IntOption", "IntOption", "vim.option.OptionType", "vim.version.version1", [["min", "int", "vim.version.version1"], ["max", "int", "vim.version.version1"], ["defaultValue", "int", "vim.version.version1"]])
    create_data_type("vim.option.LongOption", "LongOption", "vim.option.OptionType", "vim.version.version1", [["min", "long", "vim.version.version1"], ["max", "long", "vim.version.version1"], ["defaultValue", "long", "vim.version.version1"]])
    create_managed_type("vim.profile.host.ProfileManager", "HostProfileManager", "vim.profile.ProfileManager", "vim.version.version5", nil, [["applyHostConfiguration", "ApplyHostConfig_Task", "vim.version.version5", [["host", "vim.HostSystem", "vim.version.version5", {}, nil], ["configSpec", "vim.host.ConfigSpec", "vim.version.version5", {}, nil], ["userInput", "vim.profile.DeferredPolicyOptionParameter[]", "vim.version.version7", {:optional => true}, nil]], [{}, "vim.Task", "void"], nil, ["vim.fault.InvalidState", "vim.fault.HostConfigFailed"]], ["generateConfigTaskList", "GenerateConfigTaskList", "vim.version.version5", [["configSpec", "vim.host.ConfigSpec", "vim.version.version5", {}, nil], ["host", "vim.HostSystem", "vim.version.version5", {}, nil]], [{}, "vim.profile.host.ProfileManager.ConfigTaskList", "vim.profile.host.ProfileManager.ConfigTaskList"], "System.View", nil], ["generateTaskList", "GenerateHostProfileTaskList_Task", "vim.version.version9", [["configSpec", "vim.host.ConfigSpec", "vim.version.version9", {}, nil], ["host", "vim.HostSystem", "vim.version.version9", {}, nil]], [{:optional => true}, "vim.Task", "vim.profile.host.ProfileManager.ConfigTaskList"], "System.View", nil], ["queryProfileMetadata", "QueryHostProfileMetadata", "vim.version.version5", [["profileName", "vmodl.TypeName[]", "vim.version.version5", {:optional => true}, nil], ["profile", "vim.profile.Profile", "vim.version.version7", {:optional => true}, nil]], [{:optional => true}, "vim.profile.ProfileMetadata[]", "vim.profile.ProfileMetadata[]"], "System.View", nil], ["queryProfileStructure", "QueryProfileStructure", "vim.version.version7", [["profile", "vim.profile.Profile", "vim.version.version7", {:optional => true}, nil]], [{}, "vim.profile.ProfileStructure", "vim.profile.ProfileStructure"], "System.View", nil], ["createDefaultProfile", "CreateDefaultProfile", "vim.version.version5", [["profileType", "vmodl.TypeName", "vim.version.version5", {}, nil], ["profileTypeName", "string", "vim.version.version7", {:optional => true}, nil], ["profile", "vim.profile.Profile", "vim.version.version7", {:optional => true}, nil]], [{}, "vim.profile.ApplyProfile", "vim.profile.ApplyProfile"], "System.View", nil], ["updateAnswerFile", "UpdateAnswerFile_Task", "vim.version.version7", [["host", "vim.HostSystem", "vim.version.version7", {}, nil], ["configSpec", "vim.profile.host.ProfileManager.AnswerFileCreateSpec", "vim.version.version7", {}, nil]], [{}, "vim.Task", "void"], "Profile.Edit", ["vim.fault.AnswerFileUpdateFailed"]], ["retrieveAnswerFile", "RetrieveAnswerFile", "vim.version.version7", [["host", "vim.HostSystem", "vim.version.version7", {}, "Profile.Edit"]], [{:optional => true}, "vim.profile.host.AnswerFile", "vim.profile.host.AnswerFile"], nil, nil], ["retrieveAnswerFileForProfile", "RetrieveAnswerFileForProfile", "vim.version.version8", [["host", "vim.HostSystem", "vim.version.version8", {}, "Profile.Edit"], ["applyProfile", "vim.profile.host.HostApplyProfile", "vim.version.version8", {}, nil]], [{:optional => true}, "vim.profile.host.AnswerFile", "vim.profile.host.AnswerFile"], nil, nil], ["exportAnswerFile", "ExportAnswerFile_Task", "vim.version.version7", [["host", "vim.HostSystem", "vim.version.version7", {}, nil]], [{}, "vim.Task", "string"], "Profile.Export", nil], ["checkAnswerFileStatus", "CheckAnswerFileStatus_Task", "vim.version.version7", [["host", "vim.HostSystem[]", "vim.version.version7", {}, nil]], [{:optional => true}, "vim.Task", "vim.profile.host.AnswerFileStatusResult[]"], "System.View", nil], ["queryAnswerFileStatus", "QueryAnswerFileStatus", "vim.version.version7", [["host", "vim.HostSystem[]", "vim.version.version7", {}, nil]], [{:optional => true}, "vim.profile.host.AnswerFileStatusResult[]", "vim.profile.host.AnswerFileStatusResult[]"], "System.View", nil]])
    create_data_type("vim.profile.host.ProfileManager.ConfigTaskList", "HostProfileManagerConfigTaskList", "vmodl.DynamicData", "vim.version.version5", [["configSpec", "vim.host.ConfigSpec", "vim.version.version5", {:optional => true}], ["taskDescription", "vmodl.LocalizableMessage[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.profile.host.ProfileManager.AnswerFileCreateSpec", "AnswerFileCreateSpec", "vmodl.DynamicData", "vim.version.version7", nil)
    create_data_type("vim.profile.host.ProfileManager.AnswerFileOptionsCreateSpec", "AnswerFileOptionsCreateSpec", "vim.profile.host.ProfileManager.AnswerFileCreateSpec", "vim.version.version7", [["userInput", "vim.profile.DeferredPolicyOptionParameter[]", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.profile.host.ProfileManager.AnswerFileSerializedCreateSpec", "AnswerFileSerializedCreateSpec", "vim.profile.host.ProfileManager.AnswerFileCreateSpec", "vim.version.version7", [["answerFileConfigString", "string", "vim.version.version7"]])
    create_enum_type("vim.profile.host.ProfileManager.AnswerFileValidationResult.Status", "AnswerFileValidationResultStatus", "vim.version.version8", ["success", "needInput", "error"])
    create_enum_type("vim.profile.host.ProfileManager.AnswerFileStatus", "HostProfileManagerAnswerFileStatus", "vim.version.version7", ["valid", "invalid", "unknown"])
    create_data_type("vim.scheduler.ScheduledTaskInfo", "ScheduledTaskInfo", "vim.scheduler.ScheduledTaskSpec", "vim.version.version1", [["scheduledTask", "vim.scheduler.ScheduledTask", "vim.version.version1"], ["entity", "vim.ManagedEntity", "vim.version.version1"], ["lastModifiedTime", "vmodl.DateTime", "vim.version.version1"], ["lastModifiedUser", "string", "vim.version.version1"], ["nextRunTime", "vmodl.DateTime", "vim.version.version1", {:optional => true}], ["prevRunTime", "vmodl.DateTime", "vim.version.version1", {:optional => true}], ["state", "vim.TaskInfo.State", "vim.version.version1"], ["error", "vmodl.MethodFault", "vim.version.version1", {:optional => true}], ["result", "anyType", "vim.version.version1", {:optional => true}], ["progress", "int", "vim.version.version1", {:optional => true}], ["activeTask", "vim.Task", "vim.version.version1", {:optional => true}], ["taskObject", "vmodl.ManagedObject", "vim.version.version5"]])
    create_data_type("vim.storageDrs.PodSelectionSpec", "StorageDrsPodSelectionSpec", "vmodl.DynamicData", "vim.version.version7", [["initialVmConfig", "vim.storageDrs.PodSelectionSpec.VmPodConfig[]", "vim.version.version7", {:optional => true}], ["storagePod", "vim.StoragePod", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.storageDrs.PodSelectionSpec.VmPodConfig", "VmPodConfigForPlacement", "vmodl.DynamicData", "vim.version.version7", [["storagePod", "vim.StoragePod", "vim.version.version7"], ["disk", "vim.storageDrs.PodSelectionSpec.DiskLocator[]", "vim.version.version7", {:optional => true}], ["vmConfig", "vim.storageDrs.VmConfigInfo", "vim.version.version7", {:optional => true}], ["interVmRule", "vim.cluster.RuleInfo[]", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.storageDrs.PodSelectionSpec.DiskLocator", "PodDiskLocator", "vmodl.DynamicData", "vim.version.version7", [["diskId", "int", "vim.version.version7"], ["diskMoveType", "string", "vim.version.version7", {:optional => true}], ["diskBackingInfo", "vim.vm.device.VirtualDevice.BackingInfo", "vim.version.version7", {:optional => true}], ["profile", "vim.vm.ProfileSpec[]", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.storageDrs.StoragePlacementSpec", "StoragePlacementSpec", "vmodl.DynamicData", "vim.version.version7", [["type", "string", "vim.version.version7"], ["priority", "vim.VirtualMachine.MovePriority", "vim.version.version7", {:optional => true}], ["vm", "vim.VirtualMachine", "vim.version.version7", {:optional => true}], ["podSelectionSpec", "vim.storageDrs.PodSelectionSpec", "vim.version.version7"], ["cloneSpec", "vim.vm.CloneSpec", "vim.version.version7", {:optional => true}], ["cloneName", "string", "vim.version.version7", {:optional => true}], ["configSpec", "vim.vm.ConfigSpec", "vim.version.version7", {:optional => true}], ["relocateSpec", "vim.vm.RelocateSpec", "vim.version.version7", {:optional => true}], ["resourcePool", "vim.ResourcePool", "vim.version.version7", {:optional => true}], ["host", "vim.HostSystem", "vim.version.version7", {:optional => true}], ["folder", "vim.Folder", "vim.version.version7", {:optional => true}], ["disallowPrerequisiteMoves", "boolean", "vim.version.version8", {:optional => true}], ["resourceLeaseDurationSec", "int", "vim.version.version8", {:optional => true}]])
    create_enum_type("vim.storageDrs.StoragePlacementSpec.PlacementType", "StoragePlacementSpecPlacementType", "vim.version.version7", ["create", "reconfigure", "relocate", "clone"])
    create_data_type("vim.storageDrs.VirtualDiskAntiAffinityRuleSpec", "VirtualDiskAntiAffinityRuleSpec", "vim.cluster.RuleInfo", "vim.version.version7", [["diskId", "int[]", "vim.version.version7"]])
    create_data_type("vim.vApp.VAppConfigInfo", "VAppConfigInfo", "vim.vApp.VmConfigInfo", "vim.version.version5", [["entityConfig", "vim.vApp.EntityConfigInfo[]", "vim.version.version5", {:optional => true}], ["annotation", "string", "vim.version.version5"], ["instanceUuid", "string", "vim.version.version6", {:optional => true}], ["managedBy", "vim.ext.ManagedByInfo", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.vApp.VAppConfigSpec", "VAppConfigSpec", "vim.vApp.VmConfigSpec", "vim.version.version5", [["entityConfig", "vim.vApp.EntityConfigInfo[]", "vim.version.version5", {:optional => true}], ["annotation", "string", "vim.version.version5", {:optional => true}], ["instanceUuid", "string", "vim.version.version6", {:optional => true}], ["managedBy", "vim.ext.ManagedByInfo", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.vApp.VAppImportSpec", "VirtualAppImportSpec", "vim.ImportSpec", "vim.version.version5", [["name", "string", "vim.version.version5"], ["vAppConfigSpec", "vim.vApp.VAppConfigSpec", "vim.version.version5"], ["resourcePoolSpec", "vim.ResourceConfigSpec", "vim.version.version5"], ["child", "vim.ImportSpec[]", "vim.version.version5", {:optional => true}]])
    create_managed_type("vim.view.ManagedObjectView", "ManagedObjectView", "vim.view.View", "vim.version.version2", [["view", "vmodl.ManagedObject[]", "vim.version.version2", {:optional => true}, nil]], nil)
    create_data_type("vim.vm.CdromInfo", "VirtualMachineCdromInfo", "vim.vm.TargetInfo", "vim.version.version1", nil)
    create_data_type("vim.vm.ConfigTarget", "ConfigTarget", "vmodl.DynamicData", "vim.version.version1", [["numCpus", "int", "vim.version.version1"], ["numCpuCores", "int", "vim.version.version1"], ["numNumaNodes", "int", "vim.version.version1"], ["smcPresent", "boolean", "vim.version.version7"], ["datastore", "vim.vm.DatastoreInfo[]", "vim.version.version1", {:optional => true}], ["network", "vim.vm.NetworkInfo[]", "vim.version.version1", {:optional => true}], ["opaqueNetwork", "vim.vm.OpaqueNetworkInfo[]", "vim.version.version9", {:optional => true}], ["distributedVirtualPortgroup", "vim.dvs.DistributedVirtualPortgroupInfo[]", "vim.version.version5", {:optional => true}], ["distributedVirtualSwitch", "vim.dvs.DistributedVirtualSwitchInfo[]", "vim.version.version5", {:optional => true}], ["cdRom", "vim.vm.CdromInfo[]", "vim.version.version1", {:optional => true}], ["serial", "vim.vm.SerialInfo[]", "vim.version.version1", {:optional => true}], ["parallel", "vim.vm.ParallelInfo[]", "vim.version.version1", {:optional => true}], ["sound", "vim.vm.SoundInfo[]", "vim.version.version2", {:optional => true}], ["usb", "vim.vm.UsbInfo[]", "vim.version.version2", {:optional => true}], ["floppy", "vim.vm.FloppyInfo[]", "vim.version.version1", {:optional => true}], ["legacyNetworkInfo", "vim.vm.LegacyNetworkSwitchInfo[]", "vim.version.version1", {:optional => true}], ["scsiPassthrough", "vim.vm.ScsiPassthroughInfo[]", "vim.version.version1", {:optional => true}], ["scsiDisk", "vim.vm.ScsiDiskDeviceInfo[]", "vim.version.version1", {:optional => true}], ["ideDisk", "vim.vm.IdeDiskDeviceInfo[]", "vim.version.version1", {:optional => true}], ["maxMemMBOptimalPerf", "int", "vim.version.version1"], ["resourcePool", "vim.ResourcePool.RuntimeInfo", "vim.version.version1", {:optional => true}], ["autoVmotion", "boolean", "vim.version.version1", {:optional => true}], ["pciPassthrough", "vim.vm.PciPassthroughInfo[]", "vim.version.version5", {:optional => true}], ["sriov", "vim.vm.SriovInfo[]", "vim.version.version9", {:optional => true}], ["vFlashModule", "vim.vm.VFlashModuleInfo[]", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.vm.DefinedProfileSpec", "VirtualMachineDefinedProfileSpec", "vim.vm.ProfileSpec", "vim.version.version9", [["profileId", "string", "vim.version.version9"], ["profileData", "vim.vm.ProfileRawData", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.vm.DiskDeviceInfo", "VirtualMachineDiskDeviceInfo", "vim.vm.TargetInfo", "vim.version.version1", [["capacity", "long", "vim.version.version1", {:optional => true}], ["vm", "vim.VirtualMachine[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.vm.EmptyProfileSpec", "VirtualMachineEmptyProfileSpec", "vim.vm.ProfileSpec", "vim.version.version9", nil)
    create_data_type("vim.vm.FloppyInfo", "VirtualMachineFloppyInfo", "vim.vm.TargetInfo", "vim.version.version1", nil)
    create_data_type("vim.vm.IdeDiskDeviceInfo", "VirtualMachineIdeDiskDeviceInfo", "vim.vm.DiskDeviceInfo", "vim.version.version1", [["partitionTable", "vim.vm.IdeDiskDeviceInfo.PartitionInfo[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.vm.IdeDiskDeviceInfo.PartitionInfo", "VirtualMachineIdeDiskDevicePartitionInfo", "vmodl.DynamicData", "vim.version.version1", [["id", "int", "vim.version.version1"], ["capacity", "int", "vim.version.version1"]])
    create_data_type("vim.vm.NetworkInfo", "VirtualMachineNetworkInfo", "vim.vm.TargetInfo", "vim.version.version1", [["network", "vim.Network.Summary", "vim.version.version1"]])
    create_data_type("vim.vm.OpaqueNetworkInfo", "OpaqueNetworkTargetInfo", "vim.vm.TargetInfo", "vim.version.version9", [["network", "vim.OpaqueNetwork.Summary", "vim.version.version9"]])
    create_data_type("vim.vm.ParallelInfo", "VirtualMachineParallelInfo", "vim.vm.TargetInfo", "vim.version.version1", nil)
    create_data_type("vim.vm.PciPassthroughInfo", "VirtualMachinePciPassthroughInfo", "vim.vm.TargetInfo", "vim.version.version5", [["pciDevice", "vim.host.PciDevice", "vim.version.version5"], ["systemId", "string", "vim.version.version5"]])
    create_data_type("vim.vm.RelocateSpec", "VirtualMachineRelocateSpec", "vmodl.DynamicData", "vim.version.version1", [["datastore", "vim.Datastore", "vim.version.version1", {:optional => true}], ["diskMoveType", "string", "vim.version.version5", {:optional => true}], ["pool", "vim.ResourcePool", "vim.version.version1", {:optional => true}], ["host", "vim.HostSystem", "vim.version.version1", {:optional => true}], ["disk", "vim.vm.RelocateSpec.DiskLocator[]", "vim.version.version1", {:optional => true}], ["transform", "vim.vm.RelocateSpec.Transformation", "vim.version.version1", {:optional => true}], ["deviceChange", "vim.vm.device.VirtualDeviceSpec[]", "vim.version.version9", {:optional => true}], ["profile", "vim.vm.ProfileSpec[]", "vim.version.version9", {:optional => true}]])
    create_enum_type("vim.vm.RelocateSpec.Transformation", "VirtualMachineRelocateTransformation", "vim.version.version1", ["flat", "sparse"])
    create_data_type("vim.vm.RelocateSpec.DiskLocator", "VirtualMachineRelocateSpecDiskLocator", "vmodl.DynamicData", "vim.version.version1", [["diskId", "int", "vim.version.version1"], ["datastore", "vim.Datastore", "vim.version.version1"], ["diskMoveType", "string", "vim.version.version5", {:optional => true}], ["diskBackingInfo", "vim.vm.device.VirtualDevice.BackingInfo", "vim.version.version7", {:optional => true}], ["profile", "vim.vm.ProfileSpec[]", "vim.version.version9", {:optional => true}]])
    create_enum_type("vim.vm.RelocateSpec.DiskMoveOptions", "VirtualMachineRelocateDiskMoveOptions", "vim.version.version5", ["moveAllDiskBackingsAndAllowSharing", "moveAllDiskBackingsAndDisallowSharing", "moveChildMostDiskBacking", "createNewChildDiskBacking", "moveAllDiskBackingsAndConsolidate"])
    create_data_type("vim.vm.RuntimeInfo", "VirtualMachineRuntimeInfo", "vmodl.DynamicData", "vim.version.version1", [["device", "vim.vm.DeviceRuntimeInfo[]", "vim.version.version6", {:optional => true}], ["host", "vim.HostSystem", "vim.version.version1", {:optional => true}], ["connectionState", "vim.VirtualMachine.ConnectionState", "vim.version.version1"], ["powerState", "vim.VirtualMachine.PowerState", "vim.version.version1"], ["faultToleranceState", "vim.VirtualMachine.FaultToleranceState", "vim.version.version5"], ["dasVmProtection", "vim.vm.RuntimeInfo.DasProtectionState", "vim.version.version7", {:optional => true}], ["toolsInstallerMounted", "boolean", "vim.version.version1"], ["suspendTime", "vmodl.DateTime", "vim.version.version1", {:optional => true}], ["bootTime", "vmodl.DateTime", "vim.version.version1", {:optional => true}], ["suspendInterval", "long", "vim.version.version1", {:optional => true}], ["question", "vim.vm.QuestionInfo", "vim.version.version1", {:optional => true}], ["memoryOverhead", "long", "vim.version.version1", {:optional => true}], ["maxCpuUsage", "int", "vim.version.version1", {:optional => true}], ["maxMemoryUsage", "int", "vim.version.version1", {:optional => true}], ["numMksConnections", "int", "vim.version.version1"], ["recordReplayState", "vim.VirtualMachine.RecordReplayState", "vim.version.version5"], ["cleanPowerOff", "boolean", "vim.version.version5", {:optional => true}], ["needSecondaryReason", "string", "vim.version.version5", {:optional => true}], ["onlineStandby", "boolean", "vim.version.version8"], ["minRequiredEVCModeKey", "string", "vim.version.version6", {:optional => true}], ["consolidationNeeded", "boolean", "vim.version.version7"], ["offlineFeatureRequirement", "vim.vm.FeatureRequirement[]", "vim.version.version8", {:optional => true}], ["featureRequirement", "vim.vm.FeatureRequirement[]", "vim.version.version8", {:optional => true}], ["featureMask", "vim.host.FeatureMask[]", "vim.version.version8", {:optional => true}], ["vFlashCacheAllocation", "long", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.vm.RuntimeInfo.DasProtectionState", "VirtualMachineRuntimeInfoDasProtectionState", "vmodl.DynamicData", "vim.version.version7", [["dasProtected", "boolean", "vim.version.version7"]])
    create_data_type("vim.vm.ScsiDiskDeviceInfo", "VirtualMachineScsiDiskDeviceInfo", "vim.vm.DiskDeviceInfo", "vim.version.version1", [["disk", "vim.host.ScsiDisk", "vim.version.version1", {:optional => true}], ["transportHint", "string", "vim.version.version5", {:optional => true}], ["lunNumber", "int", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.vm.ScsiPassthroughInfo", "VirtualMachineScsiPassthroughInfo", "vim.vm.TargetInfo", "vim.version.version1", [["scsiClass", "string", "vim.version.version1"], ["vendor", "string", "vim.version.version1"], ["physicalUnitNumber", "int", "vim.version.version1"]])
    create_enum_type("vim.vm.ScsiPassthroughInfo.ScsiClass", "VirtualMachineScsiPassthroughType", "vim.version.version1", ["disk", "tape", "printer", "processor", "worm", "cdrom", "scanner", "optical", "media", "com", "raid", "unknown"])
    create_data_type("vim.vm.SerialInfo", "VirtualMachineSerialInfo", "vim.vm.TargetInfo", "vim.version.version1", nil)
    create_data_type("vim.vm.SnapshotTree", "VirtualMachineSnapshotTree", "vmodl.DynamicData", "vim.version.version1", [["snapshot", "vim.vm.Snapshot", "vim.version.version1"], ["vm", "vim.VirtualMachine", "vim.version.version1"], ["name", "string", "vim.version.version1"], ["description", "string", "vim.version.version1"], ["id", "int", "vim.version.version5"], ["createTime", "vmodl.DateTime", "vim.version.version1"], ["state", "vim.VirtualMachine.PowerState", "vim.version.version1"], ["quiesced", "boolean", "vim.version.version1"], ["backupManifest", "string", "vim.version.version4", {:optional => true}], ["childSnapshotList", "vim.vm.SnapshotTree[]", "vim.version.version1", {:optional => true}], ["replaySupported", "boolean", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.vm.SoundInfo", "VirtualMachineSoundInfo", "vim.vm.TargetInfo", "vim.version.version2", nil)
    create_data_type("vim.vm.SriovInfo", "VirtualMachineSriovInfo", "vim.vm.PciPassthroughInfo", "vim.version.version9", [["virtualFunction", "boolean", "vim.version.version9"], ["pnic", "string", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.vm.Summary", "VirtualMachineSummary", "vmodl.DynamicData", "vim.version.version1", [["vm", "vim.VirtualMachine", "vim.version.version1", {:optional => true}], ["runtime", "vim.vm.RuntimeInfo", "vim.version.version1"], ["guest", "vim.vm.Summary.GuestSummary", "vim.version.version1", {:optional => true}], ["config", "vim.vm.Summary.ConfigSummary", "vim.version.version1"], ["storage", "vim.vm.Summary.StorageSummary", "vim.version.version5", {:optional => true}], ["quickStats", "vim.vm.Summary.QuickStats", "vim.version.version1"], ["overallStatus", "vim.ManagedEntity.Status", "vim.version.version1"], ["customValue", "vim.CustomFieldsManager.Value[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.vm.Summary.ConfigSummary", "VirtualMachineConfigSummary", "vmodl.DynamicData", "vim.version.version1", [["name", "string", "vim.version.version1"], ["template", "boolean", "vim.version.version1"], ["vmPathName", "string", "vim.version.version1"], ["memorySizeMB", "int", "vim.version.version1", {:optional => true}], ["cpuReservation", "int", "vim.version.version1", {:optional => true}], ["memoryReservation", "int", "vim.version.version1", {:optional => true}], ["numCpu", "int", "vim.version.version1", {:optional => true}], ["numEthernetCards", "int", "vim.version.version1", {:optional => true}], ["numVirtualDisks", "int", "vim.version.version1", {:optional => true}], ["uuid", "string", "vim.version.version1", {:optional => true}], ["instanceUuid", "string", "vim.version.version5", {:optional => true}], ["guestId", "string", "vim.version.version1", {:optional => true}], ["guestFullName", "string", "vim.version.version1", {:optional => true}], ["annotation", "string", "vim.version.version1", {:optional => true}], ["product", "vim.vApp.ProductInfo", "vim.version.version5", {:optional => true}], ["installBootRequired", "boolean", "vim.version.version5", {:optional => true}], ["ftInfo", "vim.vm.FaultToleranceConfigInfo", "vim.version.version5", {:optional => true}], ["managedBy", "vim.ext.ManagedByInfo", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.vm.Summary.QuickStats", "VirtualMachineQuickStats", "vmodl.DynamicData", "vim.version.version1", [["overallCpuUsage", "int", "vim.version.version1", {:optional => true}], ["overallCpuDemand", "int", "vim.version.version5", {:optional => true}], ["guestMemoryUsage", "int", "vim.version.version1", {:optional => true}], ["hostMemoryUsage", "int", "vim.version.version1", {:optional => true}], ["guestHeartbeatStatus", "vim.ManagedEntity.Status", "vim.version.version1"], ["distributedCpuEntitlement", "int", "vim.version.version1", {:optional => true}], ["distributedMemoryEntitlement", "int", "vim.version.version1", {:optional => true}], ["staticCpuEntitlement", "int", "vim.version.version5", {:optional => true}], ["staticMemoryEntitlement", "int", "vim.version.version5", {:optional => true}], ["privateMemory", "int", "vim.version.version5", {:optional => true}], ["sharedMemory", "int", "vim.version.version5", {:optional => true}], ["swappedMemory", "int", "vim.version.version5", {:optional => true}], ["balloonedMemory", "int", "vim.version.version5", {:optional => true}], ["consumedOverheadMemory", "int", "vim.version.version5", {:optional => true}], ["ftLogBandwidth", "int", "vim.version.version5", {:optional => true}], ["ftSecondaryLatency", "int", "vim.version.version5", {:optional => true}], ["ftLatencyStatus", "vim.ManagedEntity.Status", "vim.version.version5", {:optional => true}], ["compressedMemory", "long", "vim.version.version6", {:optional => true}], ["uptimeSeconds", "int", "vim.version.version6", {:optional => true}], ["ssdSwappedMemory", "long", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.vm.Summary.GuestSummary", "VirtualMachineGuestSummary", "vmodl.DynamicData", "vim.version.version1", [["guestId", "string", "vim.version.version1", {:optional => true}], ["guestFullName", "string", "vim.version.version1", {:optional => true}], ["toolsStatus", "vim.vm.GuestInfo.ToolsStatus", "vim.version.version1", {:optional => true}], ["toolsVersionStatus", "string", "vim.version.version5", {:optional => true}], ["toolsVersionStatus2", "string", "vim.version.version7", {:optional => true}], ["toolsRunningStatus", "string", "vim.version.version5", {:optional => true}], ["hostName", "string", "vim.version.version1", {:optional => true}], ["ipAddress", "string", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.vm.Summary.StorageSummary", "VirtualMachineStorageSummary", "vmodl.DynamicData", "vim.version.version5", [["committed", "long", "vim.version.version5"], ["uncommitted", "long", "vim.version.version5"], ["unshared", "long", "vim.version.version5"], ["timestamp", "vmodl.DateTime", "vim.version.version5"]])
    create_data_type("vim.vm.VFlashModuleInfo", "VirtualMachineVFlashModuleInfo", "vim.vm.TargetInfo", "vim.version.version9", [["vFlashModule", "vim.host.VFlashManager.VFlashCacheConfigInfo.VFlashModuleConfigOption", "vim.version.version9"]])
    create_data_type("vim.vm.VmImportSpec", "VirtualMachineImportSpec", "vim.ImportSpec", "vim.version.version5", [["configSpec", "vim.vm.ConfigSpec", "vim.version.version5"], ["resPoolEntity", "vim.ResourcePool", "vim.version.version6", {:optional => true}]])
    create_managed_type("vim.vm.check.ProvisioningChecker", "VirtualMachineProvisioningChecker", "vmodl.ManagedObject", "vim.version.version5", nil, [["queryVMotionCompatibilityEx", "QueryVMotionCompatibilityEx_Task", "vim.version.version5", [["vm", "vim.VirtualMachine[]", "vim.version.version5", {}, nil], ["host", "vim.HostSystem[]", "vim.version.version5", {}, nil]], [{}, "vim.Task", "vim.vm.check.Result[]"], "System.View", nil], ["checkMigrate", "CheckMigrate_Task", "vim.version.version5", [["vm", "vim.VirtualMachine", "vim.version.version5", {}, nil], ["host", "vim.HostSystem", "vim.version.version5", {:optional => true}, nil], ["pool", "vim.ResourcePool", "vim.version.version5", {:optional => true}, nil], ["state", "vim.VirtualMachine.PowerState", "vim.version.version5", {:optional => true}, nil], ["testType", "string[]", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.Task", "vim.vm.check.Result[]"], "System.View", ["vim.fault.InvalidState"]], ["checkRelocate", "CheckRelocate_Task", "vim.version.version5", [["vm", "vim.VirtualMachine", "vim.version.version5", {}, nil], ["spec", "vim.vm.RelocateSpec", "vim.version.version5", {}, nil], ["testType", "string[]", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.Task", "vim.vm.check.Result[]"], "System.View", ["vim.fault.InvalidState"]]])
    create_data_type("vim.vm.device.VirtualCdrom", "VirtualCdrom", "vim.vm.device.VirtualDevice", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualCdrom.IsoBackingInfo", "VirtualCdromIsoBackingInfo", "vim.vm.device.VirtualDevice.FileBackingInfo", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualCdrom.PassthroughBackingInfo", "VirtualCdromPassthroughBackingInfo", "vim.vm.device.VirtualDevice.DeviceBackingInfo", "vim.version.version1", [["exclusive", "boolean", "vim.version.version1"]])
    create_data_type("vim.vm.device.VirtualCdrom.RemotePassthroughBackingInfo", "VirtualCdromRemotePassthroughBackingInfo", "vim.vm.device.VirtualDevice.RemoteDeviceBackingInfo", "vim.version.version1", [["exclusive", "boolean", "vim.version.version1"]])
    create_data_type("vim.vm.device.VirtualCdrom.AtapiBackingInfo", "VirtualCdromAtapiBackingInfo", "vim.vm.device.VirtualDevice.DeviceBackingInfo", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualCdrom.RemoteAtapiBackingInfo", "VirtualCdromRemoteAtapiBackingInfo", "vim.vm.device.VirtualDevice.RemoteDeviceBackingInfo", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualCdromOption", "VirtualCdromOption", "vim.vm.device.VirtualDeviceOption", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualCdromOption.IsoBackingOption", "VirtualCdromIsoBackingOption", "vim.vm.device.VirtualDeviceOption.FileBackingOption", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualCdromOption.PassthroughBackingOption", "VirtualCdromPassthroughBackingOption", "vim.vm.device.VirtualDeviceOption.DeviceBackingOption", "vim.version.version1", [["exclusive", "vim.option.BoolOption", "vim.version.version1"]])
    create_data_type("vim.vm.device.VirtualCdromOption.RemotePassthroughBackingOption", "VirtualCdromRemotePassthroughBackingOption", "vim.vm.device.VirtualDeviceOption.RemoteDeviceBackingOption", "vim.version.version1", [["exclusive", "vim.option.BoolOption", "vim.version.version1"]])
    create_data_type("vim.vm.device.VirtualCdromOption.AtapiBackingOption", "VirtualCdromAtapiBackingOption", "vim.vm.device.VirtualDeviceOption.DeviceBackingOption", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualCdromOption.RemoteAtapiBackingOption", "VirtualCdromRemoteAtapiBackingOption", "vim.vm.device.VirtualDeviceOption.DeviceBackingOption", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualController", "VirtualController", "vim.vm.device.VirtualDevice", "vim.version.version1", [["busNumber", "int", "vim.version.version1"], ["device", "int[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.vm.device.VirtualControllerOption", "VirtualControllerOption", "vim.vm.device.VirtualDeviceOption", "vim.version.version1", [["devices", "vim.option.IntOption", "vim.version.version1"], ["supportedDevice", "vmodl.TypeName[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.vm.device.VirtualE1000", "VirtualE1000", "vim.vm.device.VirtualEthernetCard", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualE1000Option", "VirtualE1000Option", "vim.vm.device.VirtualEthernetCardOption", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualE1000e", "VirtualE1000e", "vim.vm.device.VirtualEthernetCard", "vim.version.version7", nil)
    create_data_type("vim.vm.device.VirtualE1000eOption", "VirtualE1000eOption", "vim.vm.device.VirtualEthernetCardOption", "vim.version.version7", nil)
    create_data_type("vim.vm.device.VirtualEnsoniq1371", "VirtualEnsoniq1371", "vim.vm.device.VirtualSoundCard", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualEnsoniq1371Option", "VirtualEnsoniq1371Option", "vim.vm.device.VirtualSoundCardOption", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualHdAudioCard", "VirtualHdAudioCard", "vim.vm.device.VirtualSoundCard", "vim.version.version7", nil)
    create_data_type("vim.vm.device.VirtualHdAudioCardOption", "VirtualHdAudioCardOption", "vim.vm.device.VirtualSoundCardOption", "vim.version.version7", nil)
    create_data_type("vim.vm.device.VirtualIDEController", "VirtualIDEController", "vim.vm.device.VirtualController", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualIDEControllerOption", "VirtualIDEControllerOption", "vim.vm.device.VirtualControllerOption", "vim.version.version1", [["numIDEDisks", "vim.option.IntOption", "vim.version.version1"], ["numIDECdroms", "vim.option.IntOption", "vim.version.version1"]])
    create_data_type("vim.vm.device.VirtualPCIController", "VirtualPCIController", "vim.vm.device.VirtualController", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualPCIControllerOption", "VirtualPCIControllerOption", "vim.vm.device.VirtualControllerOption", "vim.version.version1", [["numSCSIControllers", "vim.option.IntOption", "vim.version.version1"], ["numEthernetCards", "vim.option.IntOption", "vim.version.version1"], ["numVideoCards", "vim.option.IntOption", "vim.version.version1"], ["numSoundCards", "vim.option.IntOption", "vim.version.version1"], ["numVmiRoms", "vim.option.IntOption", "vim.version.version2"], ["numVmciDevices", "vim.option.IntOption", "vim.version.version4"], ["numPCIPassthroughDevices", "vim.option.IntOption", "vim.version.version4"], ["numSasSCSIControllers", "vim.option.IntOption", "vim.version.version4"], ["numVmxnet3EthernetCards", "vim.option.IntOption", "vim.version.version4"], ["numParaVirtualSCSIControllers", "vim.option.IntOption", "vim.version.version4"], ["numSATAControllers", "vim.option.IntOption", "vim.version.version9"]])
    create_data_type("vim.vm.device.VirtualPS2Controller", "VirtualPS2Controller", "vim.vm.device.VirtualController", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualPS2ControllerOption", "VirtualPS2ControllerOption", "vim.vm.device.VirtualControllerOption", "vim.version.version1", [["numKeyboards", "vim.option.IntOption", "vim.version.version1"], ["numPointingDevices", "vim.option.IntOption", "vim.version.version1"]])
    create_data_type("vim.vm.device.VirtualSATAController", "VirtualSATAController", "vim.vm.device.VirtualController", "vim.version.version9", nil)
    create_data_type("vim.vm.device.VirtualSATAControllerOption", "VirtualSATAControllerOption", "vim.vm.device.VirtualControllerOption", "vim.version.version9", [["numSATADisks", "vim.option.IntOption", "vim.version.version9"], ["numSATACdroms", "vim.option.IntOption", "vim.version.version9"]])
    create_data_type("vim.vm.device.VirtualSCSIController", "VirtualSCSIController", "vim.vm.device.VirtualController", "vim.version.version1", [["hotAddRemove", "boolean", "vim.version.version1", {:optional => true}], ["sharedBus", "vim.vm.device.VirtualSCSIController.Sharing", "vim.version.version1"], ["scsiCtlrUnitNumber", "int", "vim.version.version1", {:optional => true}]])
    create_enum_type("vim.vm.device.VirtualSCSIController.Sharing", "VirtualSCSISharing", "vim.version.version1", ["noSharing", "virtualSharing", "physicalSharing"])
    create_data_type("vim.vm.device.VirtualSCSIControllerOption", "VirtualSCSIControllerOption", "vim.vm.device.VirtualControllerOption", "vim.version.version1", [["numSCSIDisks", "vim.option.IntOption", "vim.version.version1"], ["numSCSICdroms", "vim.option.IntOption", "vim.version.version1"], ["numSCSIPassthrough", "vim.option.IntOption", "vim.version.version1"], ["sharing", "vim.vm.device.VirtualSCSIController.Sharing[]", "vim.version.version1"], ["defaultSharedIndex", "int", "vim.version.version1"], ["hotAddRemove", "vim.option.BoolOption", "vim.version.version1"], ["scsiCtlrUnitNumber", "int", "vim.version.version1"]])
    create_data_type("vim.vm.device.VirtualSIOController", "VirtualSIOController", "vim.vm.device.VirtualController", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualSIOControllerOption", "VirtualSIOControllerOption", "vim.vm.device.VirtualControllerOption", "vim.version.version1", [["numFloppyDrives", "vim.option.IntOption", "vim.version.version1"], ["numSerialPorts", "vim.option.IntOption", "vim.version.version1"], ["numParallelPorts", "vim.option.IntOption", "vim.version.version1"]])
    create_data_type("vim.vm.device.VirtualSoundBlaster16", "VirtualSoundBlaster16", "vim.vm.device.VirtualSoundCard", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualSoundBlaster16Option", "VirtualSoundBlaster16Option", "vim.vm.device.VirtualSoundCardOption", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualUSBController", "VirtualUSBController", "vim.vm.device.VirtualController", "vim.version.version1", [["autoConnectDevices", "boolean", "vim.version.version1", {:optional => true}], ["ehciEnabled", "boolean", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.vm.device.VirtualUSBController.PciBusSlotInfo", "VirtualUSBControllerPciBusSlotInfo", "vim.vm.device.VirtualDevice.PciBusSlotInfo", "vim.version.version8", [["ehciPciSlotNumber", "int", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.vm.device.VirtualUSBControllerOption", "VirtualUSBControllerOption", "vim.vm.device.VirtualControllerOption", "vim.version.version1", [["autoConnectDevices", "vim.option.BoolOption", "vim.version.version1"], ["ehciSupported", "vim.option.BoolOption", "vim.version.version2"], ["supportedSpeeds", "string[]", "vim.version.version7"]])
    create_data_type("vim.vm.device.VirtualUSBXHCIController", "VirtualUSBXHCIController", "vim.vm.device.VirtualController", "vim.version.version7", [["autoConnectDevices", "boolean", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.vm.device.VirtualUSBXHCIControllerOption", "VirtualUSBXHCIControllerOption", "vim.vm.device.VirtualControllerOption", "vim.version.version7", [["autoConnectDevices", "vim.option.BoolOption", "vim.version.version7"], ["supportedSpeeds", "string[]", "vim.version.version7"]])
    create_data_type("vim.vm.device.VirtualVmxnet2Option", "VirtualVmxnet2Option", "vim.vm.device.VirtualVmxnetOption", "vim.version.version2", nil)
    create_data_type("vim.vm.device.VirtualVmxnet3Option", "VirtualVmxnet3Option", "vim.vm.device.VirtualVmxnetOption", "vim.version.version4", nil)
    create_managed_type("vim.ComputeResource", "ComputeResource", "vim.ManagedEntity", "vim.version.version1", [["resourcePool", "vim.ResourcePool", "vim.version.version1", {:optional => true}, "System.View"], ["host", "vim.HostSystem[]", "vim.version.version1", {:optional => true}, "System.View"], ["datastore", "vim.Datastore[]", "vim.version.version1", {:optional => true}, "System.View"], ["network", "vim.Network[]", "vim.version.version1", {:optional => true}, "System.View"], ["summary", "vim.ComputeResource.Summary", "vim.version.version1", {}, nil], ["environmentBrowser", "vim.EnvironmentBrowser", "vim.version.version1", {:optional => true}, "System.View"], ["configurationEx", "vim.ComputeResource.ConfigInfo", "vim.version.version2", {}, nil]], [["reconfigureEx", "ReconfigureComputeResource_Task", "vim.version.version2", [["spec", "vim.ComputeResource.ConfigSpec", "vim.version.version2", {}, nil], ["modify", "boolean", "vim.version.version2", {}, nil]], [{}, "vim.Task", "void"], "Host.Inventory.EditCluster", nil]])
    create_data_type("vim.ComputeResource.Summary", "ComputeResourceSummary", "vmodl.DynamicData", "vim.version.version1", [["totalCpu", "int", "vim.version.version1"], ["totalMemory", "long", "vim.version.version1"], ["numCpuCores", "short", "vim.version.version1"], ["numCpuThreads", "short", "vim.version.version1"], ["effectiveCpu", "int", "vim.version.version1"], ["effectiveMemory", "long", "vim.version.version1"], ["numHosts", "int", "vim.version.version1"], ["numEffectiveHosts", "int", "vim.version.version1"], ["overallStatus", "vim.ManagedEntity.Status", "vim.version.version1"]])
    create_data_type("vim.ComputeResource.ConfigInfo", "ComputeResourceConfigInfo", "vmodl.DynamicData", "vim.version.version2", [["vmSwapPlacement", "string", "vim.version.version2"], ["spbmEnabled", "boolean", "vim.version.version7", {:optional => true}], ["defaultHardwareVersionKey", "string", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.ComputeResource.HostSPBMLicenseInfo", "ComputeResourceHostSPBMLicenseInfo", "vmodl.DynamicData", "vim.version.version7", [["host", "vim.HostSystem", "vim.version.version7"], ["licenseState", "vim.ComputeResource.HostSPBMLicenseInfo.HostSPBMLicenseState", "vim.version.version7"]])
    create_enum_type("vim.ComputeResource.HostSPBMLicenseInfo.HostSPBMLicenseState", "ComputeResourceHostSPBMLicenseInfoHostSPBMLicenseState", "vim.version.version7", ["licensed", "unlicensed", "unknown"])
    create_data_type("vim.ComputeResource.ConfigSpec", "ComputeResourceConfigSpec", "vmodl.DynamicData", "vim.version.version2", [["vmSwapPlacement", "string", "vim.version.version2", {:optional => true}], ["spbmEnabled", "boolean", "vim.version.version7", {:optional => true}], ["defaultHardwareVersionKey", "string", "vim.version.version8", {:optional => true}]])
    create_managed_type("vim.Datacenter", "Datacenter", "vim.ManagedEntity", "vim.version.version1", [["vmFolder", "vim.Folder", "vim.version.version1", {}, "System.View"], ["hostFolder", "vim.Folder", "vim.version.version1", {}, "System.View"], ["datastoreFolder", "vim.Folder", "vim.version.version5", {}, "System.View"], ["networkFolder", "vim.Folder", "vim.version.version5", {}, "System.View"], ["datastore", "vim.Datastore[]", "vim.version.version1", {:optional => true}, nil], ["network", "vim.Network[]", "vim.version.version1", {:optional => true}, nil], ["configuration", "vim.Datacenter.ConfigInfo", "vim.version.version8", {}, "System.View"]], [["queryConnectionInfo", "QueryConnectionInfo", "vim.version.version1", [["hostname", "string", "vim.version.version1", {}, nil], ["port", "int", "vim.version.version1", {}, nil], ["username", "string", "vim.version.version1", {}, nil], ["password", "string", "vim.version.version1", {}, nil], ["sslThumbprint", "string", "vim.version.version2", {:optional => true}, nil]], [{}, "vim.host.ConnectInfo", "vim.host.ConnectInfo"], "System.View", ["vim.fault.InvalidLogin", "vim.fault.HostConnectFault"]], ["powerOnVm", "PowerOnMultiVM_Task", "vim.version.version2", [["vm", "vim.VirtualMachine[]", "vim.version.version2", {}, "VirtualMachine.Interact.PowerOn"], ["option", "vim.option.OptionValue[]", "vim.version.version6", {:optional => true}, nil]], [{}, "vim.Task", "vim.cluster.PowerOnVmResult"], "System.View", nil], ["queryConfigOptionDescriptor", "queryDatacenterConfigOptionDescriptor", "vim.version.version8", [], [{:optional => true}, "vim.vm.ConfigOptionDescriptor[]", "vim.vm.ConfigOptionDescriptor[]"], "System.View", nil], ["reconfigure", "ReconfigureDatacenter_Task", "vim.version.version8", [["spec", "vim.Datacenter.ConfigSpec", "vim.version.version8", {}, nil], ["modify", "boolean", "vim.version.version8", {}, nil]], [{}, "vim.Task", "void"], "Datacenter.Reconfigure", nil]])
    create_data_type("vim.Datacenter.ConfigInfo", "DatacenterConfigInfo", "vmodl.DynamicData", "vim.version.version8", [["defaultHardwareVersionKey", "string", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.Datacenter.ConfigSpec", "DatacenterConfigSpec", "vmodl.DynamicData", "vim.version.version8", [["defaultHardwareVersionKey", "string", "vim.version.version8", {:optional => true}]])
    create_managed_type("vim.Datastore", "Datastore", "vim.ManagedEntity", "vim.version.version1", [["info", "vim.Datastore.Info", "vim.version.version1", {}, nil], ["summary", "vim.Datastore.Summary", "vim.version.version1", {}, nil], ["host", "vim.Datastore.HostMount[]", "vim.version.version1", {:optional => true}, nil], ["vm", "vim.VirtualMachine[]", "vim.version.version1", {:optional => true}, nil], ["browser", "vim.host.DatastoreBrowser", "vim.version.version1", {}, nil], ["capability", "vim.Datastore.Capability", "vim.version.version1", {}, nil], ["iormConfiguration", "vim.StorageResourceManager.IORMConfigInfo", "vim.version.version6", {:optional => true}, nil]], [["refresh", "RefreshDatastore", "vim.version.version1", [], [{}, "void", "void"], "System.Read", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["refreshStorageInfo", "RefreshDatastoreStorageInfo", "vim.version.version5", [], [{}, "void", "void"], "System.Read", nil], ["updateVirtualMachineFiles", "UpdateVirtualMachineFiles_Task", "vim.version.version6", [["mountPathDatastoreMapping", "vim.Datastore.MountPathDatastorePair[]", "vim.version.version6", {}, nil]], [{}, "vim.Task", "vim.UpdateVirtualMachineFilesResult"], "Datastore.UpdateVirtualMachineFiles", ["vim.fault.ResourceInUse", "vim.fault.PlatformConfigFault", "vim.fault.TaskInProgress", "vim.fault.InvalidDatastore"]], ["renameDatastore", "RenameDatastore", "vim.version.version1", [["newName", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Datastore.Rename", ["vim.fault.DuplicateName", "vim.fault.InvalidName"]], ["destroyDatastore", "DestroyDatastore", "vim.version.version1", [], [{}, "void", "void"], "Datastore.Delete", ["vim.fault.ResourceInUse"]], ["enterMaintenanceMode", "DatastoreEnterMaintenanceMode", "vim.version.version7", [], [{}, "vim.storageDrs.StoragePlacementResult", "vim.storageDrs.StoragePlacementResult"], "Datastore.Config", ["vim.fault.InvalidState"]], ["exitMaintenanceMode", "DatastoreExitMaintenanceMode_Task", "vim.version.version7", [], [{}, "vim.Task", "void"], "Datastore.Config", ["vim.fault.InvalidState"]]])
    create_enum_type("vim.Datastore.Accessible", "DatastoreAccessible", "vim.version.version5", ["True", "False"])
    create_data_type("vim.Datastore.Summary", "DatastoreSummary", "vmodl.DynamicData", "vim.version.version1", [["datastore", "vim.Datastore", "vim.version.version1", {:optional => true}], ["name", "string", "vim.version.version1"], ["url", "string", "vim.version.version1"], ["capacity", "long", "vim.version.version1"], ["freeSpace", "long", "vim.version.version1"], ["uncommitted", "long", "vim.version.version5", {:optional => true}], ["accessible", "boolean", "vim.version.version1"], ["multipleHostAccess", "boolean", "vim.version.version1", {:optional => true}], ["type", "string", "vim.version.version1"], ["maintenanceMode", "string", "vim.version.version7", {:optional => true}]])
    create_enum_type("vim.Datastore.Summary.MaintenanceModeState", "DatastoreSummaryMaintenanceModeState", "vim.version.version7", ["normal", "enteringMaintenance", "inMaintenance"])
    create_data_type("vim.Datastore.Info", "DatastoreInfo", "vmodl.DynamicData", "vim.version.version1", [["name", "string", "vim.version.version1"], ["url", "string", "vim.version.version1"], ["freeSpace", "long", "vim.version.version1"], ["maxFileSize", "long", "vim.version.version1"], ["maxVirtualDiskCapacity", "long", "vim.version.version9", {:optional => true}], ["timestamp", "vmodl.DateTime", "vim.version.version5", {:optional => true}], ["containerId", "string", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.Datastore.Capability", "DatastoreCapability", "vmodl.DynamicData", "vim.version.version1", [["directoryHierarchySupported", "boolean", "vim.version.version1"], ["rawDiskMappingsSupported", "boolean", "vim.version.version1"], ["perFileThinProvisioningSupported", "boolean", "vim.version.version1"], ["storageIORMSupported", "boolean", "vim.version.version6"], ["nativeSnapshotSupported", "boolean", "vim.version.version8"], ["topLevelDirectoryCreateSupported", "boolean", "vim.version.version9", {:optional => true}], ["seSparseSupported", "boolean", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.Datastore.HostMount", "DatastoreHostMount", "vmodl.DynamicData", "vim.version.version1", [["key", "vim.HostSystem", "vim.version.version1"], ["mountInfo", "vim.host.MountInfo", "vim.version.version1"]])
    create_data_type("vim.Datastore.MountPathDatastorePair", "DatastoreMountPathDatastorePair", "vmodl.DynamicData", "vim.version.version6", [["oldMountPath", "string", "vim.version.version6"], ["datastore", "vim.Datastore", "vim.version.version6"]])
    create_managed_type("vim.DistributedVirtualSwitch", "DistributedVirtualSwitch", "vim.ManagedEntity", "vim.version.version5", [["uuid", "string", "vim.version.version5", {}, nil], ["capability", "vim.DistributedVirtualSwitch.Capability", "vim.version.version5", {}, nil], ["summary", "vim.DistributedVirtualSwitch.Summary", "vim.version.version5", {}, nil], ["config", "vim.DistributedVirtualSwitch.ConfigInfo", "vim.version.version5", {}, nil], ["networkResourcePool", "vim.dvs.NetworkResourcePool[]", "vim.version.version6", {:optional => true}, nil], ["portgroup", "vim.dvs.DistributedVirtualPortgroup[]", "vim.version.version5", {:optional => true}, nil], ["runtime", "vim.DistributedVirtualSwitch.RuntimeInfo", "vim.version.version8", {:optional => true}, nil]], [["fetchPortKeys", "FetchDVPortKeys", "vim.version.version5", [["criteria", "vim.dvs.PortCriteria", "vim.version.version5", {:optional => true}, nil]], [{:optional => true}, "string[]", "string[]"], "System.Read", nil], ["fetchPorts", "FetchDVPorts", "vim.version.version5", [["criteria", "vim.dvs.PortCriteria", "vim.version.version5", {:optional => true}, nil]], [{:optional => true}, "vim.dvs.DistributedVirtualPort[]", "vim.dvs.DistributedVirtualPort[]"], "System.Read", nil], ["queryUsedVlanId", "QueryUsedVlanIdInDvs", "vim.version.version5", [], [{:optional => true}, "int[]", "int[]"], "System.Read", nil], ["reconfigure", "ReconfigureDvs_Task", "vim.version.version5", [["spec", "vim.DistributedVirtualSwitch.ConfigSpec", "vim.version.version5", {}, nil]], [{}, "vim.Task", "void"], nil, ["vim.fault.DvsFault", "vim.fault.ConcurrentAccess", "vim.fault.DuplicateName", "vim.fault.InvalidState", "vim.fault.InvalidName", "vim.fault.NotFound", "vim.fault.AlreadyExists", "vim.fault.LimitExceeded", "vim.fault.ResourceInUse", "vim.fault.ResourceNotAvailable", "vim.fault.DvsNotAuthorized"]], ["performProductSpecOperation", "PerformDvsProductSpecOperation_Task", "vim.version.version5", [["operation", "string", "vim.version.version5", {}, nil], ["productSpec", "vim.dvs.ProductSpec", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.Task", "void"], "DVSwitch.Modify", ["vim.fault.TaskInProgress", "vim.fault.InvalidState", "vim.fault.DvsFault"]], ["merge", "MergeDvs_Task", "vim.version.version5", [["dvs", "vim.DistributedVirtualSwitch", "vim.version.version5", {}, "DVSwitch.Delete"]], [{}, "vim.Task", "void"], "DVSwitch.Modify", ["vim.fault.DvsFault", "vim.fault.NotFound", "vim.fault.ResourceInUse", "vim.fault.InvalidHostState"]], ["addPortgroups", "AddDVPortgroup_Task", "vim.version.version5", [["spec", "vim.dvs.DistributedVirtualPortgroup.ConfigSpec[]", "vim.version.version5", {}, nil]], [{}, "vim.Task", "void"], "DVPortgroup.Create", ["vim.fault.DvsFault", "vim.fault.DuplicateName", "vim.fault.InvalidName"]], ["movePort", "MoveDVPort_Task", "vim.version.version5", [["portKey", "string[]", "vim.version.version5", {}, nil], ["destinationPortgroupKey", "string", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.Task", "void"], "DVSwitch.Modify", ["vim.fault.DvsFault", "vim.fault.NotFound", "vim.fault.ConcurrentAccess"]], ["updateCapability", "UpdateDvsCapability", "vim.version.version5", [["capability", "vim.DistributedVirtualSwitch.Capability", "vim.version.version5", {}, nil]], [{}, "void", "void"], "DVSwitch.Modify", ["vim.fault.DvsFault"]], ["reconfigurePort", "ReconfigureDVPort_Task", "vim.version.version5", [["port", "vim.dvs.DistributedVirtualPort.ConfigSpec[]", "vim.version.version5", {}, nil]], [{}, "vim.Task", "void"], "DVSwitch.PortConfig", ["vim.fault.DvsFault", "vim.fault.NotFound", "vim.fault.ResourceInUse", "vim.fault.ConcurrentAccess"]], ["refreshPortState", "RefreshDVPortState", "vim.version.version5", [["portKeys", "string[]", "vim.version.version5", {:optional => true}, nil]], [{}, "void", "void"], "System.Read", ["vim.fault.DvsFault", "vim.fault.NotFound"]], ["rectifyHost", "RectifyDvsHost_Task", "vim.version.version5", [["hosts", "vim.HostSystem[]", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.Task", "void"], "System.Read", ["vim.fault.DvsFault", "vim.fault.NotFound"]], ["updateNetworkResourcePool", "UpdateNetworkResourcePool", "vim.version.version6", [["configSpec", "vim.dvs.NetworkResourcePool.ConfigSpec[]", "vim.version.version6", {}, nil]], [{}, "void", "void"], "DVSwitch.ResourceManagement", ["vim.fault.DvsFault", "vim.fault.NotFound", "vim.fault.InvalidName", "vim.fault.ConcurrentAccess"]], ["addNetworkResourcePool", "AddNetworkResourcePool", "vim.version.version7", [["configSpec", "vim.dvs.NetworkResourcePool.ConfigSpec[]", "vim.version.version7", {}, nil]], [{}, "void", "void"], "DVSwitch.ResourceManagement", ["vim.fault.DvsFault", "vim.fault.InvalidName"]], ["removeNetworkResourcePool", "RemoveNetworkResourcePool", "vim.version.version7", [["key", "string[]", "vim.version.version7", {}, nil]], [{}, "void", "void"], "DVSwitch.ResourceManagement", ["vim.fault.DvsFault", "vim.fault.NotFound", "vim.fault.InvalidName", "vim.fault.ResourceInUse"]], ["enableNetworkResourceManagement", "EnableNetworkResourceManagement", "vim.version.version6", [["enable", "boolean", "vim.version.version6", {}, nil]], [{}, "void", "void"], "DVSwitch.ResourceManagement", ["vim.fault.DvsFault"]], ["rollback", "DVSRollback_Task", "vim.version.version8", [["entityBackup", "vim.dvs.EntityBackup.Config", "vim.version.version8", {:optional => true}, nil]], [{:optional => true}, "vim.Task", "vim.DistributedVirtualSwitch.ConfigSpec"], nil, ["vim.fault.DvsFault", "vim.fault.RollbackFailure"]], ["addPortgroup", "CreateDVPortgroup_Task", "vim.version.version8", [["spec", "vim.dvs.DistributedVirtualPortgroup.ConfigSpec", "vim.version.version8", {}, nil]], [{}, "vim.Task", "vim.dvs.DistributedVirtualPortgroup"], "DVPortgroup.Create", ["vim.fault.DvsFault", "vim.fault.DuplicateName", "vim.fault.InvalidName"]], ["updateHealthCheckConfig", "UpdateDVSHealthCheckConfig_Task", "vim.version.version8", [["healthCheckConfig", "vim.DistributedVirtualSwitch.HealthCheckConfig[]", "vim.version.version8", {}, nil]], [{}, "vim.Task", "void"], "DVSwitch.Modify", ["vim.fault.DvsFault"]], ["lookupPortgroup", "LookupDvPortGroup", "vim.version.version8", [["portgroupKey", "string", "vim.version.version8", {}, nil]], [{:optional => true}, "vim.dvs.DistributedVirtualPortgroup", "vim.dvs.DistributedVirtualPortgroup"], "System.Read", ["vim.fault.NotFound"]]])
    create_enum_type("vim.DistributedVirtualSwitch.ProductSpecOperationType", "DistributedVirtualSwitchProductSpecOperationType", "vim.version.version5", ["preInstall", "upgrade", "notifyAvailableUpgrade", "proceedWithUpgrade", "updateBundleInfo"])
    create_data_type("vim.DistributedVirtualSwitch.ContactInfo", "DVSContactInfo", "vmodl.DynamicData", "vim.version.version5", [["name", "string", "vim.version.version5", {:optional => true}], ["contact", "string", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.DistributedVirtualSwitch.NicTeamingPolicyMode", "DistributedVirtualSwitchNicTeamingPolicyMode", "vim.version.version6", ["loadbalance_ip", "loadbalance_srcmac", "loadbalance_srcid", "failover_explicit", "loadbalance_loadbased"])
    create_data_type("vim.DistributedVirtualSwitch.NetworkResourceManagementCapability", "DVSNetworkResourceManagementCapability", "vmodl.DynamicData", "vim.version.version7", [["networkResourceManagementSupported", "boolean", "vim.version.version7"], ["networkResourcePoolHighShareValue", "int", "vim.version.version7"], ["qosSupported", "boolean", "vim.version.version7"], ["userDefinedNetworkResourcePoolsSupported", "boolean", "vim.version.version7"]])
    create_data_type("vim.DistributedVirtualSwitch.RollbackCapability", "DVSRollbackCapability", "vmodl.DynamicData", "vim.version.version8", [["rollbackSupported", "boolean", "vim.version.version8"]])
    create_data_type("vim.DistributedVirtualSwitch.BackupRestoreCapability", "DVSBackupRestoreCapability", "vmodl.DynamicData", "vim.version.version8", [["backupRestoreSupported", "boolean", "vim.version.version8"]])
    create_data_type("vim.DistributedVirtualSwitch.FeatureCapability", "DVSFeatureCapability", "vmodl.DynamicData", "vim.version.version6", [["networkResourceManagementSupported", "boolean", "vim.version.version6"], ["vmDirectPathGen2Supported", "boolean", "vim.version.version6"], ["nicTeamingPolicy", "string[]", "vim.version.version6", {:optional => true}], ["networkResourcePoolHighShareValue", "int", "vim.version.version6", {:optional => true}], ["networkResourceManagementCapability", "vim.DistributedVirtualSwitch.NetworkResourceManagementCapability", "vim.version.version7", {:optional => true}], ["healthCheckCapability", "vim.DistributedVirtualSwitch.HealthCheckFeatureCapability", "vim.version.version8", {:optional => true}], ["rollbackCapability", "vim.DistributedVirtualSwitch.RollbackCapability", "vim.version.version8", {:optional => true}], ["backupRestoreCapability", "vim.DistributedVirtualSwitch.BackupRestoreCapability", "vim.version.version8", {:optional => true}], ["networkFilterSupported", "boolean", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.DistributedVirtualSwitch.HealthCheckFeatureCapability", "DVSHealthCheckCapability", "vmodl.DynamicData", "vim.version.version8", nil)
    create_data_type("vim.DistributedVirtualSwitch.Capability", "DVSCapability", "vmodl.DynamicData", "vim.version.version5", [["dvsOperationSupported", "boolean", "vim.version.version5", {:optional => true}], ["dvPortGroupOperationSupported", "boolean", "vim.version.version5", {:optional => true}], ["dvPortOperationSupported", "boolean", "vim.version.version5", {:optional => true}], ["compatibleHostComponentProductInfo", "vim.dvs.HostProductSpec[]", "vim.version.version5", {:optional => true}], ["featuresSupported", "vim.DistributedVirtualSwitch.FeatureCapability", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.DistributedVirtualSwitch.Summary", "DVSSummary", "vmodl.DynamicData", "vim.version.version5", [["name", "string", "vim.version.version5"], ["uuid", "string", "vim.version.version5"], ["numPorts", "int", "vim.version.version5"], ["productInfo", "vim.dvs.ProductSpec", "vim.version.version5", {:optional => true}], ["hostMember", "vim.HostSystem[]", "vim.version.version5", {:optional => true}], ["vm", "vim.VirtualMachine[]", "vim.version.version5", {:optional => true}], ["host", "vim.HostSystem[]", "vim.version.version5", {:optional => true}], ["portgroupName", "string[]", "vim.version.version5", {:optional => true}], ["description", "string", "vim.version.version5", {:optional => true}], ["contact", "vim.DistributedVirtualSwitch.ContactInfo", "vim.version.version5", {:optional => true}], ["numHosts", "int", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.DistributedVirtualSwitch.SwitchPolicy", "DVSPolicy", "vmodl.DynamicData", "vim.version.version5", [["autoPreInstallAllowed", "boolean", "vim.version.version5", {:optional => true}], ["autoUpgradeAllowed", "boolean", "vim.version.version5", {:optional => true}], ["partialUpgradeAllowed", "boolean", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.DistributedVirtualSwitch.UplinkPortPolicy", "DVSUplinkPortPolicy", "vmodl.DynamicData", "vim.version.version5", nil)
    create_data_type("vim.DistributedVirtualSwitch.NameArrayUplinkPortPolicy", "DVSNameArrayUplinkPortPolicy", "vim.DistributedVirtualSwitch.UplinkPortPolicy", "vim.version.version5", [["uplinkPortName", "string[]", "vim.version.version5"]])
    create_data_type("vim.DistributedVirtualSwitch.ConfigSpec", "DVSConfigSpec", "vmodl.DynamicData", "vim.version.version5", [["configVersion", "string", "vim.version.version5", {:optional => true}], ["name", "string", "vim.version.version5", {:optional => true}], ["numStandalonePorts", "int", "vim.version.version5", {:optional => true}], ["maxPorts", "int", "vim.version.version5", {:optional => true}], ["uplinkPortPolicy", "vim.DistributedVirtualSwitch.UplinkPortPolicy", "vim.version.version5", {:optional => true}], ["uplinkPortgroup", "vim.dvs.DistributedVirtualPortgroup[]", "vim.version.version5", {:optional => true}], ["defaultPortConfig", "vim.dvs.DistributedVirtualPort.Setting", "vim.version.version5", {:optional => true}], ["host", "vim.dvs.HostMember.ConfigSpec[]", "vim.version.version5", {:optional => true}], ["extensionKey", "string", "vim.version.version5", {:optional => true}], ["description", "string", "vim.version.version5", {:optional => true}], ["policy", "vim.DistributedVirtualSwitch.SwitchPolicy", "vim.version.version5", {:optional => true}], ["vendorSpecificConfig", "vim.dvs.KeyedOpaqueBlob[]", "vim.version.version5", {:optional => true}], ["contact", "vim.DistributedVirtualSwitch.ContactInfo", "vim.version.version5", {:optional => true}], ["switchIpAddress", "string", "vim.version.version7", {:optional => true}], ["defaultProxySwitchMaxNumPorts", "int", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.DistributedVirtualSwitch.CreateSpec", "DVSCreateSpec", "vmodl.DynamicData", "vim.version.version5", [["configSpec", "vim.DistributedVirtualSwitch.ConfigSpec", "vim.version.version5"], ["productInfo", "vim.dvs.ProductSpec", "vim.version.version5", {:optional => true}], ["capability", "vim.DistributedVirtualSwitch.Capability", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.DistributedVirtualSwitch.ConfigInfo", "DVSConfigInfo", "vmodl.DynamicData", "vim.version.version5", [["uuid", "string", "vim.version.version5"], ["name", "string", "vim.version.version5"], ["numStandalonePorts", "int", "vim.version.version5"], ["numPorts", "int", "vim.version.version5"], ["maxPorts", "int", "vim.version.version5"], ["uplinkPortPolicy", "vim.DistributedVirtualSwitch.UplinkPortPolicy", "vim.version.version5"], ["uplinkPortgroup", "vim.dvs.DistributedVirtualPortgroup[]", "vim.version.version5", {:optional => true}], ["defaultPortConfig", "vim.dvs.DistributedVirtualPort.Setting", "vim.version.version5"], ["host", "vim.dvs.HostMember[]", "vim.version.version5", {:optional => true}], ["productInfo", "vim.dvs.ProductSpec", "vim.version.version5"], ["targetInfo", "vim.dvs.ProductSpec", "vim.version.version5", {:optional => true}], ["extensionKey", "string", "vim.version.version5", {:optional => true}], ["vendorSpecificConfig", "vim.dvs.KeyedOpaqueBlob[]", "vim.version.version5", {:optional => true}], ["policy", "vim.DistributedVirtualSwitch.SwitchPolicy", "vim.version.version5", {:optional => true}], ["description", "string", "vim.version.version5", {:optional => true}], ["configVersion", "string", "vim.version.version5"], ["contact", "vim.DistributedVirtualSwitch.ContactInfo", "vim.version.version5"], ["switchIpAddress", "string", "vim.version.version7", {:optional => true}], ["createTime", "vmodl.DateTime", "vim.version.version5"], ["networkResourceManagementEnabled", "boolean", "vim.version.version6"], ["defaultProxySwitchMaxNumPorts", "int", "vim.version.version8", {:optional => true}], ["healthCheckConfig", "vim.DistributedVirtualSwitch.HealthCheckConfig[]", "vim.version.version8", {:optional => true}]])
    create_enum_type("vim.DistributedVirtualSwitch.HostInfrastructureTrafficClass", "DistributedVirtualSwitchHostInfrastructureTrafficClass", "vim.version.version9", ["management", "faultTolerance", "vmotion", "virtualMachine", "iSCSI", "nfs", "hbr", "vsan"])
    create_data_type("vim.DistributedVirtualSwitch.HealthCheckConfig", "DVSHealthCheckConfig", "vmodl.DynamicData", "vim.version.version8", [["enable", "boolean", "vim.version.version8", {:optional => true}], ["interval", "int", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.DistributedVirtualSwitch.RuntimeInfo", "DVSRuntimeInfo", "vmodl.DynamicData", "vim.version.version8", [["hostMemberRuntime", "vim.dvs.HostMember.RuntimeInfo[]", "vim.version.version8", {:optional => true}]])
    create_managed_type("vim.Folder", "Folder", "vim.ManagedEntity", "vim.version.version1", [["childType", "vmodl.TypeName[]", "vim.version.version1", {:optional => true}, "System.View"], ["childEntity", "vim.ManagedEntity[]", "vim.version.version1", {:optional => true}, "System.View"]], [["createFolder", "CreateFolder", "vim.version.version1", [["name", "string", "vim.version.version1", {}, nil]], [{}, "vim.Folder", "vim.Folder"], "Folder.Create", ["vim.fault.DuplicateName", "vim.fault.InvalidName"]], ["moveInto", "MoveIntoFolder_Task", "vim.version.version1", [["list", "vim.ManagedEntity[]", "vim.version.version1", {}, nil]], [{}, "vim.Task", "void"], nil, ["vim.fault.DuplicateName", "vim.fault.InvalidFolder", "vim.fault.InvalidState"]], ["createVm", "CreateVM_Task", "vim.version.version1", [["config", "vim.vm.ConfigSpec", "vim.version.version1", {}, nil], ["pool", "vim.ResourcePool", "vim.version.version1", {}, "Resource.AssignVMToPool"], ["host", "vim.HostSystem", "vim.version.version1", {:optional => true}, nil]], [{}, "vim.Task", "vim.VirtualMachine"], "VirtualMachine.Inventory.Create", ["vim.fault.VmConfigFault", "vim.fault.FileFault", "vim.fault.OutOfBounds", "vim.fault.DuplicateName", "vim.fault.InvalidName", "vim.fault.InvalidDatastore", "vim.fault.InsufficientResourcesFault", "vim.fault.AlreadyExists", "vim.fault.InvalidState"]], ["registerVm", "RegisterVM_Task", "vim.version.version1", [["path", "string", "vim.version.version1", {}, nil], ["name", "string", "vim.version.version1", {:optional => true}, nil], ["asTemplate", "boolean", "vim.version.version1", {}, nil], ["pool", "vim.ResourcePool", "vim.version.version1", {:optional => true}, "Resource.AssignVMToPool"], ["host", "vim.HostSystem", "vim.version.version1", {:optional => true}, nil]], [{}, "vim.Task", "vim.VirtualMachine"], "VirtualMachine.Inventory.Register", ["vim.fault.OutOfBounds", "vim.fault.DuplicateName", "vim.fault.AlreadyExists", "vim.fault.InvalidDatastore", "vim.fault.NotFound", "vim.fault.InvalidName", "vim.fault.VmConfigFault", "vim.fault.InsufficientResourcesFault", "vim.fault.FileFault", "vim.fault.InvalidState"]], ["createCluster", "CreateCluster", "vim.version.version1", [["name", "string", "vim.version.version1", {}, nil], ["spec", "vim.cluster.ConfigSpec", "vim.version.version1", {}, nil]], [{}, "vim.ClusterComputeResource", "vim.ClusterComputeResource"], "Host.Inventory.CreateCluster", ["vim.fault.DuplicateName", "vim.fault.InvalidName"]], ["createClusterEx", "CreateClusterEx", "vim.version.version2", [["name", "string", "vim.version.version2", {}, nil], ["spec", "vim.cluster.ConfigSpecEx", "vim.version.version2", {}, nil]], [{}, "vim.ClusterComputeResource", "vim.ClusterComputeResource"], "Host.Inventory.CreateCluster", ["vim.fault.DuplicateName", "vim.fault.InvalidName"]], ["addStandaloneHost", "AddStandaloneHost_Task", "vim.version.version1", [["spec", "vim.host.ConnectSpec", "vim.version.version1", {}, nil], ["compResSpec", "vim.ComputeResource.ConfigSpec", "vim.version.version2", {:optional => true}, nil], ["addConnected", "boolean", "vim.version.version1", {}, nil], ["license", "string", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.Task", "vim.ComputeResource"], "Host.Inventory.AddStandaloneHost", ["vim.fault.InvalidLogin", "vim.fault.HostConnectFault", "vim.fault.DuplicateName"]], ["createDatacenter", "CreateDatacenter", "vim.version.version1", [["name", "string", "vim.version.version1", {}, nil]], [{}, "vim.Datacenter", "vim.Datacenter"], "Datacenter.Create", ["vim.fault.DuplicateName", "vim.fault.InvalidName"]], ["unregisterAndDestroy", "UnregisterAndDestroy_Task", "vim.version.version1", [], [{}, "vim.Task", "void"], "Folder.Delete", ["vim.fault.ConcurrentAccess", "vim.fault.InvalidState"]], ["createDistributedVirtualSwitch", "CreateDVS_Task", "vim.version.version5", [["spec", "vim.DistributedVirtualSwitch.CreateSpec", "vim.version.version5", {}, nil]], [{}, "vim.Task", "vim.DistributedVirtualSwitch"], "DVSwitch.Create", ["vim.fault.DvsFault", "vim.fault.DuplicateName", "vim.fault.InvalidName", "vim.fault.NotFound", "vim.fault.DvsNotAuthorized"]], ["createStoragePod", "CreateStoragePod", "vim.version.version7", [["name", "string", "vim.version.version7", {}, nil]], [{}, "vim.StoragePod", "vim.StoragePod"], "Folder.Create", ["vim.fault.DuplicateName", "vim.fault.InvalidName"]]])
    create_managed_type("vim.HostSystem", "HostSystem", "vim.ManagedEntity", "vim.version.version1", [["runtime", "vim.host.RuntimeInfo", "vim.version.version1", {}, nil], ["summary", "vim.host.Summary", "vim.version.version1", {}, nil], ["hardware", "vim.host.HardwareInfo", "vim.version.version1", {:optional => true}, nil], ["capability", "vim.host.Capability", "vim.version.version1", {:optional => true}, nil], ["licensableResource", "vim.LicenseManager.LicensableResourceInfo", "vim.version.version7", {}, nil], ["configManager", "vim.host.ConfigManager", "vim.version.version1", {}, nil], ["config", "vim.host.ConfigInfo", "vim.version.version1", {:optional => true}, nil], ["vm", "vim.VirtualMachine[]", "vim.version.version1", {:optional => true}, nil], ["datastore", "vim.Datastore[]", "vim.version.version1", {:optional => true}, "System.View"], ["network", "vim.Network[]", "vim.version.version1", {:optional => true}, "System.View"], ["datastoreBrowser", "vim.host.DatastoreBrowser", "vim.version.version1", {}, "System.View"], ["systemResources", "vim.host.SystemResourceInfo", "vim.version.version1", {:optional => true}, nil]], [["queryTpmAttestationReport", "QueryTpmAttestationReport", "vim.version.version8", [], [{:optional => true}, "vim.host.TpmAttestationReport", "vim.host.TpmAttestationReport"], "System.Read", nil], ["queryConnectionInfo", "QueryHostConnectionInfo", "vim.version.version1", [], [{}, "vim.host.ConnectInfo", "vim.host.ConnectInfo"], "System.Read", nil], ["updateSystemResources", "UpdateSystemResources", "vim.version.version1", [["resourceInfo", "vim.host.SystemResourceInfo", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.Resources", nil], ["updateSystemSwapConfiguration", "UpdateSystemSwapConfiguration", "vim.version.version8", [["sysSwapConfig", "vim.host.SystemSwapConfiguration", "vim.version.version8", {}, nil]], [{}, "void", "void"], "Host.Config.Settings", nil], ["reconnect", "ReconnectHost_Task", "vim.version.version1", [["cnxSpec", "vim.host.ConnectSpec", "vim.version.version1", {:optional => true}, nil], ["reconnectSpec", "vim.HostSystem.ReconnectSpec", "vim.version.version7", {:optional => true}, nil]], [{}, "vim.Task", "void"], "Host.Config.Connection", ["vim.fault.InvalidLogin", "vim.fault.InvalidState", "vim.fault.InvalidName", "vim.fault.HostConnectFault"]], ["disconnect", "DisconnectHost_Task", "vim.version.version1", [], [{}, "vim.Task", "void"], "Host.Config.Connection", nil], ["enterMaintenanceMode", "EnterMaintenanceMode_Task", "vim.version.version1", [["timeout", "int", "vim.version.version1", {}, nil], ["evacuatePoweredOffVms", "boolean", "vim.version.version2", {:optional => true}, nil], ["maintenanceSpec", "vim.host.MaintenanceSpec", "vim.version.version9", {:optional => true}, nil]], [{}, "vim.Task", "void"], "Host.Config.Maintenance", ["vim.fault.InvalidState", "vim.fault.Timedout"]], ["exitMaintenanceMode", "ExitMaintenanceMode_Task", "vim.version.version1", [["timeout", "int", "vim.version.version1", {}, nil]], [{}, "vim.Task", "void"], "Host.Config.Maintenance", ["vim.fault.InvalidState", "vim.fault.Timedout"]], ["reboot", "RebootHost_Task", "vim.version.version1", [["force", "boolean", "vim.version.version1", {}, nil]], [{}, "vim.Task", "void"], "Host.Config.Maintenance", ["vim.fault.InvalidState"]], ["shutdown", "ShutdownHost_Task", "vim.version.version1", [["force", "boolean", "vim.version.version1", {}, nil]], [{}, "vim.Task", "void"], "Host.Config.Maintenance", ["vim.fault.InvalidState"]], ["enterStandbyMode", "PowerDownHostToStandBy_Task", "vim.version.version2", [["timeoutSec", "int", "vim.version.version2", {}, nil], ["evacuatePoweredOffVms", "boolean", "vim.version.version2", {:optional => true}, nil]], [{}, "vim.Task", "void"], "Host.Config.Maintenance", ["vim.fault.HostPowerOpFailed", "vim.fault.InvalidState", "vmodl.fault.NotSupported", "vim.fault.Timedout", "vmodl.fault.RequestCanceled"]], ["exitStandbyMode", "PowerUpHostFromStandBy_Task", "vim.version.version2", [["timeoutSec", "int", "vim.version.version2", {}, nil]], [{}, "vim.Task", "void"], "Host.Config.Maintenance", ["vim.fault.HostPowerOpFailed", "vim.fault.InvalidState", "vmodl.fault.NotSupported", "vim.fault.Timedout"]], ["queryOverhead", "QueryMemoryOverhead", "vim.version.version1", [["memorySize", "long", "vim.version.version1", {}, nil], ["videoRamSize", "int", "vim.version.version1", {:optional => true}, nil], ["numVcpus", "int", "vim.version.version1", {}, nil]], [{}, "long", "long"], "System.Read", nil], ["queryOverheadEx", "QueryMemoryOverheadEx", "vim.version.version2", [["vmConfigInfo", "vim.vm.ConfigInfo", "vim.version.version2", {}, nil]], [{}, "long", "long"], "System.Read", nil], ["reconfigureDAS", "ReconfigureHostForDAS_Task", "vim.version.version1", [], [{}, "vim.Task", "void"], "Host.Config.Connection", ["vim.fault.DasConfigFault"]], ["updateFlags", "UpdateFlags", "vim.version.version2", [["flagInfo", "vim.host.FlagInfo", "vim.version.version2", {}, nil]], [{}, "void", "void"], "Host.Config.Settings", nil], ["enterLockdownMode", "EnterLockdownMode", "vim.version.version6", [], [{}, "void", "void"], "Host.Config.Settings", ["vim.fault.HostConfigFault"]], ["exitLockdownMode", "ExitLockdownMode", "vim.version.version6", [], [{}, "void", "void"], "Host.Config.Settings", ["vim.fault.HostConfigFault"]], ["acquireCimServicesTicket", "AcquireCimServicesTicket", "vim.version.version2", [], [{}, "vim.HostServiceTicket", "vim.HostServiceTicket"], "Host.Cim.CimInteraction", nil], ["updateIpmi", "UpdateIpmi", "vim.version.version5", [["ipmiInfo", "vim.host.IpmiInfo", "vim.version.version5", {}, nil]], [{}, "void", "void"], "Host.Config.Settings", ["vim.fault.InvalidIpmiLoginInfo", "vim.fault.InvalidIpmiMacAddress"]], ["retrieveHardwareUptime", "RetrieveHardwareUptime", "vim.version.version6", [], [{}, "long", "long"], "System.Read", nil]])
    create_enum_type("vim.HostSystem.ConnectionState", "HostSystemConnectionState", "vim.version.version1", ["connected", "notResponding", "disconnected"])
    create_enum_type("vim.HostSystem.PowerState", "HostSystemPowerState", "vim.version.version2", ["poweredOn", "poweredOff", "standBy", "unknown"])
    create_enum_type("vim.HostSystem.StandbyMode", "HostStandbyMode", "vim.version.version6", ["entering", "exiting", "in", "none"])
    create_data_type("vim.HostSystem.ReconnectSpec", "HostSystemReconnectSpec", "vmodl.DynamicData", "vim.version.version7", [["syncState", "boolean", "vim.version.version7", {:optional => true}]])
    create_managed_type("vim.ServiceInstance", "ServiceInstance", "vmodl.ManagedObject", "vim.version.version1", [["serverClock", "vmodl.DateTime", "vim.version.version1", {}, "System.View"], ["capability", "vim.Capability", "vim.version.version1", {}, "System.View"], ["content", "vim.ServiceInstanceContent", "vim.version.version1", {}, "System.Anonymous"]], [["currentTime", "CurrentTime", "vim.version.version1", [], [{}, "vmodl.DateTime", "vmodl.DateTime"], "System.View", nil], ["retrieveContent", "RetrieveServiceContent", "vim.version.version1", [], [{}, "vim.ServiceInstanceContent", "vim.ServiceInstanceContent"], "System.Anonymous", nil], ["validateMigration", "ValidateMigration", "vim.version.version1", [["vm", "vim.VirtualMachine[]", "vim.version.version1", {}, nil], ["state", "vim.VirtualMachine.PowerState", "vim.version.version1", {:optional => true}, nil], ["testType", "string[]", "vim.version.version1", {:optional => true}, nil], ["pool", "vim.ResourcePool", "vim.version.version1", {:optional => true}, nil], ["host", "vim.HostSystem", "vim.version.version1", {:optional => true}, nil]], [{:optional => true}, "vim.event.Event[]", "vim.event.Event[]"], "System.View", ["vim.fault.InvalidState"]], ["queryVMotionCompatibility", "QueryVMotionCompatibility", "vim.version.version1", [["vm", "vim.VirtualMachine", "vim.version.version1", {}, nil], ["host", "vim.HostSystem[]", "vim.version.version1", {}, nil], ["compatibility", "string[]", "vim.version.version1", {:optional => true}, nil]], [{:optional => true}, "vim.ServiceInstance.HostVMotionCompatibility[]", "vim.ServiceInstance.HostVMotionCompatibility[]"], "Resource.QueryVMotion", nil], ["retrieveProductComponents", "RetrieveProductComponents", "vim.version.version2", [], [{:optional => true}, "vim.ServiceInstance.ProductComponentInfo[]", "vim.ServiceInstance.ProductComponentInfo[]"], "System.Anonymous", nil]])
    create_enum_type("vim.ServiceInstance.ValidateMigrationTestType", "ValidateMigrationTestType", "vim.version.version1", ["sourceTests", "compatibilityTests", "diskAccessibilityTests", "resourceTests"])
    create_enum_type("vim.ServiceInstance.VMotionCompatibilityType", "VMotionCompatibilityType", "vim.version.version1", ["cpu", "software"])
    create_data_type("vim.ServiceInstance.HostVMotionCompatibility", "HostVMotionCompatibility", "vmodl.DynamicData", "vim.version.version1", [["host", "vim.HostSystem", "vim.version.version1"], ["compatibility", "string[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.ServiceInstance.ProductComponentInfo", "ProductComponentInfo", "vmodl.DynamicData", "vim.version.version2", [["id", "string", "vim.version.version2"], ["name", "string", "vim.version.version2"], ["version", "string", "vim.version.version2"], ["release", "int", "vim.version.version2"]])
    create_managed_type("vim.StoragePod", "StoragePod", "vim.Folder", "vim.version.version7", [["summary", "vim.StoragePod.Summary", "vim.version.version7", {:optional => true}, "System.View"], ["podStorageDrsEntry", "vim.StorageResourceManager.PodStorageDrsEntry", "vim.version.version7", {:optional => true}, "System.Read"]], nil)
    create_data_type("vim.StoragePod.Summary", "StoragePodSummary", "vmodl.DynamicData", "vim.version.version7", [["name", "string", "vim.version.version7"], ["capacity", "long", "vim.version.version7"], ["freeSpace", "long", "vim.version.version7"]])
    create_data_type("vim.cluster.AffinityRuleSpec", "ClusterAffinityRuleSpec", "vim.cluster.RuleInfo", "vim.version.version1", [["vm", "vim.VirtualMachine[]", "vim.version.version1"]])
    create_data_type("vim.cluster.AntiAffinityRuleSpec", "ClusterAntiAffinityRuleSpec", "vim.cluster.RuleInfo", "vim.version.version1", [["vm", "vim.VirtualMachine[]", "vim.version.version1"]])
    create_data_type("vim.cluster.ConfigInfoEx", "ClusterConfigInfoEx", "vim.ComputeResource.ConfigInfo", "vim.version.version2", [["dasConfig", "vim.cluster.DasConfigInfo", "vim.version.version2"], ["dasVmConfig", "vim.cluster.DasVmConfigInfo[]", "vim.version.version2", {:optional => true}], ["drsConfig", "vim.cluster.DrsConfigInfo", "vim.version.version2"], ["drsVmConfig", "vim.cluster.DrsVmConfigInfo[]", "vim.version.version2", {:optional => true}], ["rule", "vim.cluster.RuleInfo[]", "vim.version.version2", {:optional => true}], ["dpmConfigInfo", "vim.cluster.DpmConfigInfo", "vim.version.version2", {:optional => true}], ["dpmHostConfig", "vim.cluster.DpmHostConfigInfo[]", "vim.version.version2", {:optional => true}], ["vsanConfigInfo", "vim.vsan.cluster.ConfigInfo", "vim.version.version9", {:optional => true}], ["vsanHostConfig", "vim.vsan.host.ConfigInfo[]", "vim.version.version9", {:optional => true}], ["group", "vim.cluster.GroupInfo[]", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.cluster.ConfigSpecEx", "ClusterConfigSpecEx", "vim.ComputeResource.ConfigSpec", "vim.version.version2", [["dasConfig", "vim.cluster.DasConfigInfo", "vim.version.version2", {:optional => true}], ["dasVmConfigSpec", "vim.cluster.DasVmConfigSpec[]", "vim.version.version2", {:optional => true}], ["drsConfig", "vim.cluster.DrsConfigInfo", "vim.version.version2", {:optional => true}], ["drsVmConfigSpec", "vim.cluster.DrsVmConfigSpec[]", "vim.version.version2", {:optional => true}], ["rulesSpec", "vim.cluster.RuleSpec[]", "vim.version.version2", {:optional => true}], ["dpmConfig", "vim.cluster.DpmConfigInfo", "vim.version.version2", {:optional => true}], ["dpmHostConfigSpec", "vim.cluster.DpmHostConfigSpec[]", "vim.version.version2", {:optional => true}], ["vsanConfig", "vim.vsan.cluster.ConfigInfo", "vim.version.version9", {:optional => true}], ["vsanHostConfigSpec", "vim.vsan.host.ConfigInfo[]", "vim.version.version9", {:optional => true}], ["groupSpec", "vim.cluster.GroupSpec[]", "vim.version.version6", {:optional => true}]])
    create_managed_type("vim.dvs.DistributedVirtualSwitchManager", "DistributedVirtualSwitchManager", "vmodl.ManagedObject", "vim.version.version5", nil, [["querySupportedSwitchSpec", "QueryAvailableDvsSpec", "vim.version.version5", [], [{:optional => true}, "vim.dvs.ProductSpec[]", "vim.dvs.ProductSpec[]"], "System.View", nil], ["queryCompatibleHostForNewDvs", "QueryCompatibleHostForNewDvs", "vim.version.version5", [["container", "vim.ManagedEntity", "vim.version.version5", {}, nil], ["recursive", "boolean", "vim.version.version5", {}, nil], ["switchProductSpec", "vim.dvs.ProductSpec", "vim.version.version5", {:optional => true}, nil]], [{:optional => true}, "vim.HostSystem[]", "vim.HostSystem[]"], "System.View", nil], ["queryCompatibleHostForExistingDvs", "QueryCompatibleHostForExistingDvs", "vim.version.version5", [["container", "vim.ManagedEntity", "vim.version.version5", {}, nil], ["recursive", "boolean", "vim.version.version5", {}, nil], ["dvs", "vim.DistributedVirtualSwitch", "vim.version.version5", {}, nil]], [{:optional => true}, "vim.HostSystem[]", "vim.HostSystem[]"], "System.View", nil], ["queryCompatibleHostSpec", "QueryDvsCompatibleHostSpec", "vim.version.version5", [["switchProductSpec", "vim.dvs.ProductSpec", "vim.version.version5", {:optional => true}, nil]], [{:optional => true}, "vim.dvs.HostProductSpec[]", "vim.dvs.HostProductSpec[]"], "System.View", nil], ["queryFeatureCapability", "QueryDvsFeatureCapability", "vim.version.version6", [["switchProductSpec", "vim.dvs.ProductSpec", "vim.version.version6", {:optional => true}, nil]], [{:optional => true}, "vim.DistributedVirtualSwitch.FeatureCapability", "vim.DistributedVirtualSwitch.FeatureCapability"], "System.View", nil], ["querySwitchByUuid", "QueryDvsByUuid", "vim.version.version5", [["uuid", "string", "vim.version.version5", {}, nil]], [{:optional => true}, "vim.DistributedVirtualSwitch", "vim.DistributedVirtualSwitch"], "System.View", ["vim.fault.NotFound"]], ["queryDvsConfigTarget", "QueryDvsConfigTarget", "vim.version.version5", [["host", "vim.HostSystem", "vim.version.version5", {:optional => true}, nil], ["dvs", "vim.DistributedVirtualSwitch", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.dvs.DistributedVirtualSwitchManager.DvsConfigTarget", "vim.dvs.DistributedVirtualSwitchManager.DvsConfigTarget"], "System.View", nil], ["checkCompatibility", "QueryDvsCheckCompatibility", "vim.version.version6", [["hostContainer", "vim.dvs.DistributedVirtualSwitchManager.HostContainer", "vim.version.version6", {}, nil], ["dvsProductSpec", "vim.dvs.DistributedVirtualSwitchManager.DvsProductSpec", "vim.version.version6", {:optional => true}, nil], ["hostFilterSpec", "vim.dvs.DistributedVirtualSwitchManager.HostDvsFilterSpec[]", "vim.version.version6", {:optional => true}, nil]], [{:optional => true}, "vim.dvs.DistributedVirtualSwitchManager.CompatibilityResult[]", "vim.dvs.DistributedVirtualSwitchManager.CompatibilityResult[]"], "System.View", nil], ["rectifyHost", "RectifyDvsOnHost_Task", "vim.version.version7", [["hosts", "vim.HostSystem[]", "vim.version.version7", {}, nil]], [{}, "vim.Task", "void"], "System.Read", ["vim.fault.DvsFault"]], ["exportEntity", "DVSManagerExportEntity_Task", "vim.version.version8", [["selectionSet", "vim.SelectionSet[]", "vim.version.version8", {}, nil]], [{:optional => true}, "vim.Task", "vim.dvs.EntityBackup.Config[]"], nil, ["vim.fault.NotFound", "vim.fault.BackupBlobWriteFailure"]], ["importEntity", "DVSManagerImportEntity_Task", "vim.version.version8", [["entityBackup", "vim.dvs.EntityBackup.Config[]", "vim.version.version8", {}, nil], ["importType", "string", "vim.version.version8", {}, nil]], [{}, "vim.Task", "vim.dvs.DistributedVirtualSwitchManager.ImportResult"], nil, ["vim.fault.DvsFault", "vim.fault.NotFound"]], ["lookupPortgroup", "DVSManagerLookupDvPortGroup", "vim.version.version8", [["switchUuid", "string", "vim.version.version8", {}, nil], ["portgroupKey", "string", "vim.version.version8", {}, nil]], [{:optional => true}, "vim.dvs.DistributedVirtualPortgroup", "vim.dvs.DistributedVirtualPortgroup"], "System.View", ["vim.fault.NotFound"]]])
    create_data_type("vim.dvs.DistributedVirtualSwitchManager.DvsConfigTarget", "DVSManagerDvsConfigTarget", "vmodl.DynamicData", "vim.version.version5", [["distributedVirtualPortgroup", "vim.dvs.DistributedVirtualPortgroupInfo[]", "vim.version.version5", {:optional => true}], ["distributedVirtualSwitch", "vim.dvs.DistributedVirtualSwitchInfo[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.dvs.DistributedVirtualSwitchManager.CompatibilityResult", "DistributedVirtualSwitchManagerCompatibilityResult", "vmodl.DynamicData", "vim.version.version6", [["host", "vim.HostSystem", "vim.version.version6"], ["error", "vmodl.MethodFault[]", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.dvs.DistributedVirtualSwitchManager.HostContainer", "DistributedVirtualSwitchManagerHostContainer", "vmodl.DynamicData", "vim.version.version6", [["container", "vim.ManagedEntity", "vim.version.version6"], ["recursive", "boolean", "vim.version.version6"]])
    create_data_type("vim.dvs.DistributedVirtualSwitchManager.HostDvsFilterSpec", "DistributedVirtualSwitchManagerHostDvsFilterSpec", "vmodl.DynamicData", "vim.version.version6", [["inclusive", "boolean", "vim.version.version6"]])
    create_data_type("vim.dvs.DistributedVirtualSwitchManager.HostArrayFilter", "DistributedVirtualSwitchManagerHostArrayFilter", "vim.dvs.DistributedVirtualSwitchManager.HostDvsFilterSpec", "vim.version.version6", [["host", "vim.HostSystem[]", "vim.version.version6"]])
    create_data_type("vim.dvs.DistributedVirtualSwitchManager.HostContainerFilter", "DistributedVirtualSwitchManagerHostContainerFilter", "vim.dvs.DistributedVirtualSwitchManager.HostDvsFilterSpec", "vim.version.version6", [["hostContainer", "vim.dvs.DistributedVirtualSwitchManager.HostContainer", "vim.version.version6"]])
    create_data_type("vim.dvs.DistributedVirtualSwitchManager.HostDvsMembershipFilter", "DistributedVirtualSwitchManagerHostDvsMembershipFilter", "vim.dvs.DistributedVirtualSwitchManager.HostDvsFilterSpec", "vim.version.version6", [["distributedVirtualSwitch", "vim.DistributedVirtualSwitch", "vim.version.version6"]])
    create_data_type("vim.dvs.DistributedVirtualSwitchManager.DvsProductSpec", "DistributedVirtualSwitchManagerDvsProductSpec", "vmodl.DynamicData", "vim.version.version6", [["newSwitchProductSpec", "vim.dvs.ProductSpec", "vim.version.version6", {:optional => true}], ["distributedVirtualSwitch", "vim.DistributedVirtualSwitch", "vim.version.version6", {:optional => true}]])
    create_data_type("vim.dvs.DistributedVirtualSwitchManager.ImportResult", "DistributedVirtualSwitchManagerImportResult", "vmodl.DynamicData", "vim.version.version8", [["distributedVirtualSwitch", "vim.DistributedVirtualSwitch[]", "vim.version.version8", {:optional => true}], ["distributedVirtualPortgroup", "vim.dvs.DistributedVirtualPortgroup[]", "vim.version.version8", {:optional => true}], ["importFault", "vim.fault.ImportOperationBulkFault.FaultOnImport[]", "vim.version.version8", {:optional => true}]])
    create_managed_type("vim.dvs.VmwareDistributedVirtualSwitch", "VmwareDistributedVirtualSwitch", "vim.DistributedVirtualSwitch", "vim.version.version5", nil, [["updateLacpGroupConfig", "UpdateDVSLacpGroupConfig_Task", "vim.version.version9", [["lacpGroupSpec", "vim.dvs.VmwareDistributedVirtualSwitch.LacpGroupSpec[]", "vim.version.version9", {}, nil]], [{}, "vim.Task", "void"], "DVSwitch.Modify", ["vim.fault.DvsFault"]]])
    create_data_type("vim.dvs.VmwareDistributedVirtualSwitch.FeatureCapability", "VMwareDVSFeatureCapability", "vim.DistributedVirtualSwitch.FeatureCapability", "vim.version.version6", [["vspanSupported", "boolean", "vim.version.version7", {:optional => true}], ["lldpSupported", "boolean", "vim.version.version7", {:optional => true}], ["ipfixSupported", "boolean", "vim.version.version7", {:optional => true}], ["vspanCapability", "vim.dvs.VmwareDistributedVirtualSwitch.VspanFeatureCapability", "vim.version.version8", {:optional => true}], ["lacpCapability", "vim.dvs.VmwareDistributedVirtualSwitch.LacpFeatureCapability", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.dvs.VmwareDistributedVirtualSwitch.LacpFeatureCapability", "VMwareDvsLacpCapability", "vmodl.DynamicData", "vim.version.version8", [["lacpSupported", "boolean", "vim.version.version8", {:optional => true}], ["multiLacpGroupSupported", "boolean", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.dvs.VmwareDistributedVirtualSwitch.VmwareHealthCheckFeatureCapability", "VMwareDVSHealthCheckCapability", "vim.DistributedVirtualSwitch.HealthCheckFeatureCapability", "vim.version.version8", [["vlanMtuSupported", "boolean", "vim.version.version8"], ["teamingSupported", "boolean", "vim.version.version8"]])
    create_data_type("vim.dvs.VmwareDistributedVirtualSwitch.VspanFeatureCapability", "VMwareDVSVspanCapability", "vmodl.DynamicData", "vim.version.version8", [["mixedDestSupported", "boolean", "vim.version.version8"], ["dvportSupported", "boolean", "vim.version.version8"], ["remoteSourceSupported", "boolean", "vim.version.version8"], ["remoteDestSupported", "boolean", "vim.version.version8"], ["encapRemoteSourceSupported", "boolean", "vim.version.version8"]])
    create_data_type("vim.dvs.VmwareDistributedVirtualSwitch.VspanPorts", "VMwareVspanPort", "vmodl.DynamicData", "vim.version.version7", [["portKey", "string[]", "vim.version.version7", {:optional => true}], ["uplinkPortName", "string[]", "vim.version.version7", {:optional => true}], ["wildcardPortConnecteeType", "string[]", "vim.version.version7", {:optional => true}], ["vlans", "int[]", "vim.version.version8", {:optional => true}], ["ipAddress", "string[]", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.dvs.VmwareDistributedVirtualSwitch.VspanSession", "VMwareVspanSession", "vmodl.DynamicData", "vim.version.version7", [["key", "string", "vim.version.version7", {:optional => true}], ["name", "string", "vim.version.version7", {:optional => true}], ["description", "string", "vim.version.version7", {:optional => true}], ["enabled", "boolean", "vim.version.version7"], ["sourcePortTransmitted", "vim.dvs.VmwareDistributedVirtualSwitch.VspanPorts", "vim.version.version7", {:optional => true}], ["sourcePortReceived", "vim.dvs.VmwareDistributedVirtualSwitch.VspanPorts", "vim.version.version7", {:optional => true}], ["destinationPort", "vim.dvs.VmwareDistributedVirtualSwitch.VspanPorts", "vim.version.version7", {:optional => true}], ["encapsulationVlanId", "int", "vim.version.version7", {:optional => true}], ["stripOriginalVlan", "boolean", "vim.version.version7"], ["mirroredPacketLength", "int", "vim.version.version7", {:optional => true}], ["normalTrafficAllowed", "boolean", "vim.version.version7"], ["sessionType", "string", "vim.version.version8", {:optional => true}], ["samplingRate", "int", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.dvs.VmwareDistributedVirtualSwitch.IpfixConfig", "VMwareIpfixConfig", "vmodl.DynamicData", "vim.version.version7", [["collectorIpAddress", "string", "vim.version.version7", {:optional => true}], ["collectorPort", "int", "vim.version.version7", {:optional => true}], ["activeFlowTimeout", "int", "vim.version.version7"], ["idleFlowTimeout", "int", "vim.version.version7"], ["samplingRate", "int", "vim.version.version7"], ["internalFlowsOnly", "boolean", "vim.version.version7"]])
    create_data_type("vim.dvs.VmwareDistributedVirtualSwitch.ConfigInfo", "VMwareDVSConfigInfo", "vim.DistributedVirtualSwitch.ConfigInfo", "vim.version.version5", [["vspanSession", "vim.dvs.VmwareDistributedVirtualSwitch.VspanSession[]", "vim.version.version7", {:optional => true}], ["pvlanConfig", "vim.dvs.VmwareDistributedVirtualSwitch.PvlanMapEntry[]", "vim.version.version5", {:optional => true}], ["maxMtu", "int", "vim.version.version5"], ["linkDiscoveryProtocolConfig", "vim.host.LinkDiscoveryProtocolConfig", "vim.version.version5", {:optional => true}], ["ipfixConfig", "vim.dvs.VmwareDistributedVirtualSwitch.IpfixConfig", "vim.version.version7", {:optional => true}], ["lacpGroupConfig", "vim.dvs.VmwareDistributedVirtualSwitch.LacpGroupConfig[]", "vim.version.version9", {:optional => true}], ["lacpApiVersion", "string", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.dvs.VmwareDistributedVirtualSwitch.ConfigSpec", "VMwareDVSConfigSpec", "vim.DistributedVirtualSwitch.ConfigSpec", "vim.version.version5", [["pvlanConfigSpec", "vim.dvs.VmwareDistributedVirtualSwitch.PvlanConfigSpec[]", "vim.version.version5", {:optional => true}], ["vspanConfigSpec", "vim.dvs.VmwareDistributedVirtualSwitch.VspanConfigSpec[]", "vim.version.version7", {:optional => true}], ["maxMtu", "int", "vim.version.version5", {:optional => true}], ["linkDiscoveryProtocolConfig", "vim.host.LinkDiscoveryProtocolConfig", "vim.version.version5", {:optional => true}], ["ipfixConfig", "vim.dvs.VmwareDistributedVirtualSwitch.IpfixConfig", "vim.version.version7", {:optional => true}], ["lacpApiVersion", "string", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.dvs.VmwareDistributedVirtualSwitch.UplinkPortOrderPolicy", "VMwareUplinkPortOrderPolicy", "vim.InheritablePolicy", "vim.version.version5", [["activeUplinkPort", "string[]", "vim.version.version5", {:optional => true}], ["standbyUplinkPort", "string[]", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.dvs.VmwareDistributedVirtualSwitch.FailureCriteria", "DVSFailureCriteria", "vim.InheritablePolicy", "vim.version.version5", [["checkSpeed", "vim.StringPolicy", "vim.version.version5", {:optional => true}], ["speed", "vim.IntPolicy", "vim.version.version5", {:optional => true}], ["checkDuplex", "vim.BoolPolicy", "vim.version.version5", {:optional => true}], ["fullDuplex", "vim.BoolPolicy", "vim.version.version5", {:optional => true}], ["checkErrorPercent", "vim.BoolPolicy", "vim.version.version5", {:optional => true}], ["percentage", "vim.IntPolicy", "vim.version.version5", {:optional => true}], ["checkBeacon", "vim.BoolPolicy", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.dvs.VmwareDistributedVirtualSwitch.UplinkPortTeamingPolicy", "VmwareUplinkPortTeamingPolicy", "vim.InheritablePolicy", "vim.version.version5", [["policy", "vim.StringPolicy", "vim.version.version5", {:optional => true}], ["reversePolicy", "vim.BoolPolicy", "vim.version.version5", {:optional => true}], ["notifySwitches", "vim.BoolPolicy", "vim.version.version5", {:optional => true}], ["rollingOrder", "vim.BoolPolicy", "vim.version.version5", {:optional => true}], ["failureCriteria", "vim.dvs.VmwareDistributedVirtualSwitch.FailureCriteria", "vim.version.version5", {:optional => true}], ["uplinkPortOrder", "vim.dvs.VmwareDistributedVirtualSwitch.UplinkPortOrderPolicy", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.dvs.VmwareDistributedVirtualSwitch.VlanSpec", "VmwareDistributedVirtualSwitchVlanSpec", "vim.InheritablePolicy", "vim.version.version5", nil)
    create_data_type("vim.dvs.VmwareDistributedVirtualSwitch.PvlanSpec", "VmwareDistributedVirtualSwitchPvlanSpec", "vim.dvs.VmwareDistributedVirtualSwitch.VlanSpec", "vim.version.version5", [["pvlanId", "int", "vim.version.version5"]])
    create_data_type("vim.dvs.VmwareDistributedVirtualSwitch.VlanIdSpec", "VmwareDistributedVirtualSwitchVlanIdSpec", "vim.dvs.VmwareDistributedVirtualSwitch.VlanSpec", "vim.version.version5", [["vlanId", "int", "vim.version.version5"]])
    create_data_type("vim.dvs.VmwareDistributedVirtualSwitch.TrunkVlanSpec", "VmwareDistributedVirtualSwitchTrunkVlanSpec", "vim.dvs.VmwareDistributedVirtualSwitch.VlanSpec", "vim.version.version5", [["vlanId", "vim.NumericRange[]", "vim.version.version5"]])
    create_data_type("vim.dvs.VmwareDistributedVirtualSwitch.SecurityPolicy", "DVSSecurityPolicy", "vim.InheritablePolicy", "vim.version.version5", [["allowPromiscuous", "vim.BoolPolicy", "vim.version.version5", {:optional => true}], ["macChanges", "vim.BoolPolicy", "vim.version.version5", {:optional => true}], ["forgedTransmits", "vim.BoolPolicy", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.dvs.VmwareDistributedVirtualSwitch.VmwarePortConfigPolicy", "VMwareDVSPortSetting", "vim.dvs.DistributedVirtualPort.Setting", "vim.version.version5", [["vlan", "vim.dvs.VmwareDistributedVirtualSwitch.VlanSpec", "vim.version.version5", {:optional => true}], ["qosTag", "vim.IntPolicy", "vim.version.version5", {:optional => true}], ["uplinkTeamingPolicy", "vim.dvs.VmwareDistributedVirtualSwitch.UplinkPortTeamingPolicy", "vim.version.version5", {:optional => true}], ["securityPolicy", "vim.dvs.VmwareDistributedVirtualSwitch.SecurityPolicy", "vim.version.version5", {:optional => true}], ["ipfixEnabled", "vim.BoolPolicy", "vim.version.version7", {:optional => true}], ["txUplink", "vim.BoolPolicy", "vim.version.version5", {:optional => true}], ["lacpPolicy", "vim.dvs.VmwareDistributedVirtualSwitch.UplinkLacpPolicy", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.dvs.VmwareDistributedVirtualSwitch.VMwarePortgroupPolicy", "VMwareDVSPortgroupPolicy", "vim.dvs.DistributedVirtualPortgroup.PortgroupPolicy", "vim.version.version5", [["vlanOverrideAllowed", "boolean", "vim.version.version5"], ["uplinkTeamingOverrideAllowed", "boolean", "vim.version.version5"], ["securityPolicyOverrideAllowed", "boolean", "vim.version.version5"], ["ipfixOverrideAllowed", "boolean", "vim.version.version7", {:optional => true}]])
    create_enum_type("vim.dvs.VmwareDistributedVirtualSwitch.PvlanPortType", "VmwareDistributedVirtualSwitchPvlanPortType", "vim.version.version5", ["promiscuous", "isolated", "community"])
    create_data_type("vim.dvs.VmwareDistributedVirtualSwitch.PvlanConfigSpec", "VMwareDVSPvlanConfigSpec", "vmodl.DynamicData", "vim.version.version5", [["pvlanEntry", "vim.dvs.VmwareDistributedVirtualSwitch.PvlanMapEntry", "vim.version.version5"], ["operation", "string", "vim.version.version5"]])
    create_data_type("vim.dvs.VmwareDistributedVirtualSwitch.PvlanMapEntry", "VMwareDVSPvlanMapEntry", "vmodl.DynamicData", "vim.version.version5", [["primaryVlanId", "int", "vim.version.version5"], ["secondaryVlanId", "int", "vim.version.version5"], ["pvlanType", "string", "vim.version.version5"]])
    create_data_type("vim.dvs.VmwareDistributedVirtualSwitch.VspanConfigSpec", "VMwareDVSVspanConfigSpec", "vmodl.DynamicData", "vim.version.version7", [["vspanSession", "vim.dvs.VmwareDistributedVirtualSwitch.VspanSession", "vim.version.version7"], ["operation", "string", "vim.version.version7"]])
    create_enum_type("vim.dvs.VmwareDistributedVirtualSwitch.VspanSessionType", "VMwareDVSVspanSessionType", "vim.version.version8", ["mixedDestMirror", "dvPortMirror", "remoteMirrorSource", "remoteMirrorDest", "encapsulatedRemoteMirrorSource"])
    create_data_type("vim.dvs.VmwareDistributedVirtualSwitch.VmwareHealthCheckConfig", "VMwareDVSHealthCheckConfig", "vim.DistributedVirtualSwitch.HealthCheckConfig", "vim.version.version8", nil)
    create_data_type("vim.dvs.VmwareDistributedVirtualSwitch.VlanMtuHealthCheckConfig", "VMwareDVSVlanMtuHealthCheckConfig", "vim.dvs.VmwareDistributedVirtualSwitch.VmwareHealthCheckConfig", "vim.version.version8", nil)
    create_data_type("vim.dvs.VmwareDistributedVirtualSwitch.TeamingHealthCheckConfig", "VMwareDVSTeamingHealthCheckConfig", "vim.dvs.VmwareDistributedVirtualSwitch.VmwareHealthCheckConfig", "vim.version.version8", nil)
    create_data_type("vim.dvs.VmwareDistributedVirtualSwitch.VlanHealthCheckResult", "VMwareDVSVlanHealthCheckResult", "vim.dvs.HostMember.UplinkHealthCheckResult", "vim.version.version8", [["trunkedVlan", "vim.NumericRange[]", "vim.version.version8", {:optional => true}], ["untrunkedVlan", "vim.NumericRange[]", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.dvs.VmwareDistributedVirtualSwitch.MtuHealthCheckResult", "VMwareDVSMtuHealthCheckResult", "vim.dvs.HostMember.UplinkHealthCheckResult", "vim.version.version8", [["mtuMismatch", "boolean", "vim.version.version8"], ["vlanSupportSwitchMtu", "vim.NumericRange[]", "vim.version.version8", {:optional => true}], ["vlanNotSupportSwitchMtu", "vim.NumericRange[]", "vim.version.version8", {:optional => true}]])
    create_enum_type("vim.dvs.VmwareDistributedVirtualSwitch.TeamingMatchStatus", "VMwareDVSTeamingMatchStatus", "vim.version.version8", ["iphashMatch", "nonIphashMatch", "iphashMismatch", "nonIphashMismatch"])
    create_data_type("vim.dvs.VmwareDistributedVirtualSwitch.TeamingHealthCheckResult", "VMwareDVSTeamingHealthCheckResult", "vim.dvs.HostMember.HealthCheckResult", "vim.version.version8", [["teamingStatus", "string", "vim.version.version8"]])
    create_data_type("vim.dvs.VmwareDistributedVirtualSwitch.UplinkLacpPolicy", "VMwareUplinkLacpPolicy", "vim.InheritablePolicy", "vim.version.version8", [["enable", "vim.BoolPolicy", "vim.version.version8", {:optional => true}], ["mode", "vim.StringPolicy", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.dvs.VmwareDistributedVirtualSwitch.LacpGroupConfig", "VMwareDvsLacpGroupConfig", "vmodl.DynamicData", "vim.version.version9", [["key", "string", "vim.version.version9", {:optional => true}], ["name", "string", "vim.version.version9", {:optional => true}], ["mode", "string", "vim.version.version9", {:optional => true}], ["uplinkNum", "int", "vim.version.version9", {:optional => true}], ["loadbalanceAlgorithm", "string", "vim.version.version9", {:optional => true}], ["vlan", "vim.dvs.VmwareDistributedVirtualSwitch.LagVlanConfig", "vim.version.version9", {:optional => true}], ["ipfix", "vim.dvs.VmwareDistributedVirtualSwitch.LagIpfixConfig", "vim.version.version9", {:optional => true}], ["uplinkName", "string[]", "vim.version.version9", {:optional => true}], ["uplinkPortKey", "string[]", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.dvs.VmwareDistributedVirtualSwitch.LagVlanConfig", "VMwareDvsLagVlanConfig", "vmodl.DynamicData", "vim.version.version9", [["vlanId", "vim.NumericRange[]", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.dvs.VmwareDistributedVirtualSwitch.LagIpfixConfig", "VMwareDvsLagIpfixConfig", "vmodl.DynamicData", "vim.version.version9", [["ipfixEnabled", "boolean", "vim.version.version9", {:optional => true}]])
    create_enum_type("vim.dvs.VmwareDistributedVirtualSwitch.UplinkLacpMode", "VMwareUplinkLacpMode", "vim.version.version8", ["active", "passive"])
    create_data_type("vim.dvs.VmwareDistributedVirtualSwitch.LacpGroupSpec", "VMwareDvsLacpGroupSpec", "vmodl.DynamicData", "vim.version.version9", [["lacpGroupConfig", "vim.dvs.VmwareDistributedVirtualSwitch.LacpGroupConfig", "vim.version.version9"], ["operation", "string", "vim.version.version9"]])
    create_enum_type("vim.dvs.VmwareDistributedVirtualSwitch.LacpLoadBalanceAlgorithm", "VMwareDvsLacpLoadBalanceAlgorithm", "vim.version.version9", ["srcMac", "destMac", "srcDestMac", "destIpVlan", "srcIpVlan", "srcDestIpVlan", "destTcpUdpPort", "srcTcpUdpPort", "srcDestTcpUdpPort", "destIpTcpUdpPort", "srcIpTcpUdpPort", "srcDestIpTcpUdpPort", "destIpTcpUdpPortVlan", "srcIpTcpUdpPortVlan", "srcDestIpTcpUdpPortVlan", "destIp", "srcIp", "srcDestIp", "vlan", "srcPortId"])
    create_enum_type("vim.dvs.VmwareDistributedVirtualSwitch.LacpApiVersion", "VMwareDvsLacpApiVersion", "vim.version.version9", ["singleLag", "multipleLag"])
    create_data_type("vim.event.DvsReconfiguredEvent", "DvsReconfiguredEvent", "vim.event.DvsEvent", "vim.version.version5", [["configSpec", "vim.DistributedVirtualSwitch.ConfigSpec", "vim.version.version5"]])
    create_data_type("vim.fault.AdminDisabled", "AdminDisabled", "vim.fault.HostConfigFault", "vim.version.version2", nil)
    create_data_type("vim.fault.AdminNotDisabled", "AdminNotDisabled", "vim.fault.HostConfigFault", "vim.version.version2", nil)
    create_data_type("vim.fault.AffinityConfigured", "AffinityConfigured", "vim.fault.MigrationFault", "vim.version.version1", [["configuredAffinity", "string[]", "vim.version.version1"]])
    create_enum_type("vim.fault.AffinityConfigured.Affinity", "AffinityType", "vim.version.version1", ["memory", "cpu"])
    create_data_type("vim.fault.AgentInstallFailed", "AgentInstallFailed", "vim.fault.HostConnectFault", "vim.version.version1", [["reason", "string", "vim.version.version5", {:optional => true}], ["statusCode", "int", "vim.version.version5", {:optional => true}], ["installerOutput", "string", "vim.version.version5", {:optional => true}]])
    create_enum_type("vim.fault.AgentInstallFailed.Reason", "AgentInstallFailedReason", "vim.version.version5", ["NotEnoughSpaceOnDevice", "PrepareToUpgradeFailed", "AgentNotRunning", "AgentNotReachable", "InstallTimedout", "SignatureVerificationFailed", "AgentUploadFailed", "AgentUploadTimedout", "UnknownInstallerError"])
    create_data_type("vim.fault.AlreadyBeingManaged", "AlreadyBeingManaged", "vim.fault.HostConnectFault", "vim.version.version1", [["ipAddress", "string", "vim.version.version1"]])
    create_data_type("vim.fault.AlreadyConnected", "AlreadyConnected", "vim.fault.HostConnectFault", "vim.version.version1", [["name", "string", "vim.version.version1"]])
    create_data_type("vim.fault.ApplicationQuiesceFault", "ApplicationQuiesceFault", "vim.fault.SnapshotFault", "vim.version.version1", nil)
    create_data_type("vim.fault.BackupBlobReadFailure", "BackupBlobReadFailure", "vim.fault.DvsFault", "vim.version.version8", [["entityName", "string", "vim.version.version8"], ["entityType", "string", "vim.version.version8"], ["fault", "vmodl.MethodFault", "vim.version.version8"]])
    create_data_type("vim.fault.BackupBlobWriteFailure", "BackupBlobWriteFailure", "vim.fault.DvsFault", "vim.version.version8", [["entityName", "string", "vim.version.version8"], ["entityType", "string", "vim.version.version8"], ["fault", "vmodl.MethodFault", "vim.version.version8"]])
    create_data_type("vim.fault.BlockedByFirewall", "BlockedByFirewall", "vim.fault.HostConfigFault", "vim.version.version6", nil)
    create_data_type("vim.fault.CAMServerRefusedConnection", "CAMServerRefusedConnection", "vim.fault.InvalidCAMServer", "vim.version.version7", nil)
    create_data_type("vim.fault.CannotAccessFile", "CannotAccessFile", "vim.fault.FileFault", "vim.version.version1", nil)
    create_data_type("vim.fault.CannotAccessNetwork", "CannotAccessNetwork", "vim.fault.CannotAccessVmDevice", "vim.version.version1", nil)
    create_data_type("vim.fault.CannotAddHostWithFTVmAsStandalone", "CannotAddHostWithFTVmAsStandalone", "vim.fault.HostConnectFault", "vim.version.version5", nil)
    create_data_type("vim.fault.CannotAddHostWithFTVmToDifferentCluster", "CannotAddHostWithFTVmToDifferentCluster", "vim.fault.HostConnectFault", "vim.version.version5", nil)
    create_data_type("vim.fault.CannotAddHostWithFTVmToNonHACluster", "CannotAddHostWithFTVmToNonHACluster", "vim.fault.HostConnectFault", "vim.version.version5", nil)
    create_data_type("vim.fault.CannotCreateFile", "CannotCreateFile", "vim.fault.FileFault", "vim.version.version2", nil)
    create_data_type("vim.fault.CannotDecryptPasswords", "CannotDecryptPasswords", "vim.fault.CustomizationFault", "vim.version.version1", nil)
    create_data_type("vim.fault.CannotDeleteFile", "CannotDeleteFile", "vim.fault.FileFault", "vim.version.version1", nil)
    create_data_type("vim.fault.CannotModifyConfigCpuRequirements", "CannotModifyConfigCpuRequirements", "vim.fault.MigrationFault", "vim.version.version1", nil)
    create_data_type("vim.fault.CannotMoveVmWithDeltaDisk", "CannotMoveVmWithDeltaDisk", "vim.fault.MigrationFault", "vim.version.version7", [["device", "string", "vim.version.version7"]])
    create_data_type("vim.fault.CannotMoveVmWithNativeDeltaDisk", "CannotMoveVmWithNativeDeltaDisk", "vim.fault.MigrationFault", "vim.version.version7", nil)
    create_data_type("vim.fault.CannotPowerOffVmInCluster", "CannotPowerOffVmInCluster", "vim.fault.InvalidState", "vim.version.version7", [["operation", "string", "vim.version.version7"], ["vm", "vim.VirtualMachine", "vim.version.version7"], ["vmName", "string", "vim.version.version7"]])
    create_enum_type("vim.fault.CannotPowerOffVmInCluster.Operation", "CannotPowerOffVmInClusterOperation", "vim.version.version7", ["suspend", "powerOff", "guestShutdown", "guestSuspend"])
    create_data_type("vim.fault.ClockSkew", "ClockSkew", "vim.fault.HostConfigFault", "vim.version.version6", nil)
    create_data_type("vim.fault.CloneFromSnapshotNotSupported", "CloneFromSnapshotNotSupported", "vim.fault.MigrationFault", "vim.version.version5", nil)
    create_data_type("vim.fault.CollectorAddressUnset", "CollectorAddressUnset", "vim.fault.DvsFault", "vim.version.version8", nil)
    create_data_type("vim.fault.ConflictingConfiguration", "ConflictingConfiguration", "vim.fault.DvsFault", "vim.version.version9", [["configInConflict", "vim.fault.ConflictingConfiguration.Config[]", "vim.version.version9"]])
    create_data_type("vim.fault.ConflictingConfiguration.Config", "ConflictingConfigurationConfig", "vmodl.DynamicData", "vim.version.version9", [["entity", "vim.ManagedEntity", "vim.version.version9", {:optional => true}], ["propertyPath", "string", "vim.version.version9"]])
    create_data_type("vim.fault.CpuIncompatible", "CpuIncompatible", "vim.fault.VirtualHardwareCompatibilityIssue", "vim.version.version1", [["level", "int", "vim.version.version1"], ["registerName", "string", "vim.version.version1"], ["registerBits", "string", "vim.version.version2", {:optional => true}], ["desiredBits", "string", "vim.version.version2", {:optional => true}], ["host", "vim.HostSystem", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.fault.CpuIncompatible1ECX", "CpuIncompatible1ECX", "vim.fault.CpuIncompatible", "vim.version.version2", [["sse3", "boolean", "vim.version.version2"], ["pclmulqdq", "boolean", "vim.version.version7"], ["ssse3", "boolean", "vim.version.version2"], ["sse41", "boolean", "vim.version.version2"], ["sse42", "boolean", "vim.version.version2"], ["aes", "boolean", "vim.version.version7"], ["other", "boolean", "vim.version.version2"], ["otherOnly", "boolean", "vim.version.version2"]])
    create_data_type("vim.fault.CpuIncompatible81EDX", "CpuIncompatible81EDX", "vim.fault.CpuIncompatible", "vim.version.version2", [["nx", "boolean", "vim.version.version2"], ["ffxsr", "boolean", "vim.version.version2"], ["rdtscp", "boolean", "vim.version.version2"], ["lm", "boolean", "vim.version.version2"], ["other", "boolean", "vim.version.version2"], ["otherOnly", "boolean", "vim.version.version2"]])
    create_data_type("vim.fault.DatacenterMismatch", "DatacenterMismatch", "vim.fault.MigrationFault", "vim.version.version1", [["invalidArgument", "vim.fault.DatacenterMismatch.Argument[]", "vim.version.version1"], ["expectedDatacenter", "vim.Datacenter", "vim.version.version1"]])
    create_data_type("vim.fault.DatacenterMismatch.Argument", "DatacenterMismatchArgument", "vmodl.DynamicData", "vim.version.version1", [["entity", "vim.ManagedEntity", "vim.version.version1"], ["inputDatacenter", "vim.Datacenter", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.fault.DatastoreNotWritableOnHost", "DatastoreNotWritableOnHost", "vim.fault.InvalidDatastore", "vim.version.version1", [["host", "vim.HostSystem", "vim.version.version1"]])
    create_data_type("vim.fault.DestinationSwitchFull", "DestinationSwitchFull", "vim.fault.CannotAccessNetwork", "vim.version.version1", nil)
    create_data_type("vim.fault.DeviceNotSupported", "DeviceNotSupported", "vim.fault.VirtualHardwareCompatibilityIssue", "vim.version.version1", [["device", "string", "vim.version.version1"], ["reason", "string", "vim.version.version2", {:optional => true}]])
    create_enum_type("vim.fault.DeviceNotSupported.Reason", "DeviceNotSupportedReason", "vim.version.version2", ["host", "guest"])
    create_data_type("vim.fault.DirectoryNotEmpty", "DirectoryNotEmpty", "vim.fault.FileFault", "vim.version.version7", nil)
    create_data_type("vim.fault.DisableAdminNotSupported", "DisableAdminNotSupported", "vim.fault.HostConfigFault", "vim.version.version2", nil)
    create_data_type("vim.fault.DisallowedMigrationDeviceAttached", "DisallowedMigrationDeviceAttached", "vim.fault.MigrationFault", "vim.version.version1", [["fault", "vmodl.MethodFault", "vim.version.version1"]])
    create_data_type("vim.fault.DiskHasPartitions", "DiskHasPartitions", "vim.fault.VsanDiskFault", "vim.version.version9", nil)
    create_data_type("vim.fault.DiskIsLastRemainingNonSSD", "DiskIsLastRemainingNonSSD", "vim.fault.VsanDiskFault", "vim.version.version9", nil)
    create_data_type("vim.fault.DiskIsNonLocal", "DiskIsNonLocal", "vim.fault.VsanDiskFault", "vim.version.version9", nil)
    create_data_type("vim.fault.DiskIsUSB", "DiskIsUSB", "vim.fault.VsanDiskFault", "vim.version.version9", nil)
    create_data_type("vim.fault.DiskMoveTypeNotSupported", "DiskMoveTypeNotSupported", "vim.fault.MigrationFault", "vim.version.version5", nil)
    create_data_type("vim.fault.DiskNotSupported", "DiskNotSupported", "vim.fault.VirtualHardwareCompatibilityIssue", "vim.version.version1", [["disk", "int", "vim.version.version1"]])
    create_data_type("vim.fault.DiskTooSmall", "DiskTooSmall", "vim.fault.VsanDiskFault", "vim.version.version9", nil)
    create_data_type("vim.fault.DrsVmotionIncompatibleFault", "DrsVmotionIncompatibleFault", "vim.fault.VirtualHardwareCompatibilityIssue", "vim.version.version5", [["host", "vim.HostSystem", "vim.version.version5"]])
    create_data_type("vim.fault.DuplicateDisks", "DuplicateDisks", "vim.fault.VsanDiskFault", "vim.version.version9", nil)
    create_data_type("vim.fault.DvsApplyOperationFault", "DvsApplyOperationFault", "vim.fault.DvsFault", "vim.version.version8", [["objectFault", "vim.fault.DvsApplyOperationFault.FaultOnObject[]", "vim.version.version8"]])
    create_data_type("vim.fault.DvsApplyOperationFault.FaultOnObject", "DvsApplyOperationFaultFaultOnObject", "vmodl.DynamicData", "vim.version.version8", [["objectId", "string", "vim.version.version8"], ["type", "vmodl.TypeName", "vim.version.version8"], ["fault", "vmodl.MethodFault", "vim.version.version8"]])
    create_data_type("vim.fault.EVCAdmissionFailed", "EVCAdmissionFailed", "vim.fault.NotSupportedHostInCluster", "vim.version.version5", [["faults", "vmodl.MethodFault[]", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.fault.EVCAdmissionFailedCPUFeaturesForMode", "EVCAdmissionFailedCPUFeaturesForMode", "vim.fault.EVCAdmissionFailed", "vim.version.version5", [["currentEVCModeKey", "string", "vim.version.version5"]])
    create_data_type("vim.fault.EVCAdmissionFailedCPUModel", "EVCAdmissionFailedCPUModel", "vim.fault.EVCAdmissionFailed", "vim.version.version5", nil)
    create_data_type("vim.fault.EVCAdmissionFailedCPUModelForMode", "EVCAdmissionFailedCPUModelForMode", "vim.fault.EVCAdmissionFailed", "vim.version.version5", [["currentEVCModeKey", "string", "vim.version.version5"]])
    create_data_type("vim.fault.EVCAdmissionFailedCPUVendor", "EVCAdmissionFailedCPUVendor", "vim.fault.EVCAdmissionFailed", "vim.version.version5", [["clusterCPUVendor", "string", "vim.version.version5"], ["hostCPUVendor", "string", "vim.version.version5"]])
    create_data_type("vim.fault.EVCAdmissionFailedCPUVendorUnknown", "EVCAdmissionFailedCPUVendorUnknown", "vim.fault.EVCAdmissionFailed", "vim.version.version5", nil)
    create_data_type("vim.fault.EVCAdmissionFailedHostDisconnected", "EVCAdmissionFailedHostDisconnected", "vim.fault.EVCAdmissionFailed", "vim.version.version5", nil)
    create_data_type("vim.fault.EVCAdmissionFailedHostSoftware", "EVCAdmissionFailedHostSoftware", "vim.fault.EVCAdmissionFailed", "vim.version.version5", nil)
    create_data_type("vim.fault.EVCAdmissionFailedHostSoftwareForMode", "EVCAdmissionFailedHostSoftwareForMode", "vim.fault.EVCAdmissionFailed", "vim.version.version5", nil)
    create_data_type("vim.fault.EVCAdmissionFailedVmActive", "EVCAdmissionFailedVmActive", "vim.fault.EVCAdmissionFailed", "vim.version.version5", nil)
    create_data_type("vim.fault.FailToEnableSPBM", "FailToEnableSPBM", "vmodl.fault.NotEnoughLicenses", "vim.version.version7", [["cs", "vim.ComputeResource", "vim.version.version7"], ["csName", "string", "vim.version.version7"], ["hostLicenseStates", "vim.ComputeResource.HostSPBMLicenseInfo[]", "vim.version.version7"]])
    create_data_type("vim.fault.FaultToleranceAntiAffinityViolated", "FaultToleranceAntiAffinityViolated", "vim.fault.MigrationFault", "vim.version.version5", [["hostName", "string", "vim.version.version5"], ["host", "vim.HostSystem", "vim.version.version5"]])
    create_data_type("vim.fault.FaultToleranceCpuIncompatible", "FaultToleranceCpuIncompatible", "vim.fault.CpuIncompatible", "vim.version.version5", [["model", "boolean", "vim.version.version5"], ["family", "boolean", "vim.version.version5"], ["stepping", "boolean", "vim.version.version5"]])
    create_data_type("vim.fault.FaultToleranceNeedsThickDisk", "FaultToleranceNeedsThickDisk", "vim.fault.MigrationFault", "vim.version.version6", [["vmName", "string", "vim.version.version6"]])
    create_data_type("vim.fault.FaultToleranceNotSameBuild", "FaultToleranceNotSameBuild", "vim.fault.MigrationFault", "vim.version.version5", [["build", "string", "vim.version.version5"]])
    create_data_type("vim.fault.FeatureRequirementsNotMet", "FeatureRequirementsNotMet", "vim.fault.VirtualHardwareCompatibilityIssue", "vim.version.version8", [["featureRequirement", "vim.vm.FeatureRequirement[]", "vim.version.version8", {:optional => true}], ["vm", "vim.VirtualMachine", "vim.version.version8", {:optional => true}], ["host", "vim.HostSystem", "vim.version.version8", {:optional => true}]])
    create_data_type("vim.fault.FileAlreadyExists", "FileAlreadyExists", "vim.fault.FileFault", "vim.version.version1", nil)
    create_data_type("vim.fault.FileBackedPortNotSupported", "FileBackedPortNotSupported", "vim.fault.DeviceNotSupported", "vim.version.version2", nil)
    create_data_type("vim.fault.FilesystemQuiesceFault", "FilesystemQuiesceFault", "vim.fault.SnapshotFault", "vim.version.version1", nil)
    create_data_type("vim.fault.FullStorageVMotionNotSupported", "FullStorageVMotionNotSupported", "vim.fault.MigrationFeatureNotSupported", "vim.version.version2", nil)
    create_data_type("vim.fault.GuestAuthenticationChallenge", "GuestAuthenticationChallenge", "vim.fault.GuestOperationsFault", "vim.version.version7", [["serverChallenge", "vim.vm.guest.GuestAuthentication", "vim.version.version7"], ["sessionID", "long", "vim.version.version7"]])
    create_data_type("vim.fault.GuestComponentsOutOfDate", "GuestComponentsOutOfDate", "vim.fault.GuestOperationsFault", "vim.version.version7", nil)
    create_data_type("vim.fault.HAErrorsAtDest", "HAErrorsAtDest", "vim.fault.MigrationFault", "vim.version.version2", nil)
    create_data_type("vim.fault.HostConfigFailed", "HostConfigFailed", "vim.fault.HostConfigFault", "vim.version.version5", [["failure", "vmodl.MethodFault[]", "vim.version.version5"]])
    create_data_type("vim.fault.HotSnapshotMoveNotSupported", "HotSnapshotMoveNotSupported", "vim.fault.SnapshotCopyNotSupported", "vim.version.version2", nil)
    create_data_type("vim.fault.IDEDiskNotSupported", "IDEDiskNotSupported", "vim.fault.DiskNotSupported", "vim.version.version1", nil)
    create_data_type("vim.fault.InaccessibleDatastore", "InaccessibleDatastore", "vim.fault.InvalidDatastore", "vim.version.version1", [["detail", "string", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.fault.IncompatibleDefaultDevice", "IncompatibleDefaultDevice", "vim.fault.MigrationFault", "vim.version.version2", [["device", "string", "vim.version.version2"]])
    create_data_type("vim.fault.IndependentDiskVMotionNotSupported", "IndependentDiskVMotionNotSupported", "vim.fault.MigrationFeatureNotSupported", "vim.version.version2", nil)
    create_data_type("vim.fault.InsufficientAgentVmsDeployed", "InsufficientAgentVmsDeployed", "vim.fault.InsufficientResourcesFault", "vim.version.version7", [["hostName", "string", "vim.version.version7"], ["requiredNumAgentVms", "int", "vim.version.version7"], ["currentNumAgentVms", "int", "vim.version.version7"]])
    create_data_type("vim.fault.InsufficientCpuResourcesFault", "InsufficientCpuResourcesFault", "vim.fault.InsufficientResourcesFault", "vim.version.version1", [["unreserved", "long", "vim.version.version1"], ["requested", "long", "vim.version.version1"]])
    create_data_type("vim.fault.InsufficientDisks", "InsufficientDisks", "vim.fault.VsanDiskFault", "vim.version.version9", nil)
    create_data_type("vim.fault.InsufficientFailoverResourcesFault", "InsufficientFailoverResourcesFault", "vim.fault.InsufficientResourcesFault", "vim.version.version1", nil)
    create_data_type("vim.fault.InsufficientHostCapacityFault", "InsufficientHostCapacityFault", "vim.fault.InsufficientResourcesFault", "vim.version.version1", [["host", "vim.HostSystem", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.fault.InsufficientHostCpuCapacityFault", "InsufficientHostCpuCapacityFault", "vim.fault.InsufficientHostCapacityFault", "vim.version.version5", [["unreserved", "long", "vim.version.version5"], ["requested", "long", "vim.version.version5"]])
    create_data_type("vim.fault.InsufficientHostMemoryCapacityFault", "InsufficientHostMemoryCapacityFault", "vim.fault.InsufficientHostCapacityFault", "vim.version.version5", [["unreserved", "long", "vim.version.version5"], ["requested", "long", "vim.version.version5"]])
    create_data_type("vim.fault.InsufficientMemoryResourcesFault", "InsufficientMemoryResourcesFault", "vim.fault.InsufficientResourcesFault", "vim.version.version1", [["unreserved", "long", "vim.version.version1"], ["requested", "long", "vim.version.version1"]])
    create_data_type("vim.fault.InsufficientPerCpuCapacity", "InsufficientPerCpuCapacity", "vim.fault.InsufficientHostCapacityFault", "vim.version.version2", nil)
    create_data_type("vim.fault.InsufficientStandbyCpuResource", "InsufficientStandbyCpuResource", "vim.fault.InsufficientStandbyResource", "vim.version.version5", [["available", "long", "vim.version.version5"], ["requested", "long", "vim.version.version5"]])
    create_data_type("vim.fault.InsufficientStandbyMemoryResource", "InsufficientStandbyMemoryResource", "vim.fault.InsufficientStandbyResource", "vim.version.version5", [["available", "long", "vim.version.version5"], ["requested", "long", "vim.version.version5"]])
    create_data_type("vim.fault.InvalidBundle", "InvalidBundle", "vim.fault.PlatformConfigFault", "vim.version.version2", nil)
    create_data_type("vim.fault.InvalidCAMCertificate", "InvalidCAMCertificate", "vim.fault.InvalidCAMServer", "vim.version.version7", nil)
    create_data_type("vim.fault.InvalidClientCertificate", "InvalidClientCertificate", "vim.fault.InvalidLogin", "vim.version.version3", nil)
    create_data_type("vim.fault.InvalidDatastoreState", "InvalidDatastoreState", "vim.fault.InvalidState", "vim.version.version7", [["datastoreName", "string", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.fault.InvalidDeviceSpec", "InvalidDeviceSpec", "vim.fault.InvalidVmConfig", "vim.version.version1", [["deviceIndex", "int", "vim.version.version1"]])
    create_data_type("vim.fault.InvalidDiskFormat", "InvalidDiskFormat", "vim.fault.InvalidFormat", "vim.version.version1", nil)
    create_data_type("vim.fault.InvalidHostState", "InvalidHostState", "vim.fault.InvalidState", "vim.version.version2", [["host", "vim.HostSystem", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.fault.InvalidNasCredentials", "InvalidNasCredentials", "vim.fault.NasConfigFault", "vim.version.version4", [["userName", "string", "vim.version.version4"]])
    create_data_type("vim.fault.InvalidNetworkInType", "InvalidNetworkInType", "vim.fault.VAppPropertyFault", "vim.version.version5", nil)
    create_data_type("vim.fault.InvalidNetworkResource", "InvalidNetworkResource", "vim.fault.NasConfigFault", "vim.version.version4", [["remoteHost", "string", "vim.version.version4"], ["remotePath", "string", "vim.version.version4"]])
    create_data_type("vim.fault.InvalidPowerState", "InvalidPowerState", "vim.fault.InvalidState", "vim.version.version1", [["requestedState", "vim.VirtualMachine.PowerState", "vim.version.version1", {:optional => true}], ["existingState", "vim.VirtualMachine.PowerState", "vim.version.version1"]])
    create_data_type("vim.fault.InvalidPropertyType", "InvalidPropertyType", "vim.fault.VAppPropertyFault", "vim.version.version5", nil)
    create_data_type("vim.fault.InvalidPropertyValue", "InvalidPropertyValue", "vim.fault.VAppPropertyFault", "vim.version.version5", nil)
    create_data_type("vim.fault.LargeRDMConversionNotSupported", "LargeRDMConversionNotSupported", "vim.fault.MigrationFault", "vim.version.version7", [["device", "string", "vim.version.version7"]])
    create_data_type("vim.fault.LegacyNetworkInterfaceInUse", "LegacyNetworkInterfaceInUse", "vim.fault.CannotAccessNetwork", "vim.version.version1", nil)
    create_data_type("vim.fault.MaintenanceModeFileMove", "MaintenanceModeFileMove", "vim.fault.MigrationFault", "vim.version.version2", nil)
    create_data_type("vim.fault.MemorySizeNotRecommended", "MemorySizeNotRecommended", "vim.fault.VirtualHardwareCompatibilityIssue", "vim.version.version2", [["memorySizeMB", "int", "vim.version.version2"], ["minMemorySizeMB", "int", "vim.version.version2"], ["maxMemorySizeMB", "int", "vim.version.version2"]])
    create_data_type("vim.fault.MemorySizeNotSupported", "MemorySizeNotSupported", "vim.fault.VirtualHardwareCompatibilityIssue", "vim.version.version2", [["memorySizeMB", "int", "vim.version.version2"], ["minMemorySizeMB", "int", "vim.version.version2"], ["maxMemorySizeMB", "int", "vim.version.version2"]])
    create_data_type("vim.fault.MemorySizeNotSupportedByDatastore", "MemorySizeNotSupportedByDatastore", "vim.fault.VirtualHardwareCompatibilityIssue", "vim.version.version7", [["datastore", "vim.Datastore", "vim.version.version7"], ["memorySizeMB", "int", "vim.version.version7"], ["maxMemorySizeMB", "int", "vim.version.version7"]])
    create_data_type("vim.fault.MemorySnapshotOnIndependentDisk", "MemorySnapshotOnIndependentDisk", "vim.fault.SnapshotFault", "vim.version.version1", nil)
    create_data_type("vim.fault.MigrationDisabled", "MigrationDisabled", "vim.fault.MigrationFault", "vim.version.version5", nil)
    create_data_type("vim.fault.MissingController", "MissingController", "vim.fault.InvalidDeviceSpec", "vim.version.version1", nil)
    create_data_type("vim.fault.MissingIpPool", "MissingIpPool", "vim.fault.VAppPropertyFault", "vim.version.version7", nil)
    create_data_type("vim.fault.MissingNetworkIpConfig", "MissingNetworkIpConfig", "vim.fault.VAppPropertyFault", "vim.version.version5", nil)
    create_data_type("vim.fault.MissingPowerOffConfiguration", "MissingPowerOffConfiguration", "vim.fault.VAppConfigFault", "vim.version.version5", nil)
    create_data_type("vim.fault.MissingPowerOnConfiguration", "MissingPowerOnConfiguration", "vim.fault.VAppConfigFault", "vim.version.version5", nil)
    create_data_type("vim.fault.MultipleSnapshotsNotSupported", "MultipleSnapshotsNotSupported", "vim.fault.SnapshotFault", "vim.version.version1", nil)
    create_data_type("vim.fault.NoAvailableIp", "NoAvailableIp", "vim.fault.VAppPropertyFault", "vim.version.version5", [["network", "vim.Network", "vim.version.version5"]])
    create_data_type("vim.fault.NoVcManagedIpConfigured", "NoVcManagedIpConfigured", "vim.fault.VAppPropertyFault", "vim.version.version5", nil)
    create_data_type("vim.fault.NoVmInVApp", "NoVmInVApp", "vim.fault.VAppConfigFault", "vim.version.version5", nil)
    create_data_type("vim.fault.NonPersistentDisksNotSupported", "NonPersistentDisksNotSupported", "vim.fault.DeviceNotSupported", "vim.version.version2", nil)
    create_data_type("vim.fault.NonVmwareOuiMacNotSupportedHost", "NonVmwareOuiMacNotSupportedHost", "vim.fault.NotSupportedHost", "vim.version.version8", [["hostName", "string", "vim.version.version8"]])
    create_data_type("vim.fault.NotEnoughCpus", "NotEnoughCpus", "vim.fault.VirtualHardwareCompatibilityIssue", "vim.version.version1", [["numCpuDest", "int", "vim.version.version1"], ["numCpuVm", "int", "vim.version.version1"]])
    create_data_type("vim.fault.NotEnoughLogicalCpus", "NotEnoughLogicalCpus", "vim.fault.NotEnoughCpus", "vim.version.version1", [["host", "vim.HostSystem", "vim.version.version2", {:optional => true}]])
    create_data_type("vim.fault.NotUserConfigurableProperty", "NotUserConfigurableProperty", "vim.fault.VAppPropertyFault", "vim.version.version5", nil)
    create_data_type("vim.fault.NumVirtualCoresPerSocketNotSupported", "NumVirtualCoresPerSocketNotSupported", "vim.fault.VirtualHardwareCompatibilityIssue", "vim.version.version7", [["maxSupportedCoresPerSocketDest", "int", "vim.version.version7"], ["numCoresPerSocketVm", "int", "vim.version.version7"]])
    create_data_type("vim.fault.NumVirtualCpusNotSupported", "NumVirtualCpusNotSupported", "vim.fault.VirtualHardwareCompatibilityIssue", "vim.version.version1", [["maxSupportedVcpusDest", "int", "vim.version.version1"], ["numCpuVm", "int", "vim.version.version1"]])
    create_data_type("vim.fault.OvfAttribute", "OvfAttribute", "vim.fault.OvfInvalidPackage", "vim.version.version5", [["elementName", "string", "vim.version.version5"], ["attributeName", "string", "vim.version.version5"]])
    create_data_type("vim.fault.OvfConstraint", "OvfConstraint", "vim.fault.OvfInvalidPackage", "vim.version.version6", [["name", "string", "vim.version.version6"]])
    create_data_type("vim.fault.OvfConsumerCallbackFault", "OvfConsumerCallbackFault", "vim.fault.OvfFault", "vim.version.version7", [["extensionKey", "string", "vim.version.version7"], ["extensionName", "string", "vim.version.version7"]])
    create_data_type("vim.fault.OvfConsumerCommunicationError", "OvfConsumerCommunicationError", "vim.fault.OvfConsumerCallbackFault", "vim.version.version7", [["description", "string", "vim.version.version7"]])
    create_data_type("vim.fault.OvfConsumerFault", "OvfConsumerFault", "vim.fault.OvfConsumerCallbackFault", "vim.version.version7", [["errorKey", "string", "vim.version.version7"], ["message", "string", "vim.version.version7"], ["params", "vim.KeyValue[]", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.fault.OvfConsumerInvalidSection", "OvfConsumerInvalidSection", "vim.fault.OvfConsumerCallbackFault", "vim.version.version7", [["lineNumber", "int", "vim.version.version7"], ["description", "string", "vim.version.version7"]])
    create_data_type("vim.fault.OvfConsumerUndeclaredSection", "OvfConsumerUndeclaredSection", "vim.fault.OvfConsumerCallbackFault", "vim.version.version7", [["qualifiedSectionType", "string", "vim.version.version7"]])
    create_data_type("vim.fault.OvfConsumerUndefinedPrefix", "OvfConsumerUndefinedPrefix", "vim.fault.OvfConsumerCallbackFault", "vim.version.version7", [["prefix", "string", "vim.version.version7"]])
    create_data_type("vim.fault.OvfCpuCompatibility", "OvfCpuCompatibility", "vim.fault.OvfImport", "vim.version.version7", [["registerName", "string", "vim.version.version7"], ["level", "int", "vim.version.version7"], ["registerValue", "string", "vim.version.version7"], ["desiredRegisterValue", "string", "vim.version.version7"]])
    create_data_type("vim.fault.OvfCpuCompatibilityCheckNotSupported", "OvfCpuCompatibilityCheckNotSupported", "vim.fault.OvfImport", "vim.version.version7", nil)
    create_data_type("vim.fault.OvfDiskMappingNotFound", "OvfDiskMappingNotFound", "vim.fault.OvfSystemFault", "vim.version.version5", [["diskName", "string", "vim.version.version5"], ["vmName", "string", "vim.version.version5"]])
    create_data_type("vim.fault.OvfDiskOrderConstraint", "OvfDiskOrderConstraint", "vim.fault.OvfConstraint", "vim.version.version6", nil)
    create_data_type("vim.fault.OvfElement", "OvfElement", "vim.fault.OvfInvalidPackage", "vim.version.version5", [["name", "string", "vim.version.version5"]])
    create_data_type("vim.fault.OvfElementInvalidValue", "OvfElementInvalidValue", "vim.fault.OvfElement", "vim.version.version5", [["value", "string", "vim.version.version5"]])
    create_data_type("vim.fault.OvfExport", "OvfExport", "vim.fault.OvfFault", "vim.version.version5", nil)
    create_data_type("vim.fault.OvfExportFailed", "OvfExportFailed", "vim.fault.OvfExport", "vim.version.version6", nil)
    create_data_type("vim.fault.OvfHardwareCheck", "OvfHardwareCheck", "vim.fault.OvfImport", "vim.version.version5", nil)
    create_data_type("vim.fault.OvfHardwareExport", "OvfHardwareExport", "vim.fault.OvfExport", "vim.version.version5", [["device", "vim.vm.device.VirtualDevice", "vim.version.version5", {:optional => true}], ["vmPath", "string", "vim.version.version5"]])
    create_data_type("vim.fault.OvfHostResourceConstraint", "OvfHostResourceConstraint", "vim.fault.OvfConstraint", "vim.version.version6", [["value", "string", "vim.version.version6"]])
    create_data_type("vim.fault.OvfHostValueNotParsed", "OvfHostValueNotParsed", "vim.fault.OvfSystemFault", "vim.version.version5", [["property", "string", "vim.version.version5"], ["value", "string", "vim.version.version5"]])
    create_data_type("vim.fault.OvfInternalError", "OvfInternalError", "vim.fault.OvfSystemFault", "vim.version.version6", nil)
    create_data_type("vim.fault.OvfInvalidValue", "OvfInvalidValue", "vim.fault.OvfAttribute", "vim.version.version5", [["value", "string", "vim.version.version5"]])
    create_data_type("vim.fault.OvfInvalidValueConfiguration", "OvfInvalidValueConfiguration", "vim.fault.OvfInvalidValue", "vim.version.version5", nil)
    create_data_type("vim.fault.OvfInvalidValueEmpty", "OvfInvalidValueEmpty", "vim.fault.OvfInvalidValue", "vim.version.version5", nil)
    create_data_type("vim.fault.OvfInvalidValueFormatMalformed", "OvfInvalidValueFormatMalformed", "vim.fault.OvfInvalidValue", "vim.version.version5", nil)
    create_data_type("vim.fault.OvfInvalidValueReference", "OvfInvalidValueReference", "vim.fault.OvfInvalidValue", "vim.version.version5", nil)
    create_data_type("vim.fault.OvfInvalidVmName", "OvfInvalidVmName", "vim.fault.OvfUnsupportedPackage", "vim.version.version5", [["name", "string", "vim.version.version5"]])
    create_data_type("vim.fault.OvfMissingAttribute", "OvfMissingAttribute", "vim.fault.OvfAttribute", "vim.version.version5", nil)
    create_data_type("vim.fault.OvfMissingElement", "OvfMissingElement", "vim.fault.OvfElement", "vim.version.version5", nil)
    create_data_type("vim.fault.OvfMissingElementNormalBoundary", "OvfMissingElementNormalBoundary", "vim.fault.OvfMissingElement", "vim.version.version5", [["boundary", "string", "vim.version.version5"]])
    create_data_type("vim.fault.OvfNoHostNic", "OvfNoHostNic", "vim.fault.OvfUnsupportedPackage", "vim.version.version5", nil)
    create_data_type("vim.fault.OvfNoSupportedHardwareFamily", "OvfNoSupportedHardwareFamily", "vim.fault.OvfUnsupportedPackage", "vim.version.version5", [["version", "string", "vim.version.version5"]])
    create_data_type("vim.fault.OvfPropertyExport", "OvfPropertyExport", "vim.fault.OvfExport", "vim.version.version5", [["type", "string", "vim.version.version5"], ["value", "string", "vim.version.version5"]])
    create_data_type("vim.fault.OvfPropertyNetworkExport", "OvfPropertyNetworkExport", "vim.fault.OvfExport", "vim.version.version7", [["network", "string", "vim.version.version7"]])
    create_data_type("vim.fault.OvfUnableToExportDisk", "OvfUnableToExportDisk", "vim.fault.OvfHardwareExport", "vim.version.version5", [["diskName", "string", "vim.version.version5"]])
    create_data_type("vim.fault.OvfUnexpectedElement", "OvfUnexpectedElement", "vim.fault.OvfElement", "vim.version.version5", nil)
    create_data_type("vim.fault.OvfUnknownDeviceBacking", "OvfUnknownDeviceBacking", "vim.fault.OvfHardwareExport", "vim.version.version5", [["backing", "vim.vm.device.VirtualDevice.BackingInfo", "vim.version.version5"]])
    create_data_type("vim.fault.OvfUnsupportedAttribute", "OvfUnsupportedAttribute", "vim.fault.OvfUnsupportedPackage", "vim.version.version5", [["elementName", "string", "vim.version.version5"], ["attributeName", "string", "vim.version.version5"]])
    create_data_type("vim.fault.OvfUnsupportedAttributeValue", "OvfUnsupportedAttributeValue", "vim.fault.OvfUnsupportedAttribute", "vim.version.version5", [["value", "string", "vim.version.version5"]])
    create_data_type("vim.fault.OvfUnsupportedDeviceExport", "OvfUnsupportedDeviceExport", "vim.fault.OvfHardwareExport", "vim.version.version5", nil)
    create_data_type("vim.fault.OvfUnsupportedElement", "OvfUnsupportedElement", "vim.fault.OvfUnsupportedPackage", "vim.version.version5", [["name", "string", "vim.version.version5"]])
    create_data_type("vim.fault.OvfUnsupportedElementValue", "OvfUnsupportedElementValue", "vim.fault.OvfUnsupportedElement", "vim.version.version5", [["value", "string", "vim.version.version5"]])
    create_data_type("vim.fault.OvfUnsupportedSection", "OvfUnsupportedSection", "vim.fault.OvfUnsupportedElement", "vim.version.version5", [["info", "string", "vim.version.version5"]])
    create_data_type("vim.fault.OvfWrongElement", "OvfWrongElement", "vim.fault.OvfElement", "vim.version.version5", nil)
    create_data_type("vim.fault.PatchAlreadyInstalled", "PatchAlreadyInstalled", "vim.fault.PatchNotApplicable", "vim.version.version1", nil)
    create_data_type("vim.fault.PatchInstallFailed", "PatchInstallFailed", "vim.fault.PlatformConfigFault", "vim.version.version1", [["rolledBack", "boolean", "vim.version.version1"]])
    create_data_type("vim.fault.PatchIntegrityError", "PatchIntegrityError", "vim.fault.PlatformConfigFault", "vim.version.version1", nil)
    create_data_type("vim.fault.PatchMetadataCorrupted", "PatchMetadataCorrupted", "vim.fault.PatchMetadataInvalid", "vim.version.version1", nil)
    create_data_type("vim.fault.PatchMissingDependencies", "PatchMissingDependencies", "vim.fault.PatchNotApplicable", "vim.version.version1", [["prerequisitePatch", "string[]", "vim.version.version1", {:optional => true}], ["prerequisiteLib", "string[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.fault.PowerOnFtSecondaryTimedout", "PowerOnFtSecondaryTimedout", "vim.fault.Timedout", "vim.version.version5", [["vm", "vim.VirtualMachine", "vim.version.version5"], ["vmName", "string", "vim.version.version5"], ["timeout", "int", "vim.version.version5"]])
    create_data_type("vim.fault.QuiesceDatastoreIOForHAFailed", "QuiesceDatastoreIOForHAFailed", "vim.fault.ResourceInUse", "vim.version.version7", [["host", "vim.HostSystem", "vim.version.version7"], ["hostName", "string", "vim.version.version7"], ["ds", "vim.Datastore", "vim.version.version7"], ["dsName", "string", "vim.version.version7"]])
    create_data_type("vim.fault.RDMNotSupported", "RDMNotSupported", "vim.fault.DeviceNotSupported", "vim.version.version1", nil)
    create_data_type("vim.fault.RawDiskNotSupported", "RawDiskNotSupported", "vim.fault.DeviceNotSupported", "vim.version.version1", nil)
    create_data_type("vim.fault.RemoteDeviceNotSupported", "RemoteDeviceNotSupported", "vim.fault.DeviceNotSupported", "vim.version.version1", nil)
    create_data_type("vim.fault.ReplicationConfigFault", "ReplicationConfigFault", "vim.fault.ReplicationFault", "vim.version.version7", nil)
    create_data_type("vim.fault.ReplicationDiskConfigFault", "ReplicationDiskConfigFault", "vim.fault.ReplicationConfigFault", "vim.version.version7", [["reason", "string", "vim.version.version7", {:optional => true}], ["vmRef", "vim.VirtualMachine", "vim.version.version7", {:optional => true}], ["key", "int", "vim.version.version7", {:optional => true}]])
    create_enum_type("vim.fault.ReplicationDiskConfigFault.ReasonForFault", "ReplicationDiskConfigFaultReasonForFault", "vim.version.version7", ["diskNotFound", "diskTypeNotSupported", "invalidDiskKey", "invalidDiskReplicationId", "duplicateDiskReplicationId", "invalidPersistentFilePath", "reconfigureDiskReplicationIdNotAllowed"])
    create_data_type("vim.fault.ReplicationVmConfigFault", "ReplicationVmConfigFault", "vim.fault.ReplicationConfigFault", "vim.version.version7", [["reason", "string", "vim.version.version7", {:optional => true}], ["vmRef", "vim.VirtualMachine", "vim.version.version7", {:optional => true}]])
    create_enum_type("vim.fault.ReplicationVmConfigFault.ReasonForFault", "ReplicationVmConfigFaultReasonForFault", "vim.version.version7", ["incompatibleHwVersion", "invalidVmReplicationId", "invalidGenerationNumber", "outOfBoundsRpoValue", "invalidDestinationIpAddress", "invalidDestinationPort", "invalidExtraVmOptions", "staleGenerationNumber", "reconfigureVmReplicationIdNotAllowed", "cannotRetrieveVmReplicationConfiguration", "replicationAlreadyEnabled", "invalidPriorConfiguration", "replicationNotEnabled", "replicationConfigurationFailed"])
    create_data_type("vim.fault.SharedBusControllerNotSupported", "SharedBusControllerNotSupported", "vim.fault.DeviceNotSupported", "vim.version.version1", nil)
    create_data_type("vim.fault.SnapshotCloneNotSupported", "SnapshotCloneNotSupported", "vim.fault.SnapshotCopyNotSupported", "vim.version.version2", nil)
    create_data_type("vim.fault.SnapshotDisabled", "SnapshotDisabled", "vim.fault.SnapshotFault", "vim.version.version2", nil)
    create_data_type("vim.fault.StorageVmotionIncompatible", "StorageVmotionIncompatible", "vim.fault.VirtualHardwareCompatibilityIssue", "vim.version.version7", [["datastore", "vim.Datastore", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.fault.SwapDatastoreNotWritableOnHost", "SwapDatastoreNotWritableOnHost", "vim.fault.DatastoreNotWritableOnHost", "vim.version.version2", nil)
    create_data_type("vim.fault.UnSupportedDatastoreForVFlash", "UnSupportedDatastoreForVFlash", "vim.fault.UnsupportedDatastore", "vim.version.version9", [["datastoreName", "string", "vim.version.version9"], ["type", "string", "vim.version.version9"]])
    create_data_type("vim.fault.UnconfiguredPropertyValue", "UnconfiguredPropertyValue", "vim.fault.InvalidPropertyValue", "vim.version.version5", nil)
    create_data_type("vim.fault.VMINotSupported", "VMINotSupported", "vim.fault.DeviceNotSupported", "vim.version.version2", nil)
    create_data_type("vim.fault.VMOnConflictDVPort", "VMOnConflictDVPort", "vim.fault.CannotAccessNetwork", "vim.version.version5", nil)
    create_data_type("vim.fault.VMOnVirtualIntranet", "VMOnVirtualIntranet", "vim.fault.CannotAccessNetwork", "vim.version.version1", nil)
    create_data_type("vim.fault.VirtualDiskModeNotSupported", "VirtualDiskModeNotSupported", "vim.fault.DeviceNotSupported", "vim.version.version6", [["mode", "string", "vim.version.version6"]])
    create_data_type("vim.fault.VirtualEthernetCardNotSupported", "VirtualEthernetCardNotSupported", "vim.fault.DeviceNotSupported", "vim.version.version2", nil)
    create_data_type("vim.fault.VmfsAlreadyMounted", "VmfsAlreadyMounted", "vim.fault.VmfsMountFault", "vim.version.version5", nil)
    create_data_type("vim.fault.VmfsAmbiguousMount", "VmfsAmbiguousMount", "vim.fault.VmfsMountFault", "vim.version.version5", nil)
    create_data_type("vim.host.ConfigInfo", "HostConfigInfo", "vmodl.DynamicData", "vim.version.version1", [["host", "vim.HostSystem", "vim.version.version1"], ["product", "vim.AboutInfo", "vim.version.version1"], ["hyperThread", "vim.host.CpuSchedulerSystem.HyperThreadScheduleInfo", "vim.version.version1", {:optional => true}], ["consoleReservation", "vim.host.MemoryManagerSystem.ServiceConsoleReservationInfo", "vim.version.version1", {:optional => true}], ["virtualMachineReservation", "vim.host.MemoryManagerSystem.VirtualMachineReservationInfo", "vim.version.version2", {:optional => true}], ["storageDevice", "vim.host.StorageDeviceInfo", "vim.version.version1", {:optional => true}], ["multipathState", "vim.host.MultipathStateInfo", "vim.version.version5", {:optional => true}], ["fileSystemVolume", "vim.host.FileSystemVolumeInfo", "vim.version.version1", {:optional => true}], ["systemFile", "string[]", "vim.version.version6", {:optional => true}], ["network", "vim.host.NetworkInfo", "vim.version.version1", {:optional => true}], ["vmotion", "vim.host.VMotionInfo", "vim.version.version1", {:optional => true}], ["virtualNicManagerInfo", "vim.host.VirtualNicManagerInfo", "vim.version.version5", {:optional => true}], ["capabilities", "vim.host.NetCapabilities", "vim.version.version1", {:optional => true}], ["datastoreCapabilities", "vim.host.DatastoreSystem.Capabilities", "vim.version.version2", {:optional => true}], ["offloadCapabilities", "vim.host.NetOffloadCapabilities", "vim.version.version1", {:optional => true}], ["service", "vim.host.ServiceInfo", "vim.version.version1", {:optional => true}], ["firewall", "vim.host.FirewallInfo", "vim.version.version1", {:optional => true}], ["autoStart", "vim.host.AutoStartManager.Config", "vim.version.version1", {:optional => true}], ["activeDiagnosticPartition", "vim.host.DiagnosticPartition", "vim.version.version1", {:optional => true}], ["option", "vim.option.OptionValue[]", "vim.version.version1", {:optional => true}], ["optionDef", "vim.option.OptionDef[]", "vim.version.version1", {:optional => true}], ["datastorePrincipal", "string", "vim.version.version1", {:optional => true}], ["localSwapDatastore", "vim.Datastore", "vim.version.version2", {:optional => true}], ["systemSwapConfiguration", "vim.host.SystemSwapConfiguration", "vim.version.version8", {:optional => true}], ["systemResources", "vim.host.SystemResourceInfo", "vim.version.version1", {:optional => true}], ["dateTimeInfo", "vim.host.DateTimeInfo", "vim.version.version2", {:optional => true}], ["flags", "vim.host.FlagInfo", "vim.version.version2", {:optional => true}], ["adminDisabled", "boolean", "vim.version.version2", {:optional => true}], ["ipmi", "vim.host.IpmiInfo", "vim.version.version5", {:optional => true}], ["sslThumbprintInfo", "vim.host.SslThumbprintInfo", "vim.version.version5", {:optional => true}], ["sslThumbprintData", "vim.host.SslThumbprintInfo[]", "vim.version.version7", {:optional => true}], ["certificate", "byte[]", "vim.version.version7", {:optional => true}], ["pciPassthruInfo", "vim.host.PciPassthruInfo[]", "vim.version.version5", {:optional => true}], ["authenticationManagerInfo", "vim.host.AuthenticationManagerInfo", "vim.version.version6", {:optional => true}], ["featureVersion", "vim.host.FeatureVersionInfo[]", "vim.version.version6", {:optional => true}], ["powerSystemCapability", "vim.host.PowerSystem.Capability", "vim.version.version6", {:optional => true}], ["powerSystemInfo", "vim.host.PowerSystem.Info", "vim.version.version6", {:optional => true}], ["cacheConfigurationInfo", "vim.host.CacheConfigurationManager.CacheConfigurationInfo[]", "vim.version.version7", {:optional => true}], ["wakeOnLanCapable", "boolean", "vim.version.version7", {:optional => true}], ["featureCapability", "vim.host.FeatureCapability[]", "vim.version.version8", {:optional => true}], ["maskedFeatureCapability", "vim.host.FeatureCapability[]", "vim.version.version8", {:optional => true}], ["vFlashConfigInfo", "vim.host.VFlashManager.VFlashConfigInfo", "vim.version.version9", {:optional => true}], ["vsanHostConfig", "vim.vsan.host.ConfigInfo", "vim.version.version9", {:optional => true}], ["graphicsInfo", "vim.host.GraphicsInfo[]", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.host.ConnectInfo", "HostConnectInfo", "vmodl.DynamicData", "vim.version.version1", [["serverIp", "string", "vim.version.version1", {:optional => true}], ["inDasCluster", "boolean", "vim.version.version7", {:optional => true}], ["host", "vim.host.Summary", "vim.version.version1"], ["vm", "vim.vm.Summary[]", "vim.version.version1", {:optional => true}], ["vimAccountNameRequired", "boolean", "vim.version.version1", {:optional => true}], ["clusterSupported", "boolean", "vim.version.version1", {:optional => true}], ["network", "vim.host.ConnectInfo.NetworkInfo[]", "vim.version.version1", {:optional => true}], ["datastore", "vim.host.ConnectInfo.DatastoreInfo[]", "vim.version.version1", {:optional => true}], ["license", "vim.host.ConnectInfo.LicenseInfo", "vim.version.version5", {:optional => true}]])
    create_data_type("vim.host.ConnectInfo.NetworkInfo", "HostConnectInfoNetworkInfo", "vmodl.DynamicData", "vim.version.version1", [["summary", "vim.Network.Summary", "vim.version.version1"]])
    create_data_type("vim.host.ConnectInfo.NewNetworkInfo", "HostNewNetworkConnectInfo", "vim.host.ConnectInfo.NetworkInfo", "vim.version.version1", nil)
    create_data_type("vim.host.ConnectInfo.DatastoreInfo", "HostDatastoreConnectInfo", "vmodl.DynamicData", "vim.version.version1", [["summary", "vim.Datastore.Summary", "vim.version.version1"]])
    create_data_type("vim.host.ConnectInfo.DatastoreExistsInfo", "HostDatastoreExistsConnectInfo", "vim.host.ConnectInfo.DatastoreInfo", "vim.version.version1", [["newDatastoreName", "string", "vim.version.version1"]])
    create_data_type("vim.host.ConnectInfo.DatastoreNameConflictInfo", "HostDatastoreNameConflictConnectInfo", "vim.host.ConnectInfo.DatastoreInfo", "vim.version.version1", [["newDatastoreName", "string", "vim.version.version1"]])
    create_data_type("vim.host.ConnectInfo.LicenseInfo", "HostLicenseConnectInfo", "vmodl.DynamicData", "vim.version.version5", [["license", "vim.LicenseManager.LicenseInfo", "vim.version.version5"], ["evaluation", "vim.LicenseManager.EvaluationInfo", "vim.version.version5"], ["resource", "vim.LicenseManager.LicensableResourceInfo", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.host.VmfsDatastoreInfo", "VmfsDatastoreInfo", "vim.Datastore.Info", "vim.version.version1", [["maxPhysicalRDMFileSize", "long", "vim.version.version8"], ["maxVirtualRDMFileSize", "long", "vim.version.version8"], ["vmfs", "vim.host.VmfsVolume", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.NasDatastoreInfo", "NasDatastoreInfo", "vim.Datastore.Info", "vim.version.version1", [["nas", "vim.host.NasVolume", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.LocalDatastoreInfo", "LocalDatastoreInfo", "vim.Datastore.Info", "vim.version.version1", [["path", "string", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.VmfsDatastoreCreateSpec", "VmfsDatastoreCreateSpec", "vim.host.VmfsDatastoreSpec", "vim.version.version1", [["partition", "vim.host.DiskPartitionInfo.Specification", "vim.version.version1"], ["vmfs", "vim.host.VmfsVolume.Specification", "vim.version.version1"], ["extent", "vim.host.ScsiDisk.Partition[]", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.VmfsDatastoreExtendSpec", "VmfsDatastoreExtendSpec", "vim.host.VmfsDatastoreSpec", "vim.version.version1", [["partition", "vim.host.DiskPartitionInfo.Specification", "vim.version.version1"], ["extent", "vim.host.ScsiDisk.Partition[]", "vim.version.version1"]])
    create_data_type("vim.host.VmfsDatastoreExpandSpec", "VmfsDatastoreExpandSpec", "vim.host.VmfsDatastoreSpec", "vim.version.version5", [["partition", "vim.host.DiskPartitionInfo.Specification", "vim.version.version5"], ["extent", "vim.host.ScsiDisk.Partition", "vim.version.version5"]])
    create_data_type("vim.host.DiagnosticPartition", "HostDiagnosticPartition", "vmodl.DynamicData", "vim.version.version1", [["storageType", "string", "vim.version.version1"], ["diagnosticType", "string", "vim.version.version1"], ["slots", "int", "vim.version.version1"], ["id", "vim.host.ScsiDisk.Partition", "vim.version.version1"]])
    create_enum_type("vim.host.DiagnosticPartition.StorageType", "DiagnosticPartitionStorageType", "vim.version.version1", ["directAttached", "networkAttached"])
    create_enum_type("vim.host.DiagnosticPartition.DiagnosticType", "DiagnosticPartitionType", "vim.version.version1", ["singleHost", "multiHost"])
    create_data_type("vim.host.DiagnosticPartition.CreateOption", "HostDiagnosticPartitionCreateOption", "vmodl.DynamicData", "vim.version.version1", [["storageType", "string", "vim.version.version1"], ["diagnosticType", "string", "vim.version.version1"], ["disk", "vim.host.ScsiDisk", "vim.version.version1"]])
    create_data_type("vim.host.DiagnosticPartition.CreateSpec", "HostDiagnosticPartitionCreateSpec", "vmodl.DynamicData", "vim.version.version1", [["storageType", "string", "vim.version.version1"], ["diagnosticType", "string", "vim.version.version1"], ["id", "vim.host.ScsiDisk.Partition", "vim.version.version1"], ["partition", "vim.host.DiskPartitionInfo.Specification", "vim.version.version1"], ["active", "boolean", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.host.DiagnosticPartition.CreateDescription", "HostDiagnosticPartitionCreateDescription", "vmodl.DynamicData", "vim.version.version1", [["layout", "vim.host.DiskPartitionInfo.Layout", "vim.version.version1"], ["diskUuid", "string", "vim.version.version1"], ["spec", "vim.host.DiagnosticPartition.CreateSpec", "vim.version.version1"]])
    create_data_type("vim.host.RuntimeInfo", "HostRuntimeInfo", "vmodl.DynamicData", "vim.version.version1", [["connectionState", "vim.HostSystem.ConnectionState", "vim.version.version1"], ["powerState", "vim.HostSystem.PowerState", "vim.version.version2"], ["standbyMode", "string", "vim.version.version6", {:optional => true}], ["inMaintenanceMode", "boolean", "vim.version.version1"], ["bootTime", "vmodl.DateTime", "vim.version.version1", {:optional => true}], ["healthSystemRuntime", "vim.host.HealthStatusSystem.Runtime", "vim.version.version2", {:optional => true}], ["dasHostState", "vim.cluster.DasFdmHostState", "vim.version.version7", {:optional => true}], ["tpmPcrValues", "vim.host.TpmDigestInfo[]", "vim.version.version5", {:optional => true}], ["vsanRuntimeInfo", "vim.vsan.host.VsanRuntimeInfo", "vim.version.version9", {:optional => true}], ["networkRuntimeInfo", "vim.host.RuntimeInfo.NetworkRuntimeInfo", "vim.version.version9", {:optional => true}], ["vFlashResourceRuntimeInfo", "vim.host.VFlashManager.VFlashResourceRunTimeInfo", "vim.version.version9", {:optional => true}], ["hostMaxVirtualDiskCapacity", "long", "vim.version.version9", {:optional => true}]])
    create_data_type("vim.host.RuntimeInfo.NetStackInstanceRuntimeInfo", "HostRuntimeInfoNetStackInstanceRuntimeInfo", "vmodl.DynamicData", "vim.version.version9", [["netStackInstanceKey", "string", "vim.version.version9"], ["state", "string", "vim.version.version9", {:optional => true}], ["vmknicKeys", "string[]", "vim.version.version9", {:optional => true}], ["maxNumberOfConnections", "int", "vim.version.version9", {:optional => true}], ["currentIpV6Enabled", "boolean", "vim.version.version9", {:optional => true}]])
    create_enum_type("vim.host.RuntimeInfo.NetStackInstanceRuntimeInfo.State", "HostRuntimeInfoNetStackInstanceRuntimeInfoState", "vim.version.version9", ["inactive", "active", "deactivating", "activating"])
    create_data_type("vim.host.RuntimeInfo.NetworkRuntimeInfo", "HostRuntimeInfoNetworkRuntimeInfo", "vmodl.DynamicData", "vim.version.version9", [["netStackInstanceRuntimeInfo", "vim.host.RuntimeInfo.NetStackInstanceRuntimeInfo[]", "vim.version.version9", {:optional => true}]])
    create_managed_type("vim.host.StorageSystem", "HostStorageSystem", "vim.ExtensibleManagedObject", "vim.version.version1", [["storageDeviceInfo", "vim.host.StorageDeviceInfo", "vim.version.version1", {:optional => true}, nil], ["fileSystemVolumeInfo", "vim.host.FileSystemVolumeInfo", "vim.version.version1", {}, nil], ["systemFile", "string[]", "vim.version.version6", {:optional => true}, nil], ["multipathStateInfo", "vim.host.MultipathStateInfo", "vim.version.version5", {:optional => true}, nil]], [["retrieveDiskPartitionInfo", "RetrieveDiskPartitionInfo", "vim.version.version1", [["devicePath", "string[]", "vim.version.version1", {}, nil]], [{:optional => true}, "vim.host.DiskPartitionInfo[]", "vim.host.DiskPartitionInfo[]"], "System.Read", nil], ["computeDiskPartitionInfo", "ComputeDiskPartitionInfo", "vim.version.version1", [["devicePath", "string", "vim.version.version1", {}, nil], ["layout", "vim.host.DiskPartitionInfo.Layout", "vim.version.version1", {}, nil], ["partitionFormat", "string", "vim.version.version7", {:optional => true}, nil]], [{}, "vim.host.DiskPartitionInfo", "vim.host.DiskPartitionInfo"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["computeDiskPartitionInfoForResize", "ComputeDiskPartitionInfoForResize", "vim.version.version5", [["partition", "vim.host.ScsiDisk.Partition", "vim.version.version5", {}, nil], ["blockRange", "vim.host.DiskPartitionInfo.BlockRange", "vim.version.version5", {}, nil], ["partitionFormat", "string", "vim.version.version7", {:optional => true}, nil]], [{}, "vim.host.DiskPartitionInfo", "vim.host.DiskPartitionInfo"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["updateDiskPartitions", "UpdateDiskPartitions", "vim.version.version1", [["devicePath", "string", "vim.version.version1", {}, nil], ["spec", "vim.host.DiskPartitionInfo.Specification", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["formatVmfs", "FormatVmfs", "vim.version.version1", [["createSpec", "vim.host.VmfsVolume.Specification", "vim.version.version1", {}, nil]], [{}, "vim.host.VmfsVolume", "vim.host.VmfsVolume"], "Host.Config.Storage", ["vim.fault.AlreadyExists", "vim.fault.HostConfigFault"]], ["mountVmfsVolume", "MountVmfsVolume", "vim.version.version7", [["vmfsUuid", "string", "vim.version.version7", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.InvalidState", "vim.fault.HostConfigFault", "vim.fault.ResourceInUse"]], ["unmountVmfsVolume", "UnmountVmfsVolume", "vim.version.version7", [["vmfsUuid", "string", "vim.version.version7", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.InvalidState", "vim.fault.HostConfigFault", "vim.fault.ResourceInUse"]], ["deleteVmfsVolumeState", "DeleteVmfsVolumeState", "vim.version.version7", [["vmfsUuid", "string", "vim.version.version7", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.HostConfigFault"]], ["rescanVmfs", "RescanVmfs", "vim.version.version1", [], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.HostConfigFault"]], ["attachVmfsExtent", "AttachVmfsExtent", "vim.version.version1", [["vmfsPath", "string", "vim.version.version1", {}, nil], ["extent", "vim.host.ScsiDisk.Partition", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["expandVmfsExtent", "ExpandVmfsExtent", "vim.version.version5", [["vmfsPath", "string", "vim.version.version5", {}, nil], ["extent", "vim.host.ScsiDisk.Partition", "vim.version.version5", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["upgradeVmfs", "UpgradeVmfs", "vim.version.version1", [["vmfsPath", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["upgradeVmLayout", "UpgradeVmLayout", "vim.version.version1", [], [{}, "void", "void"], "Host.Config.Storage", nil], ["queryUnresolvedVmfsVolume", "QueryUnresolvedVmfsVolume", "vim.version.version5", [], [{:optional => true}, "vim.host.UnresolvedVmfsVolume[]", "vim.host.UnresolvedVmfsVolume[]"], "System.Read", nil], ["resolveMultipleUnresolvedVmfsVolumes", "ResolveMultipleUnresolvedVmfsVolumes", "vim.version.version5", [["resolutionSpec", "vim.host.UnresolvedVmfsResolutionSpec[]", "vim.version.version5", {}, nil]], [{:optional => true}, "vim.host.UnresolvedVmfsResolutionResult[]", "vim.host.UnresolvedVmfsResolutionResult[]"], "Host.Config.Storage", ["vim.fault.HostConfigFault"]], ["resolveMultipleUnresolvedVmfsVolumesEx", "ResolveMultipleUnresolvedVmfsVolumesEx_Task", "vim.version.version9", [["resolutionSpec", "vim.host.UnresolvedVmfsResolutionSpec[]", "vim.version.version9", {}, nil]], [{:optional => true}, "vim.Task", "vim.host.UnresolvedVmfsResolutionResult[]"], "Host.Config.Storage", ["vim.fault.HostConfigFault"]], ["unmountForceMountedVmfsVolume", "UnmountForceMountedVmfsVolume", "vim.version.version5", [["vmfsUuid", "string", "vim.version.version5", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["rescanHba", "RescanHba", "vim.version.version1", [["hbaDevice", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["rescanAllHba", "RescanAllHba", "vim.version.version1", [], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.HostConfigFault"]], ["updateSoftwareInternetScsiEnabled", "UpdateSoftwareInternetScsiEnabled", "vim.version.version1", [["enabled", "boolean", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.HostConfigFault"]], ["updateInternetScsiDiscoveryProperties", "UpdateInternetScsiDiscoveryProperties", "vim.version.version1", [["iScsiHbaDevice", "string", "vim.version.version1", {}, nil], ["discoveryProperties", "vim.host.InternetScsiHba.DiscoveryProperties", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["updateInternetScsiAuthenticationProperties", "UpdateInternetScsiAuthenticationProperties", "vim.version.version1", [["iScsiHbaDevice", "string", "vim.version.version1", {}, nil], ["authenticationProperties", "vim.host.InternetScsiHba.AuthenticationProperties", "vim.version.version1", {}, nil], ["targetSet", "vim.host.InternetScsiHba.TargetSet", "vim.version.version5", {:optional => true}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["updateInternetScsiDigestProperties", "UpdateInternetScsiDigestProperties", "vim.version.version5", [["iScsiHbaDevice", "string", "vim.version.version5", {}, nil], ["targetSet", "vim.host.InternetScsiHba.TargetSet", "vim.version.version5", {:optional => true}, nil], ["digestProperties", "vim.host.InternetScsiHba.DigestProperties", "vim.version.version5", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["updateInternetScsiAdvancedOptions", "UpdateInternetScsiAdvancedOptions", "vim.version.version5", [["iScsiHbaDevice", "string", "vim.version.version5", {}, nil], ["targetSet", "vim.host.InternetScsiHba.TargetSet", "vim.version.version5", {:optional => true}, nil], ["options", "vim.host.InternetScsiHba.ParamValue[]", "vim.version.version5", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["updateInternetScsiIPProperties", "UpdateInternetScsiIPProperties", "vim.version.version1", [["iScsiHbaDevice", "string", "vim.version.version1", {}, nil], ["ipProperties", "vim.host.InternetScsiHba.IPProperties", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["updateInternetScsiName", "UpdateInternetScsiName", "vim.version.version1", [["iScsiHbaDevice", "string", "vim.version.version1", {}, nil], ["iScsiName", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["updateInternetScsiAlias", "UpdateInternetScsiAlias", "vim.version.version1", [["iScsiHbaDevice", "string", "vim.version.version1", {}, nil], ["iScsiAlias", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["addInternetScsiSendTargets", "AddInternetScsiSendTargets", "vim.version.version1", [["iScsiHbaDevice", "string", "vim.version.version1", {}, nil], ["targets", "vim.host.InternetScsiHba.SendTarget[]", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["removeInternetScsiSendTargets", "RemoveInternetScsiSendTargets", "vim.version.version1", [["iScsiHbaDevice", "string", "vim.version.version1", {}, nil], ["targets", "vim.host.InternetScsiHba.SendTarget[]", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["addInternetScsiStaticTargets", "AddInternetScsiStaticTargets", "vim.version.version1", [["iScsiHbaDevice", "string", "vim.version.version1", {}, nil], ["targets", "vim.host.InternetScsiHba.StaticTarget[]", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["removeInternetScsiStaticTargets", "RemoveInternetScsiStaticTargets", "vim.version.version1", [["iScsiHbaDevice", "string", "vim.version.version1", {}, nil], ["targets", "vim.host.InternetScsiHba.StaticTarget[]", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["enableMultipathPath", "EnableMultipathPath", "vim.version.version1", [["pathName", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["disableMultipathPath", "DisableMultipathPath", "vim.version.version1", [["pathName", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["setMultipathLunPolicy", "SetMultipathLunPolicy", "vim.version.version1", [["lunId", "string", "vim.version.version1", {}, nil], ["policy", "vim.host.MultipathInfo.LogicalUnitPolicy", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["queryPathSelectionPolicyOptions", "QueryPathSelectionPolicyOptions", "vim.version.version5", [], [{:optional => true}, "vim.host.PathSelectionPolicyOption[]", "vim.host.PathSelectionPolicyOption[]"], "System.Read", ["vim.fault.HostConfigFault"]], ["queryStorageArrayTypePolicyOptions", "QueryStorageArrayTypePolicyOptions", "vim.version.version5", [], [{:optional => true}, "vim.host.StorageArrayTypePolicyOption[]", "vim.host.StorageArrayTypePolicyOption[]"], "System.Read", ["vim.fault.HostConfigFault"]], ["updateScsiLunDisplayName", "UpdateScsiLunDisplayName", "vim.version.version5", [["lunUuid", "string", "vim.version.version5", {}, nil], ["displayName", "string", "vim.version.version5", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault", "vim.fault.InvalidName", "vim.fault.DuplicateName"]], ["detachScsiLun", "DetachScsiLun", "vim.version.version7", [["lunUuid", "string", "vim.version.version7", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault", "vim.fault.InvalidState", "vim.fault.ResourceInUse"]], ["deleteScsiLunState", "DeleteScsiLunState", "vim.version.version7", [["lunCanonicalName", "string", "vim.version.version7", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.HostConfigFault"]], ["attachScsiLun", "AttachScsiLun", "vim.version.version7", [["lunUuid", "string", "vim.version.version7", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault", "vim.fault.InvalidState"]], ["refresh", "RefreshStorageSystem", "vim.version.version1", [], [{}, "void", "void"], "Host.Config.Storage", nil], ["discoverFcoeHbas", "DiscoverFcoeHbas", "vim.version.version7", [["fcoeSpec", "vim.host.FcoeConfig.FcoeSpecification", "vim.version.version7", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.FcoeFaultPnicHasNoPortSet", "vim.fault.HostConfigFault", "vim.fault.NotFound"]], ["markForRemoval", "MarkForRemoval", "vim.version.version7", [["hbaName", "string", "vim.version.version7", {}, nil], ["remove", "boolean", "vim.version.version7", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["formatVffs", "FormatVffs", "vim.version.version9", [["createSpec", "vim.host.VffsVolume.Specification", "vim.version.version9", {}, nil]], [{}, "vim.host.VffsVolume", "vim.host.VffsVolume"], "Host.Config.Storage", ["vim.fault.AlreadyExists", "vim.fault.HostConfigFault", "vim.fault.ResourceInUse"]], ["extendVffs", "ExtendVffs", "vim.version.version9", [["vffsPath", "string", "vim.version.version9", {}, nil], ["devicePath", "string", "vim.version.version9", {}, nil], ["spec", "vim.host.DiskPartitionInfo.Specification", "vim.version.version9", {:optional => true}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault", "vim.fault.ResourceInUse"]], ["destroyVffs", "DestroyVffs", "vim.version.version9", [["vffsPath", "string", "vim.version.version9", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault", "vim.fault.ResourceInUse"]], ["mountVffsVolume", "MountVffsVolume", "vim.version.version9", [["vffsUuid", "string", "vim.version.version9", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.InvalidState", "vim.fault.HostConfigFault", "vim.fault.ResourceInUse"]], ["unmountVffsVolume", "UnmountVffsVolume", "vim.version.version9", [["vffsUuid", "string", "vim.version.version9", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.InvalidState", "vim.fault.HostConfigFault", "vim.fault.ResourceInUse"]], ["deleteVffsVolumeState", "DeleteVffsVolumeState", "vim.version.version9", [["vffsUuid", "string", "vim.version.version9", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.HostConfigFault"]], ["rescanVffs", "RescanVffs", "vim.version.version9", [], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.HostConfigFault"]], ["queryAvailableSsds", "QueryAvailableSsds", "vim.version.version9", [["vffsPath", "string", "vim.version.version9", {:optional => true}, nil]], [{:optional => true}, "vim.host.ScsiDisk[]", "vim.host.ScsiDisk[]"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]]])
    create_enum_type("vim.host.VMotionManager.VMotionType", "HostVMotionManagerVMotionType", "vim.version.version5", ["vmotion", "fast_suspend_resume", "fault_tolerance", "disks_only", "memory_mirror"])
    create_managed_type("vim.view.ContainerView", "ContainerView", "vim.view.ManagedObjectView", "vim.version.version2", [["container", "vim.ManagedEntity", "vim.version.version2", {}, nil], ["type", "vmodl.TypeName[]", "vim.version.version2", {:optional => true}, nil], ["recursive", "boolean", "vim.version.version2", {}, nil]], nil)
    create_managed_type("vim.view.InventoryView", "InventoryView", "vim.view.ManagedObjectView", "vim.version.version2", nil, [["openFolder", "OpenInventoryViewFolder", "vim.version.version2", [["entity", "vim.ManagedEntity[]", "vim.version.version2", {}, "System.View"]], [{:optional => true}, "vim.ManagedEntity[]", "vim.ManagedEntity[]"], nil, nil], ["closeFolder", "CloseInventoryViewFolder", "vim.version.version2", [["entity", "vim.ManagedEntity[]", "vim.version.version2", {}, "System.View"]], [{:optional => true}, "vim.ManagedEntity[]", "vim.ManagedEntity[]"], nil, nil]])
    create_managed_type("vim.view.ListView", "ListView", "vim.view.ManagedObjectView", "vim.version.version2", nil, [["modify", "ModifyListView", "vim.version.version2", [["add", "vmodl.ManagedObject[]", "vim.version.version2", {:optional => true}, "System.View"], ["remove", "vmodl.ManagedObject[]", "vim.version.version2", {:optional => true}, "System.View"]], [{:optional => true}, "vmodl.ManagedObject[]", "vmodl.ManagedObject[]"], nil, nil], ["reset", "ResetListView", "vim.version.version2", [["obj", "vmodl.ManagedObject[]", "vim.version.version2", {:optional => true}, "System.View"]], [{:optional => true}, "vmodl.ManagedObject[]", "vmodl.ManagedObject[]"], nil, nil], ["resetFromView", "ResetListViewFromView", "vim.version.version2", [["view", "vim.view.View", "vim.version.version2", {}, nil]], [{}, "void", "void"], nil, nil]])
    create_data_type("vim.vm.DatastoreInfo", "VirtualMachineDatastoreInfo", "vim.vm.TargetInfo", "vim.version.version1", [["datastore", "vim.Datastore.Summary", "vim.version.version1"], ["capability", "vim.Datastore.Capability", "vim.version.version1"], ["maxFileSize", "long", "vim.version.version1"], ["maxVirtualDiskCapacity", "long", "vim.version.version9", {:optional => true}], ["mode", "string", "vim.version.version1"], ["vStorageSupport", "string", "vim.version.version7", {:optional => true}]])
    create_data_type("vim.vm.device.ParaVirtualSCSIController", "ParaVirtualSCSIController", "vim.vm.device.VirtualSCSIController", "vim.version.version4", nil)
    create_data_type("vim.vm.device.ParaVirtualSCSIControllerOption", "ParaVirtualSCSIControllerOption", "vim.vm.device.VirtualSCSIControllerOption", "vim.version.version4", nil)
    create_data_type("vim.vm.device.VirtualAHCIController", "VirtualAHCIController", "vim.vm.device.VirtualSATAController", "vim.version.version9", nil)
    create_data_type("vim.vm.device.VirtualAHCIControllerOption", "VirtualAHCIControllerOption", "vim.vm.device.VirtualSATAControllerOption", "vim.version.version9", nil)
    create_data_type("vim.vm.device.VirtualBusLogicController", "VirtualBusLogicController", "vim.vm.device.VirtualSCSIController", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualBusLogicControllerOption", "VirtualBusLogicControllerOption", "vim.vm.device.VirtualSCSIControllerOption", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualLsiLogicController", "VirtualLsiLogicController", "vim.vm.device.VirtualSCSIController", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualLsiLogicControllerOption", "VirtualLsiLogicControllerOption", "vim.vm.device.VirtualSCSIControllerOption", "vim.version.version1", nil)
    create_data_type("vim.vm.device.VirtualLsiLogicSASController", "VirtualLsiLogicSASController", "vim.vm.device.VirtualSCSIController", "vim.version.version4", nil)
    create_data_type("vim.vm.device.VirtualLsiLogicSASControllerOption", "VirtualLsiLogicSASControllerOption", "vim.vm.device.VirtualSCSIControllerOption", "vim.version.version4", nil)
    create_managed_type("vim.ClusterComputeResource", "ClusterComputeResource", "vim.ComputeResource", "vim.version.version1", [["configuration", "vim.cluster.ConfigInfo", "vim.version.version1", {}, nil], ["recommendation", "vim.cluster.Recommendation[]", "vim.version.version2", {:optional => true}, "System.Read"], ["drsRecommendation", "vim.cluster.DrsRecommendation[]", "vim.version.version1", {:optional => true}, nil], ["migrationHistory", "vim.cluster.DrsMigration[]", "vim.version.version1", {:optional => true}, nil], ["actionHistory", "vim.cluster.ActionHistory[]", "vim.version.version2", {:optional => true}, nil], ["drsFault", "vim.cluster.DrsFaults[]", "vim.version.version5", {:optional => true}, "System.Read"]], [["reconfigure", "ReconfigureCluster_Task", "vim.version.version1", [["spec", "vim.cluster.ConfigSpec", "vim.version.version1", {}, nil], ["modify", "boolean", "vim.version.version1", {}, nil]], [{}, "vim.Task", "void"], "Host.Inventory.EditCluster", nil], ["applyRecommendation", "ApplyRecommendation", "vim.version.version1", [["key", "string", "vim.version.version1", {}, nil]], [{}, "void", "void"], nil, nil], ["cancelRecommendation", "CancelRecommendation", "vim.version.version6", [["key", "string", "vim.version.version6", {}, nil]], [{}, "void", "void"], "System.Read", nil], ["recommendHostsForVm", "RecommendHostsForVm", "vim.version.version1", [["vm", "vim.VirtualMachine", "vim.version.version1", {}, nil], ["pool", "vim.ResourcePool", "vim.version.version1", {:optional => true}, nil]], [{:optional => true}, "vim.cluster.HostRecommendation[]", "vim.cluster.HostRecommendation[]"], "System.Read", nil], ["addHost", "AddHost_Task", "vim.version.version1", [["spec", "vim.host.ConnectSpec", "vim.version.version1", {}, nil], ["asConnected", "boolean", "vim.version.version1", {}, nil], ["resourcePool", "vim.ResourcePool", "vim.version.version1", {:optional => true}, "Resource.AssignVMToPool"], ["license", "string", "vim.version.version5", {:optional => true}, nil]], [{}, "vim.Task", "vim.HostSystem"], "Host.Inventory.AddHostToCluster", ["vim.fault.InvalidLogin", "vim.fault.HostConnectFault", "vim.fault.DuplicateName"]], ["moveInto", "MoveInto_Task", "vim.version.version1", [["host", "vim.HostSystem[]", "vim.version.version1", {}, "Host.Inventory.MoveHost"]], [{}, "vim.Task", "void"], "Host.Inventory.EditCluster", ["vim.fault.DuplicateName", "vim.fault.TooManyHosts", "vim.fault.InvalidState"]], ["moveHostInto", "MoveHostInto_Task", "vim.version.version1", [["host", "vim.HostSystem", "vim.version.version1", {}, "Host.Inventory.MoveHost"], ["resourcePool", "vim.ResourcePool", "vim.version.version1", {:optional => true}, nil]], [{}, "vim.Task", "void"], "Host.Inventory.EditCluster", ["vim.fault.TooManyHosts", "vim.fault.InvalidState"]], ["refreshRecommendation", "RefreshRecommendation", "vim.version.version2", [], [{}, "void", "void"], "Host.Inventory.EditCluster", nil], ["retrieveDasAdvancedRuntimeInfo", "RetrieveDasAdvancedRuntimeInfo", "vim.version.version5", [], [{:optional => true}, "vim.cluster.DasAdvancedRuntimeInfo", "vim.cluster.DasAdvancedRuntimeInfo"], "System.Read", nil], ["enterMaintenanceMode", "ClusterEnterMaintenanceMode", "vim.version.version7", [["host", "vim.HostSystem[]", "vim.version.version7", {}, "Host.Config.Maintenance"], ["option", "vim.option.OptionValue[]", "vim.version.version7", {:optional => true}, nil]], [{}, "vim.cluster.EnterMaintenanceResult", "vim.cluster.EnterMaintenanceResult"], "System.View", nil]])
    create_data_type("vim.ClusterComputeResource.Summary", "ClusterComputeResourceSummary", "vim.ComputeResource.Summary", "vim.version.version1", [["currentFailoverLevel", "int", "vim.version.version1"], ["admissionControlInfo", "vim.cluster.DasAdmissionControlInfo", "vim.version.version5", {:optional => true}], ["numVmotions", "int", "vim.version.version1"], ["targetBalance", "int", "vim.version.version5", {:optional => true}], ["currentBalance", "int", "vim.version.version5", {:optional => true}], ["currentEVCModeKey", "string", "vim.version.version5", {:optional => true}], ["dasData", "vim.cluster.DasData", "vim.version.version7", {:optional => true}]])
    create_enum_type("vim.dvs.HostDistributedVirtualSwitchManager.NetworkResourcePoolKey", "HostDistributedVirtualSwitchManagerNetworkResourcePoolKey", "vim.version.version6", ["faultTolerance", "hbr", "iSCSI", "management", "nfs", "virtualMachine", "vmotion", "vsan"])
    create_enum_type("vim.dvs.HostDistributedVirtualSwitchManager.FetchPortOption", "HostDistributedVirtualSwitchManagerFetchPortOption", "vim.version.version7", ["runtimeInfoOnly", "statsOnly", "stateBlobOnly"])
    create_data_type("vim.fault.ConnectedIso", "ConnectedIso", "vim.fault.OvfExport", "vim.version.version5", [["cdrom", "vim.vm.device.VirtualCdrom", "vim.version.version5"], ["filename", "string", "vim.version.version5"]])
    create_data_type("vim.fault.CpuCompatibilityUnknown", "CpuCompatibilityUnknown", "vim.fault.CpuIncompatible", "vim.version.version1", nil)
    create_data_type("vim.fault.DeviceBackingNotSupported", "DeviceBackingNotSupported", "vim.fault.DeviceNotSupported", "vim.version.version2", [["backing", "string", "vim.version.version2"]])
    create_data_type("vim.fault.DeviceControllerNotSupported", "DeviceControllerNotSupported", "vim.fault.DeviceNotSupported", "vim.version.version2", [["controller", "string", "vim.version.version2"]])
    create_data_type("vim.fault.DeviceHotPlugNotSupported", "DeviceHotPlugNotSupported", "vim.fault.InvalidDeviceSpec", "vim.version.version4", nil)
    create_data_type("vim.fault.DeviceNotFound", "DeviceNotFound", "vim.fault.InvalidDeviceSpec", "vim.version.version1", nil)
    create_data_type("vim.fault.DeviceUnsupportedForVmPlatform", "DeviceUnsupportedForVmPlatform", "vim.fault.InvalidDeviceSpec", "vim.version.version4", nil)
    create_data_type("vim.fault.DeviceUnsupportedForVmVersion", "DeviceUnsupportedForVmVersion", "vim.fault.InvalidDeviceSpec", "vim.version.version4", [["currentVersion", "string", "vim.version.version4"], ["expectedVersion", "string", "vim.version.version4"]])
    create_data_type("vim.fault.DisallowedDiskModeChange", "DisallowedDiskModeChange", "vim.fault.InvalidDeviceSpec", "vim.version.version1", nil)
    create_data_type("vim.fault.InvalidController", "InvalidController", "vim.fault.InvalidDeviceSpec", "vim.version.version1", [["controllerKey", "int", "vim.version.version1"]])
    create_data_type("vim.fault.InvalidDeviceBacking", "InvalidDeviceBacking", "vim.fault.InvalidDeviceSpec", "vim.version.version1", nil)
    create_data_type("vim.fault.InvalidDeviceOperation", "InvalidDeviceOperation", "vim.fault.InvalidDeviceSpec", "vim.version.version1", [["badOp", "vim.vm.device.VirtualDeviceSpec.Operation", "vim.version.version1", {:optional => true}], ["badFileOp", "vim.vm.device.VirtualDeviceSpec.FileOperation", "vim.version.version1", {:optional => true}]])
    create_data_type("vim.fault.InvalidHostConnectionState", "InvalidHostConnectionState", "vim.fault.InvalidHostState", "vim.version.version8", nil)
    create_data_type("vim.fault.OvfConnectedDevice", "OvfConnectedDevice", "vim.fault.OvfHardwareExport", "vim.version.version5", nil)
    create_data_type("vim.fault.OvfConnectedDeviceFloppy", "OvfConnectedDeviceFloppy", "vim.fault.OvfConnectedDevice", "vim.version.version5", [["filename", "string", "vim.version.version5"]])
    create_data_type("vim.fault.OvfConnectedDeviceIso", "OvfConnectedDeviceIso", "vim.fault.OvfConnectedDevice", "vim.version.version5", [["filename", "string", "vim.version.version5"]])
    create_data_type("vim.fault.OvfDuplicateElement", "OvfDuplicateElement", "vim.fault.OvfElement", "vim.version.version5", nil)
    create_data_type("vim.fault.OvfDuplicatedElementBoundary", "OvfDuplicatedElementBoundary", "vim.fault.OvfElement", "vim.version.version5", [["boundary", "string", "vim.version.version5"]])
    create_data_type("vim.fault.OvfDuplicatedPropertyIdExport", "OvfDuplicatedPropertyIdExport", "vim.fault.OvfExport", "vim.version.version7", [["fqid", "string", "vim.version.version7"]])
    create_data_type("vim.fault.OvfDuplicatedPropertyIdImport", "OvfDuplicatedPropertyIdImport", "vim.fault.OvfExport", "vim.version.version7", nil)
    create_data_type("vim.fault.OvfNoSpaceOnController", "OvfNoSpaceOnController", "vim.fault.OvfUnsupportedElement", "vim.version.version7", [["parent", "string", "vim.version.version7"]])
    create_data_type("vim.fault.PhysCompatRDMNotSupported", "PhysCompatRDMNotSupported", "vim.fault.RDMNotSupported", "vim.version.version1", nil)
    create_data_type("vim.fault.UnusedVirtualDiskBlocksNotScrubbed", "UnusedVirtualDiskBlocksNotScrubbed", "vim.fault.DeviceBackingNotSupported", "vim.version.version5", nil)
    create_data_type("vim.fault.VirtualDiskBlocksNotFullyProvisioned", "VirtualDiskBlocksNotFullyProvisioned", "vim.fault.DeviceBackingNotSupported", "vim.version.version5", nil)
    create_managed_type("vim.host.DiagnosticSystem", "HostDiagnosticSystem", "vmodl.ManagedObject", "vim.version.version1", [["activePartition", "vim.host.DiagnosticPartition", "vim.version.version1", {:optional => true}, nil]], [["queryAvailablePartition", "QueryAvailablePartition", "vim.version.version1", [], [{:optional => true}, "vim.host.DiagnosticPartition[]", "vim.host.DiagnosticPartition[]"], "Host.Config.Storage", ["vim.fault.HostConfigFault"]], ["selectActivePartition", "SelectActivePartition", "vim.version.version1", [["partition", "vim.host.ScsiDisk.Partition", "vim.version.version1", {:optional => true}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["queryPartitionCreateOptions", "QueryPartitionCreateOptions", "vim.version.version1", [["storageType", "string", "vim.version.version1", {}, nil], ["diagnosticType", "string", "vim.version.version1", {}, nil]], [{:optional => true}, "vim.host.DiagnosticPartition.CreateOption[]", "vim.host.DiagnosticPartition.CreateOption[]"], "Host.Config.Storage", ["vim.fault.HostConfigFault"]], ["queryPartitionCreateDesc", "QueryPartitionCreateDesc", "vim.version.version1", [["diskUuid", "string", "vim.version.version1", {}, nil], ["diagnosticType", "string", "vim.version.version1", {}, nil]], [{}, "vim.host.DiagnosticPartition.CreateDescription", "vim.host.DiagnosticPartition.CreateDescription"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]], ["createDiagnosticPartition", "CreateDiagnosticPartition", "vim.version.version1", [["spec", "vim.host.DiagnosticPartition.CreateSpec", "vim.version.version1", {}, nil]], [{}, "void", "void"], "Host.Config.Storage", ["vim.fault.NotFound", "vim.fault.HostConfigFault"]]])
    create_data_type("vim.fault.DVPortNotSupported", "DVPortNotSupported", "vim.fault.DeviceBackingNotSupported", "vim.version.version6", nil)
  end
end

