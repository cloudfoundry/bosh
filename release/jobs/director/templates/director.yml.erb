---
name: <%= p('director.name') %>
port: <%= p('director.backend_port') %>
encryption: <%= p('director.encryption') %>
<% if_p("director.max_tasks") do |max_tasks| %>
max_tasks: <%= max_tasks %>
<% end %>
<% if_p("director.max_threads") do |max_threads| %>
max_threads: <%= max_threads %>
 <% end %>
logging:
  level: DEBUG
  file: /var/vcap/sys/log/director/<%%= ENV["COMPONENT"] %>.debug.log
redis:
  host: <%= p('redis.address') %>
  port: <%= p('redis.port') %>
  password: <%= p('redis.password') %>
  <% if_p("redis.loglevel") do |redis_loglevel| %>
  logging:
    level: <%= redis_loglevel %>
  <% end %>
mbus: nats://<%= p('nats.user') %>:<%= p('nats.password') %>@<%= p('nats.address') %>:<%= p('nats.port') %>
dir: /var/vcap/store/director
db:
  <% has_postgres = false %>
  <% if_p('postgres.user', 'postgres.password', 'postgres.address', 'postgres.port',
          'postgres.database') do |user, password, address, port, database| %>
    <% has_postgres = true %>
  database: postgres://<%= user %>:<%= password %>@<%= address %>:<%= port %>/<%= database %>
  max_connections: 32
  pool_timeout: 10
  <% end %>
  <% unless has_postgres %>
  database: sqlite:///var/vcap/store/director/director.db
  <% end %>
<% if p('director.enable_scheduled_snapshots') %>
scheduled_jobs:
  - command: snapshot_deployments
    schedule: <%= p('director.snapshot_schedule') %>
<% end %>
<% if_p('dns.address', 'dns.user', 'dns.password', 'dns.database.port', 'dns.database.name') do |address, user, password, db_port, db_name| %>
dns:
  server: <%= address %>
  <% if_p('dns.domain_name') do |domain_name| %>
  domain_name: <%= domain_name %>
  <% end %>
  db:
    database: postgres://<%= user %>:<%= password %>@<%= address %>:<%= db_port %>/<%= db_name %>
    max_connections: 32
    pool_timeout: 10
<% end %>
blobstore:
  provider: <%= p('blobstore.provider') %>
  options:
<% if p('blobstore.provider') == "s3" %>
    bucket_name: <%= p('blobstore.bucket_name') %>
    access_key_id: <%= p('blobstore.access_key_id') %>
    secret_access_key: <%= p('blobstore.secret_access_key') %>
<% else %>
    endpoint: http://<%= p('blobstore.address') %>:<%= p('blobstore.port') %>
    user: <%= p('blobstore.director.user') %>
    password: <%= p('blobstore.director.password') %>
<% end %>
<% if_p('compiled_package_cache.options.bucket_name',
        'compiled_package_cache.options.access_key_id',
        'compiled_package_cache.options.secret_access_key') do |bucket_name, access_key_id, secret_access_key| %>
compiled_package_cache:
  provider: s3
  options:
    bucket_name: <%= bucket_name %>
    access_key_id: <%= access_key_id %>
    secret_access_key: <%= secret_access_key %>
<% end %>
cloud:
<% plugin = nil %>
<% if_p('aws.access_key_id', 'aws.secret_access_key',
        'aws.default_key_name', 'aws.default_security_groups',
        'aws.region', 'registry.address',
        'registry.http.port', 'registry.http.user',
        'registry.http.password') do |access_key_id, secret_access_key,
                                          default_key_name, default_security_groups,
                                          region, reg_address,
                                          reg_port, reg_user,
                                          reg_password| %>
  plugin: aws <% plugin = "aws" %>
  properties:
    aws:
      access_key_id: <%= access_key_id %>
      secret_access_key: <%= secret_access_key %>
      default_key_name: <%= default_key_name %>
      default_security_groups: <%= default_security_groups %>
      region: <%= region %>
    registry:
      endpoint: http://<%= reg_address %>:<%= reg_port %>
      user: <%= reg_user %>
      password: <%= reg_password %>
    <% if_p('aws.stemcell.kernel_id') do |kernel_id| %>
    stemcell:
      kernel_id: <%= kernel_id %>
    <% end %>
<% end %>
<% if_p('openstack.auth_url', 'openstack.username', 'openstack.api_key',
        'openstack.tenant', 'openstack.default_key_name',
        'openstack.default_security_groups', 'registry.address',
        'registry.http.port', 'registry.http.user',
        'registry.http.password') do |auth_url, username, api_key,
                                                tenant, default_key_name,
                                                default_security_groups, reg_address,
                                                reg_port, reg_user,
                                                reg_password| %>
  plugin: openstack <% plugin = "openstack" %>
  properties:
    openstack:
      auth_url: <%= auth_url %>
      username: <%= username %>
      api_key: <%= api_key %>
      tenant: <%= tenant %>
      <% if_p("openstack.region") do |region| %>
      region: <%= region %>
      <% end %>
      <% if_p("openstack.endpoint_type") do |endpoint_type| %>
      endpoint_type: <%= endpoint_type %>
      <% end %>
      default_key_name: <%= default_key_name %>
      default_security_groups: <%= default_security_groups %>
    registry:
      endpoint: http://<%= reg_address %>:<%= reg_port %>
      user: <%= reg_user %>
      password: <%= reg_password %>
<% end %>
<% if_p('vcenter.address', 'vcenter.user', 'vcenter.password', 'vcenter.datacenters') do |address, user, password, datacenters| %>
  plugin: vsphere <% plugin = "vsphere" %>
  properties:
    mem_overcommit_ratio: 0.7
    cpi_log: /var/vcap/sys/log/director/<%%= ENV["COMPONENT"] %>.cpi.log
    vcenters:
      - host: <%= address %>
        user: <%= user %>
        password: <%= password %>
        datacenters:
          <% datacenters.each do |dc| %>
          - name: <%= dc['name'] %>
            vm_folder: <%= dc['vm_folder'] || "BOSH_VMs" %>
            template_folder: <%= dc['template_folder'] || "BOSH_Templates" %>
            disk_path: <%= dc['disk_path'] || "BOSH_Disks" %>
            datastore_pattern: <%= dc['datastore_pattern'] %>
            persistent_datastore_pattern: <%= dc['persistent_datastore_pattern'] %>
            allow_mixed_datastores: <%= dc['allow_mixed_datastores'] || true %>
            clusters:
              <% dc['clusters'].each do |cluster| %>
                <% case cluster
                   when Hash %>
                  <% cluster.each do |cluster_name, cluster_properties| %>
              - <%= cluster_name.to_s %>:
                    <% cluster_properties.each do |k, v| %>
                  <%= "#{k.to_s}: #{v}" %>
                    <% end %>
                  <% end %>
                <% when String %>
              - <%= cluster.to_s %>
                <% end %>
              <% end %>
          <% end %>
<% end %>
<% if_p('vcd.url', 'vcd.user', 'vcd.password',
        'vcd.entities.organization', 'vcd.entities.virtual_datacenter',
        'vcd.entities.vapp_catalog', 'vcd.entities.media_catalog',
        'vcd.entities.vm_metadata_key', 'vcd.entities.description') do |url, user, password,
                                                                        organization, datacenter,
                                                                        vapp_catalog, media_catalog,
                                                                        vm_metadata_key, description| %>
  plugin: vcloud <% plugin = "vcloud" %>
  properties:
    vcds:
      - url: <%= url %>
        user: <%= user %>
        password: <%= password %>
        entities:
          organization: <%= organization %>
          virtual_datacenter: <%= datacenter %>
          vapp_catalog: <%= vapp_catalog %>
          media_catalog: <%= media_catalog %>
          vm_metadata_key: <%= vm_metadata_key %>
          description: <%= description %>
<% end %>
<% raise "Could not find cloud plugin" if plugin.nil? %>
    agent:
      ntp: [<%= p('ntp').join(", ") %>]
      blobstore:
        provider: <%= p('blobstore.provider') %>
        options:
      <% if p('blobstore.provider') == "s3" %>
          bucket_name: <%= p('blobstore.bucket_name') %>
          access_key_id: <%= p(['agent.blobstore.access_key_id', 'blobstore.access_key_id']) %>
          secret_access_key: <%= p(['agent.blobstore.secret_access_key', 'blobstore.secret_access_key']) %>
      <% else %>
          endpoint: 'http://<%= p(['agent.blobstore.address', 'blobstore.address']) %>:<%= p('blobstore.port') %>'
          user: <%= p('blobstore.agent.user') %>
          password: <%= p('blobstore.agent.password') %>
      <% end %>
      mbus: nats://<%= p('nats.user') %>:<%= p('nats.password') %>@<%= p(['agent.nats.address', 'nats.address']) %>:<%= p('nats.port') %>
