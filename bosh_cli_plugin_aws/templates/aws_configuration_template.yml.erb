---
aws:
  secret_access_key: <%= aws_secret_access_key %>
  access_key_id: <%= aws_access_key_id %>
  region: eu-west-1
name: <%= vpc_deployment_name %>
vpc:
  domain: <%= vpc_generated_domain %>
  instance_tenancy: default
  cidr: 10.10.0.0/16
  subnets:
    <%- [[vpc_primary_az, 0, 1], [vpc_secondary_az, 64, 2]].each do |(az, third_octet, index)| -%>
    <%- if index == 1 -%> # only the first subnet gets a NAT box or CF/Services nodes until we want to start using them
    bosh<%= index %>:
      cidr: 10.10.<%= third_octet + 0 %>.0/24
      availability_zone: <%= az %>
      default_route: igw
      nat_instance:
        name: cf_nat_box<%= index %>
        ip: 10.10.0.10  # spin up NAT instance at fixed IP of 10.10.0.10
        security_group: open
        key_name: <%= key_pair_name %>
        <%- if production_resources? -%>
        instance_type: m1.xlarge
        <%- end -%>
    <%- end -%>
    bosh_rds<%= index %>:
      cidr: 10.10.<%= third_octet + 1 %>.0/24
      availability_zone: <%= az %>
    cf_elb<%= index %>:
      cidr: 10.10.<%= third_octet + 2 %>.0/24
      availability_zone: <%= az %>
      default_route: igw
    cf_rds<%= index %>:
      cidr: 10.10.<%= third_octet + 3 %>.0/24
      availability_zone: <%= az %>
    services_rds<%= index %>:
      cidr: 10.10.<%= third_octet + 8 %>.0/21
      availability_zone: <%= az %>
    <%- if index == 1 -%>
    cf<%= index %>:
      cidr: 10.10.<%= third_octet + 16 %>.0/20
      availability_zone: <%= az %>
      default_route: cf_nat_box<%= index %>
    services<%= index %>:
      cidr: 10.10.<%= third_octet + 32 %>.0/20
      availability_zone: <%= az %>
      default_route: cf_nat_box<%= index %>
    <%- end -%>
    <%- end -%>
  dhcp_options:
    domain_name_servers:
      - 10.10.0.6  # IP of the BOSH DNS server?
      - 10.10.0.2  # local amazon public DNS server
  security_groups:
    - name: open
      ingress:
        - protocol: tcp
          ports: '0 - 65535'
          sources: 0.0.0.0/0
        - protocol: udp
          ports: '0 - 65535'
          sources: 0.0.0.0/0
    - name: bosh
      ingress:
        - protocol: tcp
          ports: '0 - 65535'
          sources: 0.0.0.0/0
        - protocol: udp
          ports: '0 - 65535'
          sources: 0.0.0.0/0
    - name: bat
      ingress:
        - protocol: tcp
          ports: '4567'
          sources: 0.0.0.0/0
        - protocol: tcp
          ports: '22'
          sources: 0.0.0.0/0
    - name: cf
      ingress:
        - protocol: tcp
          ports: '0 - 65535'
          sources: 0.0.0.0/0
        - protocol: udp
          ports: '0 - 65535'
          sources: 0.0.0.0/0
    - name: web
      ingress:
        - protocol: tcp
          ports: '80'
          sources: 0.0.0.0/0
        - protocol: tcp
          ports: '443'
          sources: 0.0.0.0/0
  elbs:
    cfrouter:
      dns_record: "*"
      ttl: 60
      subnets:
      - cf_elb1
      - cf_elb2
      security_group: web
      https: true
      ssl_cert: cfrouter_cert

ssl_certs:
  director_cert:
    private_key_path: <%= director_ssl_key_file %>
    certificate_path: <%= director_ssl_cert_file %>
  cfrouter_cert:
    private_key_path: <%= elb_ssl_key_file %>
    certificate_path: <%= elb_ssl_cert_file %>
    certificate_chain_path: <%= elb_ssl_cert_chain_file %>

elastic_ips:
  # each NAT box automatically reserves 1 elastic IP, which is not listed below
  micro:
    instances: 1
    dns_record: "micro"
    ttl: 60
  bat:
    instances: 1
    dns_record: "bat"
    ttl: 60
  bosh:
    instances: 1
    dns_record: bosh
    ttl: 60

key_pairs:
  <%= key_pair_name %>: <%= key_pair_path %>

<%- if has_package_cache_configuration? -%>
compiled_package_cache:
  access_key_id: <%= cache_access_key_id %>
  secret_access_key: <%= cache_secret_access_key %>
  bucket_name: <%= cache_bucket_name %>
<%- end -%>
<%- rds_sizes = production_resources? ? {:large => "db.m1.large", :huge => "db.m2.4xlarge"} : Hash.new("db.t1.micro") -%>
rds:
  - instance: ccdb
    tag: cc
    subnets:
      - cf_rds1
      - cf_rds2
    aws_creation_options:
      db_instance_class: <%= rds_sizes[:large] %>
      # These are passed on directly to the AWS API call.
      # http://docs.aws.amazon.com/AWSRubySDK/latest/AWS/RDS/Client.html#create_db_instance-instance_method
      <%- if production_resources? -%>
      allocated_storage: 100
      iops: 1000
      <%- end -%>
      multi_az: true
  - instance: uaadb
    tag: uaa
    subnets:
      - cf_rds1
      - cf_rds2
    aws_creation_options:
      db_instance_class: <%= rds_sizes[:large] %>
      <%- if production_resources? -%>
      allocated_storage: 100
      iops: 1000
      <%- end -%>
  - instance: mysql-service-public
    tag: mysql
    subnets:
      - services_rds1
      - services_rds2
    aws_creation_options:
      db_name: mgmt
      engine_version: 5.5.27
      db_instance_class: <%= rds_sizes[:huge] %>
      <%- if production_resources? -%>
      allocated_storage: 100
      iops: 1000
      <%- end -%>
  - instance: mysql-service-cf-internal
    tag: mysql
    subnets:
      - services_rds1
      - services_rds2
    aws_creation_options:
      db_name: mgmt
      engine_version: 5.5.27
      db_instance_class: <%= rds_sizes[:large] %>
      <%- if production_resources? -%>
      allocated_storage: 100
      iops: 1000
      <%- end -%>
  - instance: bosh
    tag: bosh
    subnets:
      - bosh_rds1
      - bosh_rds2
    aws_creation_options:
      db_instance_class: <%= rds_sizes[:large] %>
      multi_az: true
