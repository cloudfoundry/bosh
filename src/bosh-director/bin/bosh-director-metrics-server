#!/usr/bin/env ruby

require 'bosh/director/config'
require 'bosh/director/metrics_collector'
require 'optparse'
require 'prometheus/middleware/collector'
require 'prometheus/middleware/exporter'
require 'puma'
require 'puma/configuration'

config_file = ::File.expand_path('../../config/bosh-director.yml', __FILE__)

opts = OptionParser.new do |op|
  op.on('-c', '--config [ARG]', 'Configuration File') do |opt|
    config_file = opt
  end
end

opts.parse!(ARGV.dup)

config = Bosh::Director::Config.load_file(config_file)
config.db

metrics_collector = Bosh::Director::MetricsCollector.new(config)

metrics_collector.prep
metrics_collector.start

rack_app = Puma::Rack::Builder.app do
  use Rack::CommonLogger
  use Prometheus::Middleware::Collector
  use Prometheus::Middleware::Exporter

  run ->(_) { [200, { 'Content-Type' => 'text/html' }, ['OK']] }
end

puma_configuration = Puma::Configuration.new do |user_config|
  user_config.tag 'metrics_server'
  user_config.bind "tcp://127.0.0.1:#{config.metrics_server_port}"
  user_config.app rack_app
  user_config.preload_app!
  # this makes sure that all puma workers get their own db connections
  user_config.before_fork { Bosh::Director::Config.db.disconnect }
end
puma_launcher = Puma::Launcher.new(puma_configuration)

%w[TERM INT QUIT].each do |signal|
  trap(signal) do
    puma_launcher.stop
    metrics_collector.stop
  end
end

puma_launcher.run
